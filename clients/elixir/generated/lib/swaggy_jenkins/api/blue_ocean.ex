# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SwaggyJenkins.Api.BlueOcean do
  @moduledoc """
  API calls for all endpoints tagged `BlueOcean`.
  """

  alias SwaggyJenkins.Connection
  import SwaggyJenkins.RequestBuilder


  @doc """
  Delete queue item from an organization pipeline queue

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - queue (String.t): Name of the queue item
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec delete_pipeline_queue_item(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_pipeline_queue_item(connection, organization, pipeline, queue, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/queue/#{queue}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve authenticated user details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.User{}} on success
  {:error, info} on failure
  """
  @spec get_authenticated_user(Tesla.Env.client, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.User.t} | {:error, Tesla.Env.t}
  def get_authenticated_user(connection, organization, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/user/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.User{})
  end

  @doc """
  Get a list of class names supported by a given class

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - class (String.t): Name of the class
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec get_classes(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_classes(connection, class, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/classes/#{class}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve JSON Web Key

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - key (integer()): Key ID received as part of JWT header field kid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec get_json_web_key(Tesla.Env.client, integer(), keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_json_web_key(connection, key, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/jwt-auth/jwks/#{key}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve JSON Web Token

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :expiry_time_in_mins (integer()): Token expiry time in minutes, default: 30 minutes
    - :max_expiry_time_in_mins (integer()): Maximum token expiry time in minutes, default: 480 minutes
  ## Returns

  {:ok, %SwaggyJenkins.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec get_json_web_token(Tesla.Env.client, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_json_web_token(connection, opts \\ []) do
    optional_params = %{
      :"expiryTimeInMins" => :query,
      :"maxExpiryTimeInMins" => :query
    }
    %{}
    |> method(:get)
    |> url("/jwt-auth/token")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve organization details

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.Organisation{}} on success
  {:error, info} on failure
  """
  @spec get_organisation(Tesla.Env.client, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.Organisation.t} | {:error, Tesla.Env.t}
  def get_organisation(connection, organization, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.Organisation{})
  end

  @doc """
  Retrieve all organizations details

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.Organisations{}} on success
  {:error, info} on failure
  """
  @spec get_organisations(Tesla.Env.client, keyword()) :: {:ok, SwaggyJenkins.Model.Organisations.t} | {:error, Tesla.Env.t}
  def get_organisations(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.Organisations{})
  end

  @doc """
  Retrieve pipeline details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.Pipeline{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.Pipeline.t} | {:error, Tesla.Env.t}
  def get_pipeline(connection, organization, pipeline, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.Pipeline{})
  end

  @doc """
  Retrieve all activities details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineActivities{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_activities(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineActivities.t} | {:error, Tesla.Env.t}
  def get_pipeline_activities(connection, organization, pipeline, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/activities")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineActivities{})
  end

  @doc """
  Retrieve branch details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - branch (String.t): Name of the branch
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.BranchImpl{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_branch(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.BranchImpl.t} | {:error, Tesla.Env.t}
  def get_pipeline_branch(connection, organization, pipeline, branch, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/branches/#{branch}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.BranchImpl{})
  end

  @doc """
  Retrieve branch run details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - branch (String.t): Name of the branch
  - run (String.t): Name of the run
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineRun{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_branch_run(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineRun.t} | {:error, Tesla.Env.t}
  def get_pipeline_branch_run(connection, organization, pipeline, branch, run, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/branches/#{branch}/runs/#{run}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineRun{})
  end

  @doc """
  Retrieve all branches details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.MultibranchPipeline{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_branches(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.MultibranchPipeline.t} | {:error, Tesla.Env.t}
  def get_pipeline_branches(connection, organization, pipeline, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/branches")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.MultibranchPipeline{})
  end

  @doc """
  Retrieve pipeline folder for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - folder (String.t): Name of the folder
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineFolderImpl{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_folder(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineFolderImpl.t} | {:error, Tesla.Env.t}
  def get_pipeline_folder(connection, organization, folder, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{folder}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineFolderImpl{})
  end

  @doc """
  Retrieve pipeline details for an organization folder

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - folder (String.t): Name of the folder
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineImpl{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_folder_pipeline(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineImpl.t} | {:error, Tesla.Env.t}
  def get_pipeline_folder_pipeline(connection, organization, pipeline, folder, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{folder}/pipelines/#{pipeline}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineImpl{})
  end

  @doc """
  Retrieve queue details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineQueue{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_queue(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineQueue.t} | {:error, Tesla.Env.t}
  def get_pipeline_queue(connection, organization, pipeline, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/queue")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineQueue{})
  end

  @doc """
  Retrieve run details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineRun{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_run(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineRun.t} | {:error, Tesla.Env.t}
  def get_pipeline_run(connection, organization, pipeline, run, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineRun{})
  end

  @doc """
  Get log for a pipeline run

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - opts (KeywordList): [optional] Optional parameters
    - :start (integer()): Start position of the log
    - :download (boolean()): Set to true in order to download the file, otherwise it&#39;s passed as a response body
  ## Returns

  {:ok, %SwaggyJenkins.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_run_log(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_log(connection, organization, pipeline, run, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"download" => :query
    }
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/log")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve run node details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - node (String.t): Name of the node
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineRunNode{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_run_node(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineRunNode.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_node(connection, organization, pipeline, run, node, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes/#{node}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineRunNode{})
  end

  @doc """
  Retrieve run node details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - node (String.t): Name of the node
  - step (String.t): Name of the step
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineStepImpl{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_run_node_step(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineStepImpl.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_node_step(connection, organization, pipeline, run, node, step, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes/#{node}/steps/#{step}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineStepImpl{})
  end

  @doc """
  Get log for a pipeline run node step

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - node (String.t): Name of the node
  - step (String.t): Name of the step
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_run_node_step_log(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_node_step_log(connection, organization, pipeline, run, node, step, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes/#{node}/steps/#{step}/log")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve run node steps details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - node (String.t): Name of the node
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineRunNodeSteps{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_run_node_steps(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineRunNodeSteps.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_node_steps(connection, organization, pipeline, run, node, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes/#{node}/steps")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineRunNodeSteps{})
  end

  @doc """
  Retrieve run nodes details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineRunNodes{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_run_nodes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineRunNodes.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_nodes(connection, organization, pipeline, run, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineRunNodes{})
  end

  @doc """
  Retrieve all runs details for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineRuns{}} on success
  {:error, info} on failure
  """
  @spec get_pipeline_runs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineRuns.t} | {:error, Tesla.Env.t}
  def get_pipeline_runs(connection, organization, pipeline, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineRuns{})
  end

  @doc """
  Retrieve all pipelines details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.Pipelines{}} on success
  {:error, info} on failure
  """
  @spec get_pipelines(Tesla.Env.client, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.Pipelines.t} | {:error, Tesla.Env.t}
  def get_pipelines(connection, organization, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/pipelines/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.Pipelines{})
  end

  @doc """
  Retrieve SCM details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - scm (String.t): Name of SCM
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.GithubScm{}} on success
  {:error, info} on failure
  """
  @spec get_scm(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.GithubScm.t} | {:error, Tesla.Env.t}
  def get_scm(connection, organization, scm, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/scm/#{scm}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.GithubScm{})
  end

  @doc """
  Retrieve SCM organization repositories details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - scm (String.t): Name of SCM
  - scm_organisation (String.t): Name of the SCM organization
  - opts (KeywordList): [optional] Optional parameters
    - :credential_id (String.t): Credential ID
    - :page_size (integer()): Number of items in a page
    - :page_number (integer()): Page number
  ## Returns

  {:ok, %SwaggyJenkins.Model.ScmOrganisations{}} on success
  {:error, info} on failure
  """
  @spec get_scm_organisation_repositories(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.ScmOrganisations.t} | {:error, Tesla.Env.t}
  def get_scm_organisation_repositories(connection, organization, scm, scm_organisation, opts \\ []) do
    optional_params = %{
      :"credentialId" => :query,
      :"pageSize" => :query,
      :"pageNumber" => :query
    }
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/scm/#{scm}/organizations/#{scm_organisation}/repositories")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.ScmOrganisations{})
  end

  @doc """
  Retrieve SCM organization repository details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - scm (String.t): Name of SCM
  - scm_organisation (String.t): Name of the SCM organization
  - repository (String.t): Name of the SCM repository
  - opts (KeywordList): [optional] Optional parameters
    - :credential_id (String.t): Credential ID
  ## Returns

  {:ok, %SwaggyJenkins.Model.ScmOrganisations{}} on success
  {:error, info} on failure
  """
  @spec get_scm_organisation_repository(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.ScmOrganisations.t} | {:error, Tesla.Env.t}
  def get_scm_organisation_repository(connection, organization, scm, scm_organisation, repository, opts \\ []) do
    optional_params = %{
      :"credentialId" => :query
    }
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/scm/#{scm}/organizations/#{scm_organisation}/repositories/#{repository}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.ScmOrganisations{})
  end

  @doc """
  Retrieve SCM organizations details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - scm (String.t): Name of SCM
  - opts (KeywordList): [optional] Optional parameters
    - :credential_id (String.t): Credential ID
  ## Returns

  {:ok, %SwaggyJenkins.Model.ScmOrganisations{}} on success
  {:error, info} on failure
  """
  @spec get_scm_organisations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.ScmOrganisations.t} | {:error, Tesla.Env.t}
  def get_scm_organisations(connection, organization, scm, opts \\ []) do
    optional_params = %{
      :"credentialId" => :query
    }
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/scm/#{scm}/organizations")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.ScmOrganisations{})
  end

  @doc """
  Retrieve user details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - user (String.t): Name of the user
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.User{}} on success
  {:error, info} on failure
  """
  @spec get_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.User.t} | {:error, Tesla.Env.t}
  def get_user(connection, organization, user, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/users/#{user}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.User{})
  end

  @doc """
  Retrieve user favorites details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - user (String.t): Name of the user
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.UserFavorites{}} on success
  {:error, info} on failure
  """
  @spec get_user_favorites(Tesla.Env.client, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.UserFavorites.t} | {:error, Tesla.Env.t}
  def get_user_favorites(connection, user, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/users/#{user}/favorites")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.UserFavorites{})
  end

  @doc """
  Retrieve users details for an organization

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.User{}} on success
  {:error, info} on failure
  """
  @spec get_users(Tesla.Env.client, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.User.t} | {:error, Tesla.Env.t}
  def get_users(connection, organization, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/organizations/#{organization}/users/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.User{})
  end

  @doc """
  Replay an organization pipeline run

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.QueueItemImpl{}} on success
  {:error, info} on failure
  """
  @spec post_pipeline_run(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.QueueItemImpl.t} | {:error, Tesla.Env.t}
  def post_pipeline_run(connection, organization, pipeline, run, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/replay")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.QueueItemImpl{})
  end

  @doc """
  Start a build for an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.QueueItemImpl{}} on success
  {:error, info} on failure
  """
  @spec post_pipeline_runs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.QueueItemImpl.t} | {:error, Tesla.Env.t}
  def post_pipeline_runs(connection, organization, pipeline, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.QueueItemImpl{})
  end

  @doc """
  Favorite/unfavorite a pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - body (Body): Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.FavoriteImpl{}} on success
  {:error, info} on failure
  """
  @spec put_pipeline_favorite(Tesla.Env.client, String.t, String.t, SwaggyJenkins.Model.Body.t, keyword()) :: {:ok, SwaggyJenkins.Model.FavoriteImpl.t} | {:error, Tesla.Env.t}
  def put_pipeline_favorite(connection, organization, pipeline, body, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/favorite")
    |> add_param(:body, :"Body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.FavoriteImpl{})
  end

  @doc """
  Stop a build of an organization pipeline

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - organization (String.t): Name of the organization
  - pipeline (String.t): Name of the pipeline
  - run (String.t): Name of the run
  - opts (KeywordList): [optional] Optional parameters
    - :blocking (String.t): Set to true to make blocking stop, default: false
    - :time_out_in_secs (integer()): Timeout in seconds, default: 10 seconds
  ## Returns

  {:ok, %SwaggyJenkins.Model.PipelineRun{}} on success
  {:error, info} on failure
  """
  @spec put_pipeline_run(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, SwaggyJenkins.Model.PipelineRun.t} | {:error, Tesla.Env.t}
  def put_pipeline_run(connection, organization, pipeline, run, opts \\ []) do
    optional_params = %{
      :"blocking" => :query,
      :"timeOutInSecs" => :query
    }
    %{}
    |> method(:put)
    |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/stop")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%SwaggyJenkins.Model.PipelineRun{})
  end

  @doc """
  Search for any resource details

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - q (String.t): Query string
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec search(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def search(connection, q, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/search/")
    |> add_param(:query, :"q", q)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get classes details

  ## Parameters

  - connection (SwaggyJenkins.Connection): Connection to server
  - q (String.t): Query string containing an array of class names
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %SwaggyJenkins.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec search_classes(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def search_classes(connection, q, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/blue/rest/classes/")
    |> add_param(:query, :"q", q)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
