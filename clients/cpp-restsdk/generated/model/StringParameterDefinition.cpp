/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StringParameterDefinition.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

StringParameterDefinition::StringParameterDefinition()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_DefaultParameterValueIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

StringParameterDefinition::~StringParameterDefinition()
{
}

void StringParameterDefinition::validate()
{
    // TODO: implement validation
}

web::json::value StringParameterDefinition::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m_DefaultParameterValueIsSet)
    {
        val[utility::conversions::to_string_t("defaultParameterValue")] = ModelBase::toJson(m_DefaultParameterValue);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

void StringParameterDefinition::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("defaultParameterValue")))
    {
        if(!val[utility::conversions::to_string_t("defaultParameterValue")].is_null())
        {
            std::shared_ptr<StringParameterValue> newItem(new StringParameterValue());
            newItem->fromJson(val[utility::conversions::to_string_t("defaultParameterValue")]);
            setDefaultParameterValue( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromJson(val[utility::conversions::to_string_t("description")]));
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("type")]));
    }
}

void StringParameterDefinition::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m_DefaultParameterValueIsSet)
    {
        if (m_DefaultParameterValue.get())
        {
            m_DefaultParameterValue->toMultipart(multipart, utility::conversions::to_string_t("defaultParameterValue."));
        }
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

void StringParameterDefinition::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultParameterValue")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("defaultParameterValue")))
        {
            std::shared_ptr<StringParameterValue> newItem(new StringParameterValue());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("defaultParameterValue."));
            setDefaultParameterValue( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
}

utility::string_t StringParameterDefinition::getClass() const
{
    return m__class;
}


void StringParameterDefinition::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool StringParameterDefinition::_classIsSet() const
{
    return m__classIsSet;
}

void StringParameterDefinition::unset_class()
{
    m__classIsSet = false;
}

std::shared_ptr<StringParameterValue> StringParameterDefinition::getDefaultParameterValue() const
{
    return m_DefaultParameterValue;
}


void StringParameterDefinition::setDefaultParameterValue(std::shared_ptr<StringParameterValue> value)
{
    m_DefaultParameterValue = value;
    m_DefaultParameterValueIsSet = true;
}
bool StringParameterDefinition::defaultParameterValueIsSet() const
{
    return m_DefaultParameterValueIsSet;
}

void StringParameterDefinition::unsetDefaultParameterValue()
{
    m_DefaultParameterValueIsSet = false;
}

utility::string_t StringParameterDefinition::getDescription() const
{
    return m_Description;
}


void StringParameterDefinition::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool StringParameterDefinition::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void StringParameterDefinition::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t StringParameterDefinition::getName() const
{
    return m_Name;
}


void StringParameterDefinition::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool StringParameterDefinition::nameIsSet() const
{
    return m_NameIsSet;
}

void StringParameterDefinition::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t StringParameterDefinition::getType() const
{
    return m_Type;
}


void StringParameterDefinition::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool StringParameterDefinition::typeIsSet() const
{
    return m_TypeIsSet;
}

void StringParameterDefinition::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

