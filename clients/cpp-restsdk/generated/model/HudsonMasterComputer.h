/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HudsonMasterComputer.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_HudsonMasterComputer_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_HudsonMasterComputer_H_


#include "../ModelBase.h"

#include "HudsonMasterComputermonitorData.h"
#include <cpprest/details/basic_types.h>
#include "Label1.h"
#include <vector>
#include "HudsonMasterComputerexecutors.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  HudsonMasterComputer
    : public ModelBase
{
public:
    HudsonMasterComputer();
    virtual ~HudsonMasterComputer();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// HudsonMasterComputer members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClass() const;
    bool _classIsSet() const;
    void unset_class();
    void setClass(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();
    void setDisplayName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<HudsonMasterComputerexecutors>>& getExecutors();
    bool executorsIsSet() const;
    void unsetExecutors();
    void setExecutors(std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIcon() const;
    bool iconIsSet() const;
    void unsetIcon();
    void setIcon(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIconClassName() const;
    bool iconClassNameIsSet() const;
    void unsetIconClassName();
    void setIconClassName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isIdle() const;
    bool idleIsSet() const;
    void unsetIdle();
    void setIdle(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isJnlpAgent() const;
    bool jnlpAgentIsSet() const;
    void unsetJnlpAgent();
    void setJnlpAgent(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isLaunchSupported() const;
    bool launchSupportedIsSet() const;
    void unsetLaunchSupported();
    void setLaunchSupported(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Label1> getLoadStatistics() const;
    bool loadStatisticsIsSet() const;
    void unsetLoadStatistics();
    void setLoadStatistics(std::shared_ptr<Label1> value);
    /// <summary>
    /// 
    /// </summary>
    bool isManualLaunchAllowed() const;
    bool manualLaunchAllowedIsSet() const;
    void unsetManualLaunchAllowed();
    void setManualLaunchAllowed(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HudsonMasterComputermonitorData> getMonitorData() const;
    bool monitorDataIsSet() const;
    void unsetMonitorData();
    void setMonitorData(std::shared_ptr<HudsonMasterComputermonitorData> value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getNumExecutors() const;
    bool numExecutorsIsSet() const;
    void unsetNumExecutors();
    void setNumExecutors(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isOffline() const;
    bool offlineIsSet() const;
    void unsetOffline();
    void setOffline(bool value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOfflineCause() const;
    bool offlineCauseIsSet() const;
    void unsetOfflineCause();
    void setOfflineCause(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOfflineCauseReason() const;
    bool offlineCauseReasonIsSet() const;
    void unsetOfflineCauseReason();
    void setOfflineCauseReason(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool isTemporarilyOffline() const;
    bool temporarilyOfflineIsSet() const;
    void unsetTemporarilyOffline();
    void setTemporarilyOffline(bool value);

protected:
    utility::string_t m__class;
    bool m__classIsSet;
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
    std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> m_Executors;
    bool m_ExecutorsIsSet;
    utility::string_t m_Icon;
    bool m_IconIsSet;
    utility::string_t m_IconClassName;
    bool m_IconClassNameIsSet;
    bool m_Idle;
    bool m_IdleIsSet;
    bool m_JnlpAgent;
    bool m_JnlpAgentIsSet;
    bool m_LaunchSupported;
    bool m_LaunchSupportedIsSet;
    std::shared_ptr<Label1> m_LoadStatistics;
    bool m_LoadStatisticsIsSet;
    bool m_ManualLaunchAllowed;
    bool m_ManualLaunchAllowedIsSet;
    std::shared_ptr<HudsonMasterComputermonitorData> m_MonitorData;
    bool m_MonitorDataIsSet;
    int32_t m_NumExecutors;
    bool m_NumExecutorsIsSet;
    bool m_Offline;
    bool m_OfflineIsSet;
    utility::string_t m_OfflineCause;
    bool m_OfflineCauseIsSet;
    utility::string_t m_OfflineCauseReason;
    bool m_OfflineCauseReasonIsSet;
    bool m_TemporarilyOffline;
    bool m_TemporarilyOfflineIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_HudsonMasterComputer_H_ */
