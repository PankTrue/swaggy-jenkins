/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HudsonMasterComputer.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

HudsonMasterComputer::HudsonMasterComputer()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_ExecutorsIsSet = false;
    m_Icon = utility::conversions::to_string_t("");
    m_IconIsSet = false;
    m_IconClassName = utility::conversions::to_string_t("");
    m_IconClassNameIsSet = false;
    m_Idle = false;
    m_IdleIsSet = false;
    m_JnlpAgent = false;
    m_JnlpAgentIsSet = false;
    m_LaunchSupported = false;
    m_LaunchSupportedIsSet = false;
    m_LoadStatisticsIsSet = false;
    m_ManualLaunchAllowed = false;
    m_ManualLaunchAllowedIsSet = false;
    m_MonitorDataIsSet = false;
    m_NumExecutors = 0;
    m_NumExecutorsIsSet = false;
    m_Offline = false;
    m_OfflineIsSet = false;
    m_OfflineCause = utility::conversions::to_string_t("");
    m_OfflineCauseIsSet = false;
    m_OfflineCauseReason = utility::conversions::to_string_t("");
    m_OfflineCauseReasonIsSet = false;
    m_TemporarilyOffline = false;
    m_TemporarilyOfflineIsSet = false;
}

HudsonMasterComputer::~HudsonMasterComputer()
{
}

void HudsonMasterComputer::validate()
{
    // TODO: implement validation
}

web::json::value HudsonMasterComputer::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Executors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("executors")] = web::json::value::array(jsonArray);
        }
    }
    if(m_IconIsSet)
    {
        val[utility::conversions::to_string_t("icon")] = ModelBase::toJson(m_Icon);
    }
    if(m_IconClassNameIsSet)
    {
        val[utility::conversions::to_string_t("iconClassName")] = ModelBase::toJson(m_IconClassName);
    }
    if(m_IdleIsSet)
    {
        val[utility::conversions::to_string_t("idle")] = ModelBase::toJson(m_Idle);
    }
    if(m_JnlpAgentIsSet)
    {
        val[utility::conversions::to_string_t("jnlpAgent")] = ModelBase::toJson(m_JnlpAgent);
    }
    if(m_LaunchSupportedIsSet)
    {
        val[utility::conversions::to_string_t("launchSupported")] = ModelBase::toJson(m_LaunchSupported);
    }
    if(m_LoadStatisticsIsSet)
    {
        val[utility::conversions::to_string_t("loadStatistics")] = ModelBase::toJson(m_LoadStatistics);
    }
    if(m_ManualLaunchAllowedIsSet)
    {
        val[utility::conversions::to_string_t("manualLaunchAllowed")] = ModelBase::toJson(m_ManualLaunchAllowed);
    }
    if(m_MonitorDataIsSet)
    {
        val[utility::conversions::to_string_t("monitorData")] = ModelBase::toJson(m_MonitorData);
    }
    if(m_NumExecutorsIsSet)
    {
        val[utility::conversions::to_string_t("numExecutors")] = ModelBase::toJson(m_NumExecutors);
    }
    if(m_OfflineIsSet)
    {
        val[utility::conversions::to_string_t("offline")] = ModelBase::toJson(m_Offline);
    }
    if(m_OfflineCauseIsSet)
    {
        val[utility::conversions::to_string_t("offlineCause")] = ModelBase::toJson(m_OfflineCause);
    }
    if(m_OfflineCauseReasonIsSet)
    {
        val[utility::conversions::to_string_t("offlineCauseReason")] = ModelBase::toJson(m_OfflineCauseReason);
    }
    if(m_TemporarilyOfflineIsSet)
    {
        val[utility::conversions::to_string_t("temporarilyOffline")] = ModelBase::toJson(m_TemporarilyOffline);
    }

    return val;
}

void HudsonMasterComputer::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("displayName")]));
    }
    {
        m_Executors.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("executors")))
        {
        for( auto& item : val[utility::conversions::to_string_t("executors")].as_array() )
        {
            if(item.is_null())
            {
                m_Executors.push_back( std::shared_ptr<HudsonMasterComputerexecutors>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonMasterComputerexecutors> newItem(new HudsonMasterComputerexecutors());
                newItem->fromJson(item);
                m_Executors.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("icon")))
    {
        setIcon(ModelBase::stringFromJson(val[utility::conversions::to_string_t("icon")]));
    }
    if(val.has_field(utility::conversions::to_string_t("iconClassName")))
    {
        setIconClassName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("iconClassName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("idle")))
    {
        setIdle(ModelBase::boolFromJson(val[utility::conversions::to_string_t("idle")]));
    }
    if(val.has_field(utility::conversions::to_string_t("jnlpAgent")))
    {
        setJnlpAgent(ModelBase::boolFromJson(val[utility::conversions::to_string_t("jnlpAgent")]));
    }
    if(val.has_field(utility::conversions::to_string_t("launchSupported")))
    {
        setLaunchSupported(ModelBase::boolFromJson(val[utility::conversions::to_string_t("launchSupported")]));
    }
    if(val.has_field(utility::conversions::to_string_t("loadStatistics")))
    {
        if(!val[utility::conversions::to_string_t("loadStatistics")].is_null())
        {
            std::shared_ptr<Label1> newItem(new Label1());
            newItem->fromJson(val[utility::conversions::to_string_t("loadStatistics")]);
            setLoadStatistics( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("manualLaunchAllowed")))
    {
        setManualLaunchAllowed(ModelBase::boolFromJson(val[utility::conversions::to_string_t("manualLaunchAllowed")]));
    }
    if(val.has_field(utility::conversions::to_string_t("monitorData")))
    {
        if(!val[utility::conversions::to_string_t("monitorData")].is_null())
        {
            std::shared_ptr<HudsonMasterComputermonitorData> newItem(new HudsonMasterComputermonitorData());
            newItem->fromJson(val[utility::conversions::to_string_t("monitorData")]);
            setMonitorData( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("numExecutors")))
    {
        setNumExecutors(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("numExecutors")]));
    }
    if(val.has_field(utility::conversions::to_string_t("offline")))
    {
        setOffline(ModelBase::boolFromJson(val[utility::conversions::to_string_t("offline")]));
    }
    if(val.has_field(utility::conversions::to_string_t("offlineCause")))
    {
        setOfflineCause(ModelBase::stringFromJson(val[utility::conversions::to_string_t("offlineCause")]));
    }
    if(val.has_field(utility::conversions::to_string_t("offlineCauseReason")))
    {
        setOfflineCauseReason(ModelBase::stringFromJson(val[utility::conversions::to_string_t("offlineCauseReason")]));
    }
    if(val.has_field(utility::conversions::to_string_t("temporarilyOffline")))
    {
        setTemporarilyOffline(ModelBase::boolFromJson(val[utility::conversions::to_string_t("temporarilyOffline")]));
    }
}

void HudsonMasterComputer::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Executors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("executors"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_IconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("icon"), m_Icon));
    }
    if(m_IconClassNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iconClassName"), m_IconClassName));
    }
    if(m_IdleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("idle"), m_Idle));
    }
    if(m_JnlpAgentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("jnlpAgent"), m_JnlpAgent));
    }
    if(m_LaunchSupportedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("launchSupported"), m_LaunchSupported));
    }
    if(m_LoadStatisticsIsSet)
    {
        if (m_LoadStatistics.get())
        {
            m_LoadStatistics->toMultipart(multipart, utility::conversions::to_string_t("loadStatistics."));
        }
    }
    if(m_ManualLaunchAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("manualLaunchAllowed"), m_ManualLaunchAllowed));
    }
    if(m_MonitorDataIsSet)
    {
        if (m_MonitorData.get())
        {
            m_MonitorData->toMultipart(multipart, utility::conversions::to_string_t("monitorData."));
        }
    }
    if(m_NumExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("numExecutors"), m_NumExecutors));
    }
    if(m_OfflineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offline"), m_Offline));
    }
    if(m_OfflineCauseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offlineCause"), m_OfflineCause));
    }
    if(m_OfflineCauseReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("offlineCauseReason"), m_OfflineCauseReason));
    }
    if(m_TemporarilyOfflineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temporarilyOffline"), m_TemporarilyOffline));
    }
}

void HudsonMasterComputer::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    {
        m_Executors.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("executors")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("executors"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Executors.push_back( std::shared_ptr<HudsonMasterComputerexecutors>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonMasterComputerexecutors> newItem(new HudsonMasterComputerexecutors());
                newItem->fromJson(item);
                m_Executors.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("icon")))
    {
        setIcon(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("icon"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iconClassName")))
    {
        setIconClassName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("iconClassName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("idle")))
    {
        setIdle(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("idle"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("jnlpAgent")))
    {
        setJnlpAgent(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("jnlpAgent"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("launchSupported")))
    {
        setLaunchSupported(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("launchSupported"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("loadStatistics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("loadStatistics")))
        {
            std::shared_ptr<Label1> newItem(new Label1());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("loadStatistics."));
            setLoadStatistics( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("manualLaunchAllowed")))
    {
        setManualLaunchAllowed(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("manualLaunchAllowed"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("monitorData")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("monitorData")))
        {
            std::shared_ptr<HudsonMasterComputermonitorData> newItem(new HudsonMasterComputermonitorData());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("monitorData."));
            setMonitorData( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("numExecutors")))
    {
        setNumExecutors(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("numExecutors"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offline")))
    {
        setOffline(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("offline"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offlineCause")))
    {
        setOfflineCause(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("offlineCause"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offlineCauseReason")))
    {
        setOfflineCauseReason(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("offlineCauseReason"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temporarilyOffline")))
    {
        setTemporarilyOffline(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("temporarilyOffline"))));
    }
}

utility::string_t HudsonMasterComputer::getClass() const
{
    return m__class;
}


void HudsonMasterComputer::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool HudsonMasterComputer::_classIsSet() const
{
    return m__classIsSet;
}

void HudsonMasterComputer::unset_class()
{
    m__classIsSet = false;
}

utility::string_t HudsonMasterComputer::getDisplayName() const
{
    return m_DisplayName;
}


void HudsonMasterComputer::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool HudsonMasterComputer::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void HudsonMasterComputer::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

std::vector<std::shared_ptr<HudsonMasterComputerexecutors>>& HudsonMasterComputer::getExecutors()
{
    return m_Executors;
}

void HudsonMasterComputer::setExecutors(std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> value)
{
    m_Executors = value;
    m_ExecutorsIsSet = true;
}
bool HudsonMasterComputer::executorsIsSet() const
{
    return m_ExecutorsIsSet;
}

void HudsonMasterComputer::unsetExecutors()
{
    m_ExecutorsIsSet = false;
}

utility::string_t HudsonMasterComputer::getIcon() const
{
    return m_Icon;
}


void HudsonMasterComputer::setIcon(utility::string_t value)
{
    m_Icon = value;
    m_IconIsSet = true;
}
bool HudsonMasterComputer::iconIsSet() const
{
    return m_IconIsSet;
}

void HudsonMasterComputer::unsetIcon()
{
    m_IconIsSet = false;
}

utility::string_t HudsonMasterComputer::getIconClassName() const
{
    return m_IconClassName;
}


void HudsonMasterComputer::setIconClassName(utility::string_t value)
{
    m_IconClassName = value;
    m_IconClassNameIsSet = true;
}
bool HudsonMasterComputer::iconClassNameIsSet() const
{
    return m_IconClassNameIsSet;
}

void HudsonMasterComputer::unsetIconClassName()
{
    m_IconClassNameIsSet = false;
}

bool HudsonMasterComputer::isIdle() const
{
    return m_Idle;
}


void HudsonMasterComputer::setIdle(bool value)
{
    m_Idle = value;
    m_IdleIsSet = true;
}
bool HudsonMasterComputer::idleIsSet() const
{
    return m_IdleIsSet;
}

void HudsonMasterComputer::unsetIdle()
{
    m_IdleIsSet = false;
}

bool HudsonMasterComputer::isJnlpAgent() const
{
    return m_JnlpAgent;
}


void HudsonMasterComputer::setJnlpAgent(bool value)
{
    m_JnlpAgent = value;
    m_JnlpAgentIsSet = true;
}
bool HudsonMasterComputer::jnlpAgentIsSet() const
{
    return m_JnlpAgentIsSet;
}

void HudsonMasterComputer::unsetJnlpAgent()
{
    m_JnlpAgentIsSet = false;
}

bool HudsonMasterComputer::isLaunchSupported() const
{
    return m_LaunchSupported;
}


void HudsonMasterComputer::setLaunchSupported(bool value)
{
    m_LaunchSupported = value;
    m_LaunchSupportedIsSet = true;
}
bool HudsonMasterComputer::launchSupportedIsSet() const
{
    return m_LaunchSupportedIsSet;
}

void HudsonMasterComputer::unsetLaunchSupported()
{
    m_LaunchSupportedIsSet = false;
}

std::shared_ptr<Label1> HudsonMasterComputer::getLoadStatistics() const
{
    return m_LoadStatistics;
}


void HudsonMasterComputer::setLoadStatistics(std::shared_ptr<Label1> value)
{
    m_LoadStatistics = value;
    m_LoadStatisticsIsSet = true;
}
bool HudsonMasterComputer::loadStatisticsIsSet() const
{
    return m_LoadStatisticsIsSet;
}

void HudsonMasterComputer::unsetLoadStatistics()
{
    m_LoadStatisticsIsSet = false;
}

bool HudsonMasterComputer::isManualLaunchAllowed() const
{
    return m_ManualLaunchAllowed;
}


void HudsonMasterComputer::setManualLaunchAllowed(bool value)
{
    m_ManualLaunchAllowed = value;
    m_ManualLaunchAllowedIsSet = true;
}
bool HudsonMasterComputer::manualLaunchAllowedIsSet() const
{
    return m_ManualLaunchAllowedIsSet;
}

void HudsonMasterComputer::unsetManualLaunchAllowed()
{
    m_ManualLaunchAllowedIsSet = false;
}

std::shared_ptr<HudsonMasterComputermonitorData> HudsonMasterComputer::getMonitorData() const
{
    return m_MonitorData;
}


void HudsonMasterComputer::setMonitorData(std::shared_ptr<HudsonMasterComputermonitorData> value)
{
    m_MonitorData = value;
    m_MonitorDataIsSet = true;
}
bool HudsonMasterComputer::monitorDataIsSet() const
{
    return m_MonitorDataIsSet;
}

void HudsonMasterComputer::unsetMonitorData()
{
    m_MonitorDataIsSet = false;
}

int32_t HudsonMasterComputer::getNumExecutors() const
{
    return m_NumExecutors;
}


void HudsonMasterComputer::setNumExecutors(int32_t value)
{
    m_NumExecutors = value;
    m_NumExecutorsIsSet = true;
}
bool HudsonMasterComputer::numExecutorsIsSet() const
{
    return m_NumExecutorsIsSet;
}

void HudsonMasterComputer::unsetNumExecutors()
{
    m_NumExecutorsIsSet = false;
}

bool HudsonMasterComputer::isOffline() const
{
    return m_Offline;
}


void HudsonMasterComputer::setOffline(bool value)
{
    m_Offline = value;
    m_OfflineIsSet = true;
}
bool HudsonMasterComputer::offlineIsSet() const
{
    return m_OfflineIsSet;
}

void HudsonMasterComputer::unsetOffline()
{
    m_OfflineIsSet = false;
}

utility::string_t HudsonMasterComputer::getOfflineCause() const
{
    return m_OfflineCause;
}


void HudsonMasterComputer::setOfflineCause(utility::string_t value)
{
    m_OfflineCause = value;
    m_OfflineCauseIsSet = true;
}
bool HudsonMasterComputer::offlineCauseIsSet() const
{
    return m_OfflineCauseIsSet;
}

void HudsonMasterComputer::unsetOfflineCause()
{
    m_OfflineCauseIsSet = false;
}

utility::string_t HudsonMasterComputer::getOfflineCauseReason() const
{
    return m_OfflineCauseReason;
}


void HudsonMasterComputer::setOfflineCauseReason(utility::string_t value)
{
    m_OfflineCauseReason = value;
    m_OfflineCauseReasonIsSet = true;
}
bool HudsonMasterComputer::offlineCauseReasonIsSet() const
{
    return m_OfflineCauseReasonIsSet;
}

void HudsonMasterComputer::unsetOfflineCauseReason()
{
    m_OfflineCauseReasonIsSet = false;
}

bool HudsonMasterComputer::isTemporarilyOffline() const
{
    return m_TemporarilyOffline;
}


void HudsonMasterComputer::setTemporarilyOffline(bool value)
{
    m_TemporarilyOffline = value;
    m_TemporarilyOfflineIsSet = true;
}
bool HudsonMasterComputer::temporarilyOfflineIsSet() const
{
    return m_TemporarilyOfflineIsSet;
}

void HudsonMasterComputer::unsetTemporarilyOffline()
{
    m_TemporarilyOfflineIsSet = false;
}

}
}
}
}

