/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DiskSpaceMonitorDescriptorDiskSpace.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DiskSpaceMonitorDescriptorDiskSpace::DiskSpaceMonitorDescriptorDiskSpace()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Path = utility::conversions::to_string_t("");
    m_PathIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
}

DiskSpaceMonitorDescriptorDiskSpace::~DiskSpaceMonitorDescriptorDiskSpace()
{
}

void DiskSpaceMonitorDescriptorDiskSpace::validate()
{
    // TODO: implement validation
}

web::json::value DiskSpaceMonitorDescriptorDiskSpace::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t("size")] = ModelBase::toJson(m_Size);
    }

    return val;
}

void DiskSpaceMonitorDescriptorDiskSpace::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("timestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        setPath(ModelBase::stringFromJson(val[utility::conversions::to_string_t("path")]));
    }
    if(val.has_field(utility::conversions::to_string_t("size")))
    {
        setSize(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("size")]));
    }
}

void DiskSpaceMonitorDescriptorDiskSpace::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("path"), m_Path));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("size"), m_Size));
    }
}

void DiskSpaceMonitorDescriptorDiskSpace::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        setPath(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("path"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("size")))
    {
        setSize(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("size"))));
    }
}

utility::string_t DiskSpaceMonitorDescriptorDiskSpace::getClass() const
{
    return m__class;
}


void DiskSpaceMonitorDescriptorDiskSpace::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::_classIsSet() const
{
    return m__classIsSet;
}

void DiskSpaceMonitorDescriptorDiskSpace::unset_class()
{
    m__classIsSet = false;
}

int32_t DiskSpaceMonitorDescriptorDiskSpace::getTimestamp() const
{
    return m_Timestamp;
}


void DiskSpaceMonitorDescriptorDiskSpace::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void DiskSpaceMonitorDescriptorDiskSpace::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

utility::string_t DiskSpaceMonitorDescriptorDiskSpace::getPath() const
{
    return m_Path;
}


void DiskSpaceMonitorDescriptorDiskSpace::setPath(utility::string_t value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::pathIsSet() const
{
    return m_PathIsSet;
}

void DiskSpaceMonitorDescriptorDiskSpace::unsetPath()
{
    m_PathIsSet = false;
}

int32_t DiskSpaceMonitorDescriptorDiskSpace::getSize() const
{
    return m_Size;
}


void DiskSpaceMonitorDescriptorDiskSpace::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::sizeIsSet() const
{
    return m_SizeIsSet;
}

void DiskSpaceMonitorDescriptorDiskSpace::unsetSize()
{
    m_SizeIsSet = false;
}

}
}
}
}

