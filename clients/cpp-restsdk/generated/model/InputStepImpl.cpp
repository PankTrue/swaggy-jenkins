/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "InputStepImpl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

InputStepImpl::InputStepImpl()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Ok = utility::conversions::to_string_t("");
    m_OkIsSet = false;
    m_ParametersIsSet = false;
    m_Submitter = utility::conversions::to_string_t("");
    m_SubmitterIsSet = false;
}

InputStepImpl::~InputStepImpl()
{
}

void InputStepImpl::validate()
{
    // TODO: implement validation
}

web::json::value InputStepImpl::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_OkIsSet)
    {
        val[utility::conversions::to_string_t("ok")] = ModelBase::toJson(m_Ok);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parameters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("parameters")] = web::json::value::array(jsonArray);
        }
    }
    if(m_SubmitterIsSet)
    {
        val[utility::conversions::to_string_t("submitter")] = ModelBase::toJson(m_Submitter);
    }

    return val;
}

void InputStepImpl::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        if(!val[utility::conversions::to_string_t("_links")].is_null())
        {
            std::shared_ptr<InputStepImpllinks> newItem(new InputStepImpllinks());
            newItem->fromJson(val[utility::conversions::to_string_t("_links")]);
            setLinks( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromJson(val[utility::conversions::to_string_t("message")]));
    }
    if(val.has_field(utility::conversions::to_string_t("ok")))
    {
        setOk(ModelBase::stringFromJson(val[utility::conversions::to_string_t("ok")]));
    }
    {
        m_Parameters.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("parameters")))
        {
        for( auto& item : val[utility::conversions::to_string_t("parameters")].as_array() )
        {
            if(item.is_null())
            {
                m_Parameters.push_back( std::shared_ptr<StringParameterDefinition>(nullptr) );
            }
            else
            {
                std::shared_ptr<StringParameterDefinition> newItem(new StringParameterDefinition());
                newItem->fromJson(item);
                m_Parameters.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("submitter")))
    {
        setSubmitter(ModelBase::stringFromJson(val[utility::conversions::to_string_t("submitter")]));
    }
}

void InputStepImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, utility::conversions::to_string_t("_links."));
        }
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
    if(m_OkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ok"), m_Ok));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parameters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameters"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_SubmitterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("submitter"), m_Submitter));
    }
}

void InputStepImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("_links")))
        {
            std::shared_ptr<InputStepImpllinks> newItem(new InputStepImpllinks());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("_links."));
            setLinks( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("message"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ok")))
    {
        setOk(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ok"))));
    }
    {
        m_Parameters.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("parameters")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameters"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Parameters.push_back( std::shared_ptr<StringParameterDefinition>(nullptr) );
            }
            else
            {
                std::shared_ptr<StringParameterDefinition> newItem(new StringParameterDefinition());
                newItem->fromJson(item);
                m_Parameters.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("submitter")))
    {
        setSubmitter(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("submitter"))));
    }
}

utility::string_t InputStepImpl::getClass() const
{
    return m__class;
}


void InputStepImpl::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool InputStepImpl::_classIsSet() const
{
    return m__classIsSet;
}

void InputStepImpl::unset_class()
{
    m__classIsSet = false;
}

std::shared_ptr<InputStepImpllinks> InputStepImpl::getLinks() const
{
    return m__links;
}


void InputStepImpl::setLinks(std::shared_ptr<InputStepImpllinks> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool InputStepImpl::linksIsSet() const
{
    return m__linksIsSet;
}

void InputStepImpl::unset_links()
{
    m__linksIsSet = false;
}

utility::string_t InputStepImpl::getId() const
{
    return m_Id;
}


void InputStepImpl::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool InputStepImpl::idIsSet() const
{
    return m_IdIsSet;
}

void InputStepImpl::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t InputStepImpl::getMessage() const
{
    return m_Message;
}


void InputStepImpl::setMessage(utility::string_t value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool InputStepImpl::messageIsSet() const
{
    return m_MessageIsSet;
}

void InputStepImpl::unsetMessage()
{
    m_MessageIsSet = false;
}

utility::string_t InputStepImpl::getOk() const
{
    return m_Ok;
}


void InputStepImpl::setOk(utility::string_t value)
{
    m_Ok = value;
    m_OkIsSet = true;
}
bool InputStepImpl::okIsSet() const
{
    return m_OkIsSet;
}

void InputStepImpl::unsetOk()
{
    m_OkIsSet = false;
}

std::vector<std::shared_ptr<StringParameterDefinition>>& InputStepImpl::getParameters()
{
    return m_Parameters;
}

void InputStepImpl::setParameters(std::vector<std::shared_ptr<StringParameterDefinition>> value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}
bool InputStepImpl::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void InputStepImpl::unsetParameters()
{
    m_ParametersIsSet = false;
}

utility::string_t InputStepImpl::getSubmitter() const
{
    return m_Submitter;
}


void InputStepImpl::setSubmitter(utility::string_t value)
{
    m_Submitter = value;
    m_SubmitterIsSet = true;
}
bool InputStepImpl::submitterIsSet() const
{
    return m_SubmitterIsSet;
}

void InputStepImpl::unsetSubmitter()
{
    m_SubmitterIsSet = false;
}

}
}
}
}

