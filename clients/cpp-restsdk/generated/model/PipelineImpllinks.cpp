/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelineImpllinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PipelineImpllinks::PipelineImpllinks()
{
    m_RunsIsSet = false;
    m_SelfIsSet = false;
    m_QueueIsSet = false;
    m_ActionsIsSet = false;
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
}

PipelineImpllinks::~PipelineImpllinks()
{
}

void PipelineImpllinks::validate()
{
    // TODO: implement validation
}

web::json::value PipelineImpllinks::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_RunsIsSet)
    {
        val[utility::conversions::to_string_t("runs")] = ModelBase::toJson(m_Runs);
    }
    if(m_SelfIsSet)
    {
        val[utility::conversions::to_string_t("self")] = ModelBase::toJson(m_Self);
    }
    if(m_QueueIsSet)
    {
        val[utility::conversions::to_string_t("queue")] = ModelBase::toJson(m_Queue);
    }
    if(m_ActionsIsSet)
    {
        val[utility::conversions::to_string_t("actions")] = ModelBase::toJson(m_Actions);
    }
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }

    return val;
}

void PipelineImpllinks::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("runs")))
    {
        if(!val[utility::conversions::to_string_t("runs")].is_null())
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromJson(val[utility::conversions::to_string_t("runs")]);
            setRuns( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("self")))
    {
        if(!val[utility::conversions::to_string_t("self")].is_null())
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromJson(val[utility::conversions::to_string_t("self")]);
            setSelf( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("queue")))
    {
        if(!val[utility::conversions::to_string_t("queue")].is_null())
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromJson(val[utility::conversions::to_string_t("queue")]);
            setQueue( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("actions")))
    {
        if(!val[utility::conversions::to_string_t("actions")].is_null())
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromJson(val[utility::conversions::to_string_t("actions")]);
            setActions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
}

void PipelineImpllinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_RunsIsSet)
    {
        if (m_Runs.get())
        {
            m_Runs->toMultipart(multipart, utility::conversions::to_string_t("runs."));
        }
    }
    if(m_SelfIsSet)
    {
        if (m_Self.get())
        {
            m_Self->toMultipart(multipart, utility::conversions::to_string_t("self."));
        }
    }
    if(m_QueueIsSet)
    {
        if (m_Queue.get())
        {
            m_Queue->toMultipart(multipart, utility::conversions::to_string_t("queue."));
        }
    }
    if(m_ActionsIsSet)
    {
        if (m_Actions.get())
        {
            m_Actions->toMultipart(multipart, utility::conversions::to_string_t("actions."));
        }
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
}

void PipelineImpllinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("runs")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("runs")))
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("runs."));
            setRuns( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("self")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("self")))
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("self."));
            setSelf( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queue")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("queue")))
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("queue."));
            setQueue( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("actions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("actions")))
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("actions."));
            setActions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
}

std::shared_ptr<Link> PipelineImpllinks::getRuns() const
{
    return m_Runs;
}


void PipelineImpllinks::setRuns(std::shared_ptr<Link> value)
{
    m_Runs = value;
    m_RunsIsSet = true;
}
bool PipelineImpllinks::runsIsSet() const
{
    return m_RunsIsSet;
}

void PipelineImpllinks::unsetRuns()
{
    m_RunsIsSet = false;
}

std::shared_ptr<Link> PipelineImpllinks::getSelf() const
{
    return m_Self;
}


void PipelineImpllinks::setSelf(std::shared_ptr<Link> value)
{
    m_Self = value;
    m_SelfIsSet = true;
}
bool PipelineImpllinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void PipelineImpllinks::unsetSelf()
{
    m_SelfIsSet = false;
}

std::shared_ptr<Link> PipelineImpllinks::getQueue() const
{
    return m_Queue;
}


void PipelineImpllinks::setQueue(std::shared_ptr<Link> value)
{
    m_Queue = value;
    m_QueueIsSet = true;
}
bool PipelineImpllinks::queueIsSet() const
{
    return m_QueueIsSet;
}

void PipelineImpllinks::unsetQueue()
{
    m_QueueIsSet = false;
}

std::shared_ptr<Link> PipelineImpllinks::getActions() const
{
    return m_Actions;
}


void PipelineImpllinks::setActions(std::shared_ptr<Link> value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}
bool PipelineImpllinks::actionsIsSet() const
{
    return m_ActionsIsSet;
}

void PipelineImpllinks::unsetActions()
{
    m_ActionsIsSet = false;
}

utility::string_t PipelineImpllinks::getClass() const
{
    return m__class;
}


void PipelineImpllinks::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool PipelineImpllinks::_classIsSet() const
{
    return m__classIsSet;
}

void PipelineImpllinks::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

