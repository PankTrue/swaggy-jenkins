/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ExtensionClassContainerImpl1.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExtensionClassContainerImpl1::ExtensionClassContainerImpl1()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_mapIsSet = false;
}

ExtensionClassContainerImpl1::~ExtensionClassContainerImpl1()
{
}

void ExtensionClassContainerImpl1::validate()
{
    // TODO: implement validation
}

web::json::value ExtensionClassContainerImpl1::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }
    if(m_mapIsSet)
    {
        val[utility::conversions::to_string_t("map")] = ModelBase::toJson(m_map);
    }

    return val;
}

void ExtensionClassContainerImpl1::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        if(!val[utility::conversions::to_string_t("_links")].is_null())
        {
            std::shared_ptr<ExtensionClassContainerImpl1links> newItem(new ExtensionClassContainerImpl1links());
            newItem->fromJson(val[utility::conversions::to_string_t("_links")]);
            setLinks( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("map")))
    {
        if(!val[utility::conversions::to_string_t("map")].is_null())
        {
            std::shared_ptr<ExtensionClassContainerImpl1map> newItem(new ExtensionClassContainerImpl1map());
            newItem->fromJson(val[utility::conversions::to_string_t("map")]);
            setMap( newItem );
        }
    }
}

void ExtensionClassContainerImpl1::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, utility::conversions::to_string_t("_links."));
        }
    }
    if(m_mapIsSet)
    {
        if (m_map.get())
        {
            m_map->toMultipart(multipart, utility::conversions::to_string_t("map."));
        }
    }
}

void ExtensionClassContainerImpl1::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("_links")))
        {
            std::shared_ptr<ExtensionClassContainerImpl1links> newItem(new ExtensionClassContainerImpl1links());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("_links."));
            setLinks( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("map")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("map")))
        {
            std::shared_ptr<ExtensionClassContainerImpl1map> newItem(new ExtensionClassContainerImpl1map());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("map."));
            setMap( newItem );
        }
    }
}

utility::string_t ExtensionClassContainerImpl1::getClass() const
{
    return m__class;
}


void ExtensionClassContainerImpl1::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool ExtensionClassContainerImpl1::_classIsSet() const
{
    return m__classIsSet;
}

void ExtensionClassContainerImpl1::unset_class()
{
    m__classIsSet = false;
}

std::shared_ptr<ExtensionClassContainerImpl1links> ExtensionClassContainerImpl1::getLinks() const
{
    return m__links;
}


void ExtensionClassContainerImpl1::setLinks(std::shared_ptr<ExtensionClassContainerImpl1links> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool ExtensionClassContainerImpl1::linksIsSet() const
{
    return m__linksIsSet;
}

void ExtensionClassContainerImpl1::unset_links()
{
    m__linksIsSet = false;
}

std::shared_ptr<ExtensionClassContainerImpl1map> ExtensionClassContainerImpl1::getMap() const
{
    return m_map;
}


void ExtensionClassContainerImpl1::setMap(std::shared_ptr<ExtensionClassContainerImpl1map> value)
{
    m_map = value;
    m_mapIsSet = true;
}
bool ExtensionClassContainerImpl1::mapIsSet() const
{
    return m_mapIsSet;
}

void ExtensionClassContainerImpl1::unsetmap()
{
    m_mapIsSet = false;
}

}
}
}
}

