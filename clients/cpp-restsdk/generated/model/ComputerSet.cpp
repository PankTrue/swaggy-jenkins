/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComputerSet.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComputerSet::ComputerSet()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_BusyExecutors = 0;
    m_BusyExecutorsIsSet = false;
    m_ComputerIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_TotalExecutors = 0;
    m_TotalExecutorsIsSet = false;
}

ComputerSet::~ComputerSet()
{
}

void ComputerSet::validate()
{
    // TODO: implement validation
}

web::json::value ComputerSet::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m_BusyExecutorsIsSet)
    {
        val[utility::conversions::to_string_t("busyExecutors")] = ModelBase::toJson(m_BusyExecutors);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Computer )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("computer")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_TotalExecutorsIsSet)
    {
        val[utility::conversions::to_string_t("totalExecutors")] = ModelBase::toJson(m_TotalExecutors);
    }

    return val;
}

void ComputerSet::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("busyExecutors")))
    {
        setBusyExecutors(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("busyExecutors")]));
    }
    {
        m_Computer.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("computer")))
        {
        for( auto& item : val[utility::conversions::to_string_t("computer")].as_array() )
        {
            if(item.is_null())
            {
                m_Computer.push_back( std::shared_ptr<HudsonMasterComputer>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonMasterComputer> newItem(new HudsonMasterComputer());
                newItem->fromJson(item);
                m_Computer.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("displayName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("totalExecutors")))
    {
        setTotalExecutors(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("totalExecutors")]));
    }
}

void ComputerSet::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m_BusyExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("busyExecutors"), m_BusyExecutors));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Computer )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("computer"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
    if(m_TotalExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("totalExecutors"), m_TotalExecutors));
    }
}

void ComputerSet::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("busyExecutors")))
    {
        setBusyExecutors(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("busyExecutors"))));
    }
    {
        m_Computer.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("computer")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("computer"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Computer.push_back( std::shared_ptr<HudsonMasterComputer>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonMasterComputer> newItem(new HudsonMasterComputer());
                newItem->fromJson(item);
                m_Computer.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("totalExecutors")))
    {
        setTotalExecutors(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("totalExecutors"))));
    }
}

utility::string_t ComputerSet::getClass() const
{
    return m__class;
}


void ComputerSet::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool ComputerSet::_classIsSet() const
{
    return m__classIsSet;
}

void ComputerSet::unset_class()
{
    m__classIsSet = false;
}

int32_t ComputerSet::getBusyExecutors() const
{
    return m_BusyExecutors;
}


void ComputerSet::setBusyExecutors(int32_t value)
{
    m_BusyExecutors = value;
    m_BusyExecutorsIsSet = true;
}
bool ComputerSet::busyExecutorsIsSet() const
{
    return m_BusyExecutorsIsSet;
}

void ComputerSet::unsetBusyExecutors()
{
    m_BusyExecutorsIsSet = false;
}

std::vector<std::shared_ptr<HudsonMasterComputer>>& ComputerSet::getComputer()
{
    return m_Computer;
}

void ComputerSet::setComputer(std::vector<std::shared_ptr<HudsonMasterComputer>> value)
{
    m_Computer = value;
    m_ComputerIsSet = true;
}
bool ComputerSet::computerIsSet() const
{
    return m_ComputerIsSet;
}

void ComputerSet::unsetComputer()
{
    m_ComputerIsSet = false;
}

utility::string_t ComputerSet::getDisplayName() const
{
    return m_DisplayName;
}


void ComputerSet::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool ComputerSet::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void ComputerSet::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

int32_t ComputerSet::getTotalExecutors() const
{
    return m_TotalExecutors;
}


void ComputerSet::setTotalExecutors(int32_t value)
{
    m_TotalExecutors = value;
    m_TotalExecutorsIsSet = true;
}
bool ComputerSet::totalExecutorsIsSet() const
{
    return m_TotalExecutorsIsSet;
}

void ComputerSet::unsetTotalExecutors()
{
    m_TotalExecutorsIsSet = false;
}

}
}
}
}

