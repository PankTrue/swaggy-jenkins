/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GithubRepositories.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GithubRepositories::GithubRepositories()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_ItemsIsSet = false;
    m_LastPage = 0;
    m_LastPageIsSet = false;
    m_NextPage = 0;
    m_NextPageIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
}

GithubRepositories::~GithubRepositories()
{
}

void GithubRepositories::validate()
{
    // TODO: implement validation
}

web::json::value GithubRepositories::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("items")] = web::json::value::array(jsonArray);
        }
    }
    if(m_LastPageIsSet)
    {
        val[utility::conversions::to_string_t("lastPage")] = ModelBase::toJson(m_LastPage);
    }
    if(m_NextPageIsSet)
    {
        val[utility::conversions::to_string_t("nextPage")] = ModelBase::toJson(m_NextPage);
    }
    if(m_PageSizeIsSet)
    {
        val[utility::conversions::to_string_t("pageSize")] = ModelBase::toJson(m_PageSize);
    }

    return val;
}

void GithubRepositories::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        if(!val[utility::conversions::to_string_t("_links")].is_null())
        {
            std::shared_ptr<GithubRepositorieslinks> newItem(new GithubRepositorieslinks());
            newItem->fromJson(val[utility::conversions::to_string_t("_links")]);
            setLinks( newItem );
        }
    }
    {
        m_Items.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("items")))
        {
        for( auto& item : val[utility::conversions::to_string_t("items")].as_array() )
        {
            if(item.is_null())
            {
                m_Items.push_back( std::shared_ptr<GithubRepository>(nullptr) );
            }
            else
            {
                std::shared_ptr<GithubRepository> newItem(new GithubRepository());
                newItem->fromJson(item);
                m_Items.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastPage")))
    {
        setLastPage(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("lastPage")]));
    }
    if(val.has_field(utility::conversions::to_string_t("nextPage")))
    {
        setNextPage(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("nextPage")]));
    }
    if(val.has_field(utility::conversions::to_string_t("pageSize")))
    {
        setPageSize(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("pageSize")]));
    }
}

void GithubRepositories::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, utility::conversions::to_string_t("_links."));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("items"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_LastPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastPage"), m_LastPage));
    }
    if(m_NextPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nextPage"), m_NextPage));
    }
    if(m_PageSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pageSize"), m_PageSize));
    }
}

void GithubRepositories::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("_links")))
        {
            std::shared_ptr<GithubRepositorieslinks> newItem(new GithubRepositorieslinks());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("_links."));
            setLinks( newItem );
        }
    }
    {
        m_Items.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("items")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("items"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Items.push_back( std::shared_ptr<GithubRepository>(nullptr) );
            }
            else
            {
                std::shared_ptr<GithubRepository> newItem(new GithubRepository());
                newItem->fromJson(item);
                m_Items.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastPage")))
    {
        setLastPage(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastPage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nextPage")))
    {
        setNextPage(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nextPage"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pageSize")))
    {
        setPageSize(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("pageSize"))));
    }
}

utility::string_t GithubRepositories::getClass() const
{
    return m__class;
}


void GithubRepositories::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubRepositories::_classIsSet() const
{
    return m__classIsSet;
}

void GithubRepositories::unset_class()
{
    m__classIsSet = false;
}

std::shared_ptr<GithubRepositorieslinks> GithubRepositories::getLinks() const
{
    return m__links;
}


void GithubRepositories::setLinks(std::shared_ptr<GithubRepositorieslinks> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool GithubRepositories::linksIsSet() const
{
    return m__linksIsSet;
}

void GithubRepositories::unset_links()
{
    m__linksIsSet = false;
}

std::vector<std::shared_ptr<GithubRepository>>& GithubRepositories::getItems()
{
    return m_Items;
}

void GithubRepositories::setItems(std::vector<std::shared_ptr<GithubRepository>> value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}
bool GithubRepositories::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void GithubRepositories::unsetItems()
{
    m_ItemsIsSet = false;
}

int32_t GithubRepositories::getLastPage() const
{
    return m_LastPage;
}


void GithubRepositories::setLastPage(int32_t value)
{
    m_LastPage = value;
    m_LastPageIsSet = true;
}
bool GithubRepositories::lastPageIsSet() const
{
    return m_LastPageIsSet;
}

void GithubRepositories::unsetLastPage()
{
    m_LastPageIsSet = false;
}

int32_t GithubRepositories::getNextPage() const
{
    return m_NextPage;
}


void GithubRepositories::setNextPage(int32_t value)
{
    m_NextPage = value;
    m_NextPageIsSet = true;
}
bool GithubRepositories::nextPageIsSet() const
{
    return m_NextPageIsSet;
}

void GithubRepositories::unsetNextPage()
{
    m_NextPageIsSet = false;
}

int32_t GithubRepositories::getPageSize() const
{
    return m_PageSize;
}


void GithubRepositories::setPageSize(int32_t value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}
bool GithubRepositories::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}

void GithubRepositories::unsetPageSize()
{
    m_PageSizeIsSet = false;
}

}
}
}
}

