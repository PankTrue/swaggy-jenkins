/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Pipeline.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Pipeline::Pipeline()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_Organization = utility::conversions::to_string_t("");
    m_OrganizationIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_WeatherScore = 0;
    m_WeatherScoreIsSet = false;
    m_EstimatedDurationInMillis = 0;
    m_EstimatedDurationInMillisIsSet = false;
    m_LatestRunIsSet = false;
}

Pipeline::~Pipeline()
{
}

void Pipeline::validate()
{
    // TODO: implement validation
}

web::json::value Pipeline::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t("organization")] = ModelBase::toJson(m_Organization);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_WeatherScoreIsSet)
    {
        val[utility::conversions::to_string_t("weatherScore")] = ModelBase::toJson(m_WeatherScore);
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        val[utility::conversions::to_string_t("estimatedDurationInMillis")] = ModelBase::toJson(m_EstimatedDurationInMillis);
    }
    if(m_LatestRunIsSet)
    {
        val[utility::conversions::to_string_t("latestRun")] = ModelBase::toJson(m_LatestRun);
    }

    return val;
}

void Pipeline::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("organization")))
    {
        setOrganization(ModelBase::stringFromJson(val[utility::conversions::to_string_t("organization")]));
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("displayName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("fullName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("weatherScore")))
    {
        setWeatherScore(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("weatherScore")]));
    }
    if(val.has_field(utility::conversions::to_string_t("estimatedDurationInMillis")))
    {
        setEstimatedDurationInMillis(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("estimatedDurationInMillis")]));
    }
    if(val.has_field(utility::conversions::to_string_t("latestRun")))
    {
        if(!val[utility::conversions::to_string_t("latestRun")].is_null())
        {
            std::shared_ptr<PipelinelatestRun> newItem(new PipelinelatestRun());
            newItem->fromJson(val[utility::conversions::to_string_t("latestRun")]);
            setLatestRun( newItem );
        }
    }
}

void Pipeline::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("organization"), m_Organization));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullName"), m_FullName));
    }
    if(m_WeatherScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("weatherScore"), m_WeatherScore));
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("estimatedDurationInMillis"), m_EstimatedDurationInMillis));
    }
    if(m_LatestRunIsSet)
    {
        if (m_LatestRun.get())
        {
            m_LatestRun->toMultipart(multipart, utility::conversions::to_string_t("latestRun."));
        }
    }
}

void Pipeline::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("organization")))
    {
        setOrganization(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("organization"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("weatherScore")))
    {
        setWeatherScore(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("weatherScore"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("estimatedDurationInMillis")))
    {
        setEstimatedDurationInMillis(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("estimatedDurationInMillis"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latestRun")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("latestRun")))
        {
            std::shared_ptr<PipelinelatestRun> newItem(new PipelinelatestRun());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("latestRun."));
            setLatestRun( newItem );
        }
    }
}

utility::string_t Pipeline::getClass() const
{
    return m__class;
}


void Pipeline::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool Pipeline::_classIsSet() const
{
    return m__classIsSet;
}

void Pipeline::unset_class()
{
    m__classIsSet = false;
}

utility::string_t Pipeline::getOrganization() const
{
    return m_Organization;
}


void Pipeline::setOrganization(utility::string_t value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}
bool Pipeline::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void Pipeline::unsetOrganization()
{
    m_OrganizationIsSet = false;
}

utility::string_t Pipeline::getName() const
{
    return m_Name;
}


void Pipeline::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Pipeline::nameIsSet() const
{
    return m_NameIsSet;
}

void Pipeline::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Pipeline::getDisplayName() const
{
    return m_DisplayName;
}


void Pipeline::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool Pipeline::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void Pipeline::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

utility::string_t Pipeline::getFullName() const
{
    return m_FullName;
}


void Pipeline::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool Pipeline::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void Pipeline::unsetFullName()
{
    m_FullNameIsSet = false;
}

int32_t Pipeline::getWeatherScore() const
{
    return m_WeatherScore;
}


void Pipeline::setWeatherScore(int32_t value)
{
    m_WeatherScore = value;
    m_WeatherScoreIsSet = true;
}
bool Pipeline::weatherScoreIsSet() const
{
    return m_WeatherScoreIsSet;
}

void Pipeline::unsetWeatherScore()
{
    m_WeatherScoreIsSet = false;
}

int32_t Pipeline::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}


void Pipeline::setEstimatedDurationInMillis(int32_t value)
{
    m_EstimatedDurationInMillis = value;
    m_EstimatedDurationInMillisIsSet = true;
}
bool Pipeline::estimatedDurationInMillisIsSet() const
{
    return m_EstimatedDurationInMillisIsSet;
}

void Pipeline::unsetEstimatedDurationInMillis()
{
    m_EstimatedDurationInMillisIsSet = false;
}

std::shared_ptr<PipelinelatestRun> Pipeline::getLatestRun() const
{
    return m_LatestRun;
}


void Pipeline::setLatestRun(std::shared_ptr<PipelinelatestRun> value)
{
    m_LatestRun = value;
    m_LatestRunIsSet = true;
}
bool Pipeline::latestRunIsSet() const
{
    return m_LatestRunIsSet;
}

void Pipeline::unsetLatestRun()
{
    m_LatestRunIsSet = false;
}

}
}
}
}

