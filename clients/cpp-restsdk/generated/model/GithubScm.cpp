/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GithubScm.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GithubScm::GithubScm()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_CredentialId = utility::conversions::to_string_t("");
    m_CredentialIdIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Uri = utility::conversions::to_string_t("");
    m_UriIsSet = false;
}

GithubScm::~GithubScm()
{
}

void GithubScm::validate()
{
    // TODO: implement validation
}

web::json::value GithubScm::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }
    if(m_CredentialIdIsSet)
    {
        val[utility::conversions::to_string_t("credentialId")] = ModelBase::toJson(m_CredentialId);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UriIsSet)
    {
        val[utility::conversions::to_string_t("uri")] = ModelBase::toJson(m_Uri);
    }

    return val;
}

void GithubScm::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        if(!val[utility::conversions::to_string_t("_links")].is_null())
        {
            std::shared_ptr<GithubScmlinks> newItem(new GithubScmlinks());
            newItem->fromJson(val[utility::conversions::to_string_t("_links")]);
            setLinks( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("credentialId")))
    {
        setCredentialId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("credentialId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
    if(val.has_field(utility::conversions::to_string_t("uri")))
    {
        setUri(ModelBase::stringFromJson(val[utility::conversions::to_string_t("uri")]));
    }
}

void GithubScm::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, utility::conversions::to_string_t("_links."));
        }
    }
    if(m_CredentialIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("credentialId"), m_CredentialId));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uri"), m_Uri));
    }
}

void GithubScm::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("_links")))
        {
            std::shared_ptr<GithubScmlinks> newItem(new GithubScmlinks());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("_links."));
            setLinks( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("credentialId")))
    {
        setCredentialId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("credentialId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uri")))
    {
        setUri(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("uri"))));
    }
}

utility::string_t GithubScm::getClass() const
{
    return m__class;
}


void GithubScm::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubScm::_classIsSet() const
{
    return m__classIsSet;
}

void GithubScm::unset_class()
{
    m__classIsSet = false;
}

std::shared_ptr<GithubScmlinks> GithubScm::getLinks() const
{
    return m__links;
}


void GithubScm::setLinks(std::shared_ptr<GithubScmlinks> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool GithubScm::linksIsSet() const
{
    return m__linksIsSet;
}

void GithubScm::unset_links()
{
    m__linksIsSet = false;
}

utility::string_t GithubScm::getCredentialId() const
{
    return m_CredentialId;
}


void GithubScm::setCredentialId(utility::string_t value)
{
    m_CredentialId = value;
    m_CredentialIdIsSet = true;
}
bool GithubScm::credentialIdIsSet() const
{
    return m_CredentialIdIsSet;
}

void GithubScm::unsetCredentialId()
{
    m_CredentialIdIsSet = false;
}

utility::string_t GithubScm::getId() const
{
    return m_Id;
}


void GithubScm::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool GithubScm::idIsSet() const
{
    return m_IdIsSet;
}

void GithubScm::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t GithubScm::getUri() const
{
    return m_Uri;
}


void GithubScm::setUri(utility::string_t value)
{
    m_Uri = value;
    m_UriIsSet = true;
}
bool GithubScm::uriIsSet() const
{
    return m_UriIsSet;
}

void GithubScm::unsetUri()
{
    m_UriIsSet = false;
}

}
}
}
}

