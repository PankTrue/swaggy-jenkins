/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GithubRepository.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GithubRepository::GithubRepository()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_DefaultBranch = utility::conversions::to_string_t("");
    m_DefaultBranchIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_PermissionsIsSet = false;
    m__private = false;
    m__privateIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
}

GithubRepository::~GithubRepository()
{
}

void GithubRepository::validate()
{
    // TODO: implement validation
}

web::json::value GithubRepository::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }
    if(m_DefaultBranchIsSet)
    {
        val[utility::conversions::to_string_t("defaultBranch")] = ModelBase::toJson(m_DefaultBranch);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PermissionsIsSet)
    {
        val[utility::conversions::to_string_t("permissions")] = ModelBase::toJson(m_Permissions);
    }
    if(m__privateIsSet)
    {
        val[utility::conversions::to_string_t("private")] = ModelBase::toJson(m__private);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t("fullName")] = ModelBase::toJson(m_FullName);
    }

    return val;
}

void GithubRepository::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        if(!val[utility::conversions::to_string_t("_links")].is_null())
        {
            std::shared_ptr<GithubRepositorylinks> newItem(new GithubRepositorylinks());
            newItem->fromJson(val[utility::conversions::to_string_t("_links")]);
            setLinks( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("defaultBranch")))
    {
        setDefaultBranch(ModelBase::stringFromJson(val[utility::conversions::to_string_t("defaultBranch")]));
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromJson(val[utility::conversions::to_string_t("description")]));
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    }
    if(val.has_field(utility::conversions::to_string_t("permissions")))
    {
        if(!val[utility::conversions::to_string_t("permissions")].is_null())
        {
            std::shared_ptr<GithubRepositorypermissions> newItem(new GithubRepositorypermissions());
            newItem->fromJson(val[utility::conversions::to_string_t("permissions")]);
            setPermissions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("private")))
    {
        setPrivate(ModelBase::boolFromJson(val[utility::conversions::to_string_t("private")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("fullName")]));
    }
}

void GithubRepository::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, utility::conversions::to_string_t("_links."));
        }
    }
    if(m_DefaultBranchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("defaultBranch"), m_DefaultBranch));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_PermissionsIsSet)
    {
        if (m_Permissions.get())
        {
            m_Permissions->toMultipart(multipart, utility::conversions::to_string_t("permissions."));
        }
    }
    if(m__privateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("private"), m__private));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullName"), m_FullName));
    }
}

void GithubRepository::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("_links")))
        {
            std::shared_ptr<GithubRepositorylinks> newItem(new GithubRepositorylinks());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("_links."));
            setLinks( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("defaultBranch")))
    {
        setDefaultBranch(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("defaultBranch"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("permissions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("permissions")))
        {
            std::shared_ptr<GithubRepositorypermissions> newItem(new GithubRepositorypermissions());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("permissions."));
            setPermissions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("private")))
    {
        setPrivate(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("private"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullName"))));
    }
}

utility::string_t GithubRepository::getClass() const
{
    return m__class;
}


void GithubRepository::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubRepository::_classIsSet() const
{
    return m__classIsSet;
}

void GithubRepository::unset_class()
{
    m__classIsSet = false;
}

std::shared_ptr<GithubRepositorylinks> GithubRepository::getLinks() const
{
    return m__links;
}


void GithubRepository::setLinks(std::shared_ptr<GithubRepositorylinks> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool GithubRepository::linksIsSet() const
{
    return m__linksIsSet;
}

void GithubRepository::unset_links()
{
    m__linksIsSet = false;
}

utility::string_t GithubRepository::getDefaultBranch() const
{
    return m_DefaultBranch;
}


void GithubRepository::setDefaultBranch(utility::string_t value)
{
    m_DefaultBranch = value;
    m_DefaultBranchIsSet = true;
}
bool GithubRepository::defaultBranchIsSet() const
{
    return m_DefaultBranchIsSet;
}

void GithubRepository::unsetDefaultBranch()
{
    m_DefaultBranchIsSet = false;
}

utility::string_t GithubRepository::getDescription() const
{
    return m_Description;
}


void GithubRepository::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool GithubRepository::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void GithubRepository::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t GithubRepository::getName() const
{
    return m_Name;
}


void GithubRepository::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool GithubRepository::nameIsSet() const
{
    return m_NameIsSet;
}

void GithubRepository::unsetName()
{
    m_NameIsSet = false;
}

std::shared_ptr<GithubRepositorypermissions> GithubRepository::getPermissions() const
{
    return m_Permissions;
}


void GithubRepository::setPermissions(std::shared_ptr<GithubRepositorypermissions> value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool GithubRepository::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}

void GithubRepository::unsetPermissions()
{
    m_PermissionsIsSet = false;
}

bool GithubRepository::isPrivate() const
{
    return m__private;
}


void GithubRepository::setPrivate(bool value)
{
    m__private = value;
    m__privateIsSet = true;
}
bool GithubRepository::_privateIsSet() const
{
    return m__privateIsSet;
}

void GithubRepository::unset_private()
{
    m__privateIsSet = false;
}

utility::string_t GithubRepository::getFullName() const
{
    return m_FullName;
}


void GithubRepository::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool GithubRepository::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void GithubRepository::unsetFullName()
{
    m_FullNameIsSet = false;
}

}
}
}
}

