/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeMonitorData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ResponseTimeMonitorData::ResponseTimeMonitorData()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Average = 0;
    m_AverageIsSet = false;
}

ResponseTimeMonitorData::~ResponseTimeMonitorData()
{
}

void ResponseTimeMonitorData::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTimeMonitorData::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_AverageIsSet)
    {
        val[utility::conversions::to_string_t("average")] = ModelBase::toJson(m_Average);
    }

    return val;
}

void ResponseTimeMonitorData::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("timestamp")]));
    }
    if(val.has_field(utility::conversions::to_string_t("average")))
    {
        setAverage(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("average")]));
    }
}

void ResponseTimeMonitorData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
    if(m_AverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("average"), m_Average));
    }
}

void ResponseTimeMonitorData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        setTimestamp(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("average")))
    {
        setAverage(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("average"))));
    }
}

utility::string_t ResponseTimeMonitorData::getClass() const
{
    return m__class;
}


void ResponseTimeMonitorData::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool ResponseTimeMonitorData::_classIsSet() const
{
    return m__classIsSet;
}

void ResponseTimeMonitorData::unset_class()
{
    m__classIsSet = false;
}

int32_t ResponseTimeMonitorData::getTimestamp() const
{
    return m_Timestamp;
}


void ResponseTimeMonitorData::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool ResponseTimeMonitorData::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void ResponseTimeMonitorData::unsetTimestamp()
{
    m_TimestampIsSet = false;
}

int32_t ResponseTimeMonitorData::getAverage() const
{
    return m_Average;
}


void ResponseTimeMonitorData::setAverage(int32_t value)
{
    m_Average = value;
    m_AverageIsSet = true;
}
bool ResponseTimeMonitorData::averageIsSet() const
{
    return m_AverageIsSet;
}

void ResponseTimeMonitorData::unsetAverage()
{
    m_AverageIsSet = false;
}

}
}
}
}

