/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelineBranchesitempullRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PipelineBranchesitempullRequest::PipelineBranchesitempullRequest()
{
    m__linksIsSet = false;
    m_Author = utility::conversions::to_string_t("");
    m_AuthorIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
}

PipelineBranchesitempullRequest::~PipelineBranchesitempullRequest()
{
}

void PipelineBranchesitempullRequest::validate()
{
    // TODO: implement validation
}

web::json::value PipelineBranchesitempullRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t("_links")] = ModelBase::toJson(m__links);
    }
    if(m_AuthorIsSet)
    {
        val[utility::conversions::to_string_t("author")] = ModelBase::toJson(m_Author);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }

    return val;
}

void PipelineBranchesitempullRequest::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_links")))
    {
        if(!val[utility::conversions::to_string_t("_links")].is_null())
        {
            std::shared_ptr<PipelineBranchesitempullRequestlinks> newItem(new PipelineBranchesitempullRequestlinks());
            newItem->fromJson(val[utility::conversions::to_string_t("_links")]);
            setLinks( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("author")))
    {
        setAuthor(ModelBase::stringFromJson(val[utility::conversions::to_string_t("author")]));
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("id")]));
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromJson(val[utility::conversions::to_string_t("title")]));
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromJson(val[utility::conversions::to_string_t("url")]));
    }
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
}

void PipelineBranchesitempullRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, utility::conversions::to_string_t("_links."));
        }
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("author"), m_Author));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
}

void PipelineBranchesitempullRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_links")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("_links")))
        {
            std::shared_ptr<PipelineBranchesitempullRequestlinks> newItem(new PipelineBranchesitempullRequestlinks());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("_links."));
            setLinks( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("author")))
    {
        setAuthor(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("author"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("title"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
}

std::shared_ptr<PipelineBranchesitempullRequestlinks> PipelineBranchesitempullRequest::getLinks() const
{
    return m__links;
}


void PipelineBranchesitempullRequest::setLinks(std::shared_ptr<PipelineBranchesitempullRequestlinks> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool PipelineBranchesitempullRequest::linksIsSet() const
{
    return m__linksIsSet;
}

void PipelineBranchesitempullRequest::unset_links()
{
    m__linksIsSet = false;
}

utility::string_t PipelineBranchesitempullRequest::getAuthor() const
{
    return m_Author;
}


void PipelineBranchesitempullRequest::setAuthor(utility::string_t value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}
bool PipelineBranchesitempullRequest::authorIsSet() const
{
    return m_AuthorIsSet;
}

void PipelineBranchesitempullRequest::unsetAuthor()
{
    m_AuthorIsSet = false;
}

utility::string_t PipelineBranchesitempullRequest::getId() const
{
    return m_Id;
}


void PipelineBranchesitempullRequest::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PipelineBranchesitempullRequest::idIsSet() const
{
    return m_IdIsSet;
}

void PipelineBranchesitempullRequest::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t PipelineBranchesitempullRequest::getTitle() const
{
    return m_Title;
}


void PipelineBranchesitempullRequest::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool PipelineBranchesitempullRequest::titleIsSet() const
{
    return m_TitleIsSet;
}

void PipelineBranchesitempullRequest::unsetTitle()
{
    m_TitleIsSet = false;
}

utility::string_t PipelineBranchesitempullRequest::getUrl() const
{
    return m_Url;
}


void PipelineBranchesitempullRequest::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool PipelineBranchesitempullRequest::urlIsSet() const
{
    return m_UrlIsSet;
}

void PipelineBranchesitempullRequest::unsetUrl()
{
    m_UrlIsSet = false;
}

utility::string_t PipelineBranchesitempullRequest::getClass() const
{
    return m__class;
}


void PipelineBranchesitempullRequest::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool PipelineBranchesitempullRequest::_classIsSet() const
{
    return m__classIsSet;
}

void PipelineBranchesitempullRequest::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

