/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FreeStyleProject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

FreeStyleProject::FreeStyleProject()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_ActionsIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_DisplayNameOrNull = utility::conversions::to_string_t("");
    m_DisplayNameOrNullIsSet = false;
    m_FullDisplayName = utility::conversions::to_string_t("");
    m_FullDisplayNameIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Buildable = false;
    m_BuildableIsSet = false;
    m_BuildsIsSet = false;
    m_FirstBuildIsSet = false;
    m_HealthReportIsSet = false;
    m_InQueue = false;
    m_InQueueIsSet = false;
    m_KeepDependencies = false;
    m_KeepDependenciesIsSet = false;
    m_LastBuildIsSet = false;
    m_LastCompletedBuildIsSet = false;
    m_LastFailedBuild = utility::conversions::to_string_t("");
    m_LastFailedBuildIsSet = false;
    m_LastStableBuildIsSet = false;
    m_LastSuccessfulBuildIsSet = false;
    m_LastUnstableBuild = utility::conversions::to_string_t("");
    m_LastUnstableBuildIsSet = false;
    m_LastUnsuccessfulBuild = utility::conversions::to_string_t("");
    m_LastUnsuccessfulBuildIsSet = false;
    m_NextBuildNumber = 0;
    m_NextBuildNumberIsSet = false;
    m_QueueItem = utility::conversions::to_string_t("");
    m_QueueItemIsSet = false;
    m_ConcurrentBuild = false;
    m_ConcurrentBuildIsSet = false;
    m_ScmIsSet = false;
}

FreeStyleProject::~FreeStyleProject()
{
}

void FreeStyleProject::validate()
{
    // TODO: implement validation
}

web::json::value FreeStyleProject::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t("_class")] = ModelBase::toJson(m__class);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t("color")] = ModelBase::toJson(m_Color);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Actions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("actions")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_DisplayNameOrNullIsSet)
    {
        val[utility::conversions::to_string_t("displayNameOrNull")] = ModelBase::toJson(m_DisplayNameOrNull);
    }
    if(m_FullDisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("fullDisplayName")] = ModelBase::toJson(m_FullDisplayName);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_BuildableIsSet)
    {
        val[utility::conversions::to_string_t("buildable")] = ModelBase::toJson(m_Buildable);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Builds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("builds")] = web::json::value::array(jsonArray);
        }
    }
    if(m_FirstBuildIsSet)
    {
        val[utility::conversions::to_string_t("firstBuild")] = ModelBase::toJson(m_FirstBuild);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_HealthReport )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("healthReport")] = web::json::value::array(jsonArray);
        }
    }
    if(m_InQueueIsSet)
    {
        val[utility::conversions::to_string_t("inQueue")] = ModelBase::toJson(m_InQueue);
    }
    if(m_KeepDependenciesIsSet)
    {
        val[utility::conversions::to_string_t("keepDependencies")] = ModelBase::toJson(m_KeepDependencies);
    }
    if(m_LastBuildIsSet)
    {
        val[utility::conversions::to_string_t("lastBuild")] = ModelBase::toJson(m_LastBuild);
    }
    if(m_LastCompletedBuildIsSet)
    {
        val[utility::conversions::to_string_t("lastCompletedBuild")] = ModelBase::toJson(m_LastCompletedBuild);
    }
    if(m_LastFailedBuildIsSet)
    {
        val[utility::conversions::to_string_t("lastFailedBuild")] = ModelBase::toJson(m_LastFailedBuild);
    }
    if(m_LastStableBuildIsSet)
    {
        val[utility::conversions::to_string_t("lastStableBuild")] = ModelBase::toJson(m_LastStableBuild);
    }
    if(m_LastSuccessfulBuildIsSet)
    {
        val[utility::conversions::to_string_t("lastSuccessfulBuild")] = ModelBase::toJson(m_LastSuccessfulBuild);
    }
    if(m_LastUnstableBuildIsSet)
    {
        val[utility::conversions::to_string_t("lastUnstableBuild")] = ModelBase::toJson(m_LastUnstableBuild);
    }
    if(m_LastUnsuccessfulBuildIsSet)
    {
        val[utility::conversions::to_string_t("lastUnsuccessfulBuild")] = ModelBase::toJson(m_LastUnsuccessfulBuild);
    }
    if(m_NextBuildNumberIsSet)
    {
        val[utility::conversions::to_string_t("nextBuildNumber")] = ModelBase::toJson(m_NextBuildNumber);
    }
    if(m_QueueItemIsSet)
    {
        val[utility::conversions::to_string_t("queueItem")] = ModelBase::toJson(m_QueueItem);
    }
    if(m_ConcurrentBuildIsSet)
    {
        val[utility::conversions::to_string_t("concurrentBuild")] = ModelBase::toJson(m_ConcurrentBuild);
    }
    if(m_ScmIsSet)
    {
        val[utility::conversions::to_string_t("scm")] = ModelBase::toJson(m_Scm);
    }

    return val;
}

void FreeStyleProject::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromJson(val[utility::conversions::to_string_t("_class")]));
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromJson(val[utility::conversions::to_string_t("url")]));
    }
    if(val.has_field(utility::conversions::to_string_t("color")))
    {
        setColor(ModelBase::stringFromJson(val[utility::conversions::to_string_t("color")]));
    }
    {
        m_Actions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("actions")))
        {
        for( auto& item : val[utility::conversions::to_string_t("actions")].as_array() )
        {
            if(item.is_null())
            {
                m_Actions.push_back( std::shared_ptr<FreeStyleProjectactions>(nullptr) );
            }
            else
            {
                std::shared_ptr<FreeStyleProjectactions> newItem(new FreeStyleProjectactions());
                newItem->fromJson(item);
                m_Actions.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromJson(val[utility::conversions::to_string_t("description")]));
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("displayName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("displayNameOrNull")))
    {
        setDisplayNameOrNull(ModelBase::stringFromJson(val[utility::conversions::to_string_t("displayNameOrNull")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fullDisplayName")))
    {
        setFullDisplayName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("fullDisplayName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("fullName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("buildable")))
    {
        setBuildable(ModelBase::boolFromJson(val[utility::conversions::to_string_t("buildable")]));
    }
    {
        m_Builds.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("builds")))
        {
        for( auto& item : val[utility::conversions::to_string_t("builds")].as_array() )
        {
            if(item.is_null())
            {
                m_Builds.push_back( std::shared_ptr<FreeStyleBuild>(nullptr) );
            }
            else
            {
                std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
                newItem->fromJson(item);
                m_Builds.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstBuild")))
    {
        if(!val[utility::conversions::to_string_t("firstBuild")].is_null())
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromJson(val[utility::conversions::to_string_t("firstBuild")]);
            setFirstBuild( newItem );
        }
    }
    {
        m_HealthReport.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("healthReport")))
        {
        for( auto& item : val[utility::conversions::to_string_t("healthReport")].as_array() )
        {
            if(item.is_null())
            {
                m_HealthReport.push_back( std::shared_ptr<FreeStyleProjecthealthReport>(nullptr) );
            }
            else
            {
                std::shared_ptr<FreeStyleProjecthealthReport> newItem(new FreeStyleProjecthealthReport());
                newItem->fromJson(item);
                m_HealthReport.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inQueue")))
    {
        setInQueue(ModelBase::boolFromJson(val[utility::conversions::to_string_t("inQueue")]));
    }
    if(val.has_field(utility::conversions::to_string_t("keepDependencies")))
    {
        setKeepDependencies(ModelBase::boolFromJson(val[utility::conversions::to_string_t("keepDependencies")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastBuild")))
    {
        if(!val[utility::conversions::to_string_t("lastBuild")].is_null())
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromJson(val[utility::conversions::to_string_t("lastBuild")]);
            setLastBuild( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastCompletedBuild")))
    {
        if(!val[utility::conversions::to_string_t("lastCompletedBuild")].is_null())
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromJson(val[utility::conversions::to_string_t("lastCompletedBuild")]);
            setLastCompletedBuild( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastFailedBuild")))
    {
        setLastFailedBuild(ModelBase::stringFromJson(val[utility::conversions::to_string_t("lastFailedBuild")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastStableBuild")))
    {
        if(!val[utility::conversions::to_string_t("lastStableBuild")].is_null())
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromJson(val[utility::conversions::to_string_t("lastStableBuild")]);
            setLastStableBuild( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastSuccessfulBuild")))
    {
        if(!val[utility::conversions::to_string_t("lastSuccessfulBuild")].is_null())
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromJson(val[utility::conversions::to_string_t("lastSuccessfulBuild")]);
            setLastSuccessfulBuild( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastUnstableBuild")))
    {
        setLastUnstableBuild(ModelBase::stringFromJson(val[utility::conversions::to_string_t("lastUnstableBuild")]));
    }
    if(val.has_field(utility::conversions::to_string_t("lastUnsuccessfulBuild")))
    {
        setLastUnsuccessfulBuild(ModelBase::stringFromJson(val[utility::conversions::to_string_t("lastUnsuccessfulBuild")]));
    }
    if(val.has_field(utility::conversions::to_string_t("nextBuildNumber")))
    {
        setNextBuildNumber(ModelBase::int32_tFromJson(val[utility::conversions::to_string_t("nextBuildNumber")]));
    }
    if(val.has_field(utility::conversions::to_string_t("queueItem")))
    {
        setQueueItem(ModelBase::stringFromJson(val[utility::conversions::to_string_t("queueItem")]));
    }
    if(val.has_field(utility::conversions::to_string_t("concurrentBuild")))
    {
        setConcurrentBuild(ModelBase::boolFromJson(val[utility::conversions::to_string_t("concurrentBuild")]));
    }
    if(val.has_field(utility::conversions::to_string_t("scm")))
    {
        if(!val[utility::conversions::to_string_t("scm")].is_null())
        {
            std::shared_ptr<NullSCM> newItem(new NullSCM());
            newItem->fromJson(val[utility::conversions::to_string_t("scm")]);
            setScm( newItem );
        }
    }
}

void FreeStyleProject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("_class"), m__class));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("color"), m_Color));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Actions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("actions"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
    if(m_DisplayNameOrNullIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayNameOrNull"), m_DisplayNameOrNull));
    }
    if(m_FullDisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullDisplayName"), m_FullDisplayName));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fullName"), m_FullName));
    }
    if(m_BuildableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("buildable"), m_Buildable));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Builds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("builds"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_FirstBuildIsSet)
    {
        if (m_FirstBuild.get())
        {
            m_FirstBuild->toMultipart(multipart, utility::conversions::to_string_t("firstBuild."));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_HealthReport )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("healthReport"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_InQueueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inQueue"), m_InQueue));
    }
    if(m_KeepDependenciesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("keepDependencies"), m_KeepDependencies));
    }
    if(m_LastBuildIsSet)
    {
        if (m_LastBuild.get())
        {
            m_LastBuild->toMultipart(multipart, utility::conversions::to_string_t("lastBuild."));
        }
    }
    if(m_LastCompletedBuildIsSet)
    {
        if (m_LastCompletedBuild.get())
        {
            m_LastCompletedBuild->toMultipart(multipart, utility::conversions::to_string_t("lastCompletedBuild."));
        }
    }
    if(m_LastFailedBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastFailedBuild"), m_LastFailedBuild));
    }
    if(m_LastStableBuildIsSet)
    {
        if (m_LastStableBuild.get())
        {
            m_LastStableBuild->toMultipart(multipart, utility::conversions::to_string_t("lastStableBuild."));
        }
    }
    if(m_LastSuccessfulBuildIsSet)
    {
        if (m_LastSuccessfulBuild.get())
        {
            m_LastSuccessfulBuild->toMultipart(multipart, utility::conversions::to_string_t("lastSuccessfulBuild."));
        }
    }
    if(m_LastUnstableBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastUnstableBuild"), m_LastUnstableBuild));
    }
    if(m_LastUnsuccessfulBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastUnsuccessfulBuild"), m_LastUnsuccessfulBuild));
    }
    if(m_NextBuildNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nextBuildNumber"), m_NextBuildNumber));
    }
    if(m_QueueItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("queueItem"), m_QueueItem));
    }
    if(m_ConcurrentBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("concurrentBuild"), m_ConcurrentBuild));
    }
    if(m_ScmIsSet)
    {
        if (m_Scm.get())
        {
            m_Scm->toMultipart(multipart, utility::conversions::to_string_t("scm."));
        }
    }
}

void FreeStyleProject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("_class"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("url"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("color")))
    {
        setColor(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("color"))));
    }
    {
        m_Actions.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("actions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("actions"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Actions.push_back( std::shared_ptr<FreeStyleProjectactions>(nullptr) );
            }
            else
            {
                std::shared_ptr<FreeStyleProjectactions> newItem(new FreeStyleProjectactions());
                newItem->fromJson(item);
                m_Actions.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("description"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayNameOrNull")))
    {
        setDisplayNameOrNull(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayNameOrNull"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullDisplayName")))
    {
        setFullDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullDisplayName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fullName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("buildable")))
    {
        setBuildable(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("buildable"))));
    }
    {
        m_Builds.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("builds")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("builds"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Builds.push_back( std::shared_ptr<FreeStyleBuild>(nullptr) );
            }
            else
            {
                std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
                newItem->fromJson(item);
                m_Builds.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstBuild")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("firstBuild")))
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("firstBuild."));
            setFirstBuild( newItem );
        }
    }
    {
        m_HealthReport.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("healthReport")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("healthReport"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_HealthReport.push_back( std::shared_ptr<FreeStyleProjecthealthReport>(nullptr) );
            }
            else
            {
                std::shared_ptr<FreeStyleProjecthealthReport> newItem(new FreeStyleProjecthealthReport());
                newItem->fromJson(item);
                m_HealthReport.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inQueue")))
    {
        setInQueue(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("inQueue"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("keepDependencies")))
    {
        setKeepDependencies(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("keepDependencies"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastBuild")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("lastBuild")))
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("lastBuild."));
            setLastBuild( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastCompletedBuild")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("lastCompletedBuild")))
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("lastCompletedBuild."));
            setLastCompletedBuild( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastFailedBuild")))
    {
        setLastFailedBuild(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastFailedBuild"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastStableBuild")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("lastStableBuild")))
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("lastStableBuild."));
            setLastStableBuild( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastSuccessfulBuild")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("lastSuccessfulBuild")))
        {
            std::shared_ptr<FreeStyleBuild> newItem(new FreeStyleBuild());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("lastSuccessfulBuild."));
            setLastSuccessfulBuild( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastUnstableBuild")))
    {
        setLastUnstableBuild(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastUnstableBuild"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastUnsuccessfulBuild")))
    {
        setLastUnsuccessfulBuild(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastUnsuccessfulBuild"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nextBuildNumber")))
    {
        setNextBuildNumber(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("nextBuildNumber"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("queueItem")))
    {
        setQueueItem(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("queueItem"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("concurrentBuild")))
    {
        setConcurrentBuild(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("concurrentBuild"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scm")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("scm")))
        {
            std::shared_ptr<NullSCM> newItem(new NullSCM());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("scm."));
            setScm( newItem );
        }
    }
}

utility::string_t FreeStyleProject::getClass() const
{
    return m__class;
}


void FreeStyleProject::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool FreeStyleProject::_classIsSet() const
{
    return m__classIsSet;
}

void FreeStyleProject::unset_class()
{
    m__classIsSet = false;
}

utility::string_t FreeStyleProject::getName() const
{
    return m_Name;
}


void FreeStyleProject::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool FreeStyleProject::nameIsSet() const
{
    return m_NameIsSet;
}

void FreeStyleProject::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t FreeStyleProject::getUrl() const
{
    return m_Url;
}


void FreeStyleProject::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool FreeStyleProject::urlIsSet() const
{
    return m_UrlIsSet;
}

void FreeStyleProject::unsetUrl()
{
    m_UrlIsSet = false;
}

utility::string_t FreeStyleProject::getColor() const
{
    return m_Color;
}


void FreeStyleProject::setColor(utility::string_t value)
{
    m_Color = value;
    m_ColorIsSet = true;
}
bool FreeStyleProject::colorIsSet() const
{
    return m_ColorIsSet;
}

void FreeStyleProject::unsetColor()
{
    m_ColorIsSet = false;
}

std::vector<std::shared_ptr<FreeStyleProjectactions>>& FreeStyleProject::getActions()
{
    return m_Actions;
}

void FreeStyleProject::setActions(std::vector<std::shared_ptr<FreeStyleProjectactions>> value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}
bool FreeStyleProject::actionsIsSet() const
{
    return m_ActionsIsSet;
}

void FreeStyleProject::unsetActions()
{
    m_ActionsIsSet = false;
}

utility::string_t FreeStyleProject::getDescription() const
{
    return m_Description;
}


void FreeStyleProject::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool FreeStyleProject::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void FreeStyleProject::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t FreeStyleProject::getDisplayName() const
{
    return m_DisplayName;
}


void FreeStyleProject::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool FreeStyleProject::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void FreeStyleProject::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

utility::string_t FreeStyleProject::getDisplayNameOrNull() const
{
    return m_DisplayNameOrNull;
}


void FreeStyleProject::setDisplayNameOrNull(utility::string_t value)
{
    m_DisplayNameOrNull = value;
    m_DisplayNameOrNullIsSet = true;
}
bool FreeStyleProject::displayNameOrNullIsSet() const
{
    return m_DisplayNameOrNullIsSet;
}

void FreeStyleProject::unsetDisplayNameOrNull()
{
    m_DisplayNameOrNullIsSet = false;
}

utility::string_t FreeStyleProject::getFullDisplayName() const
{
    return m_FullDisplayName;
}


void FreeStyleProject::setFullDisplayName(utility::string_t value)
{
    m_FullDisplayName = value;
    m_FullDisplayNameIsSet = true;
}
bool FreeStyleProject::fullDisplayNameIsSet() const
{
    return m_FullDisplayNameIsSet;
}

void FreeStyleProject::unsetFullDisplayName()
{
    m_FullDisplayNameIsSet = false;
}

utility::string_t FreeStyleProject::getFullName() const
{
    return m_FullName;
}


void FreeStyleProject::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool FreeStyleProject::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void FreeStyleProject::unsetFullName()
{
    m_FullNameIsSet = false;
}

bool FreeStyleProject::isBuildable() const
{
    return m_Buildable;
}


void FreeStyleProject::setBuildable(bool value)
{
    m_Buildable = value;
    m_BuildableIsSet = true;
}
bool FreeStyleProject::buildableIsSet() const
{
    return m_BuildableIsSet;
}

void FreeStyleProject::unsetBuildable()
{
    m_BuildableIsSet = false;
}

std::vector<std::shared_ptr<FreeStyleBuild>>& FreeStyleProject::getBuilds()
{
    return m_Builds;
}

void FreeStyleProject::setBuilds(std::vector<std::shared_ptr<FreeStyleBuild>> value)
{
    m_Builds = value;
    m_BuildsIsSet = true;
}
bool FreeStyleProject::buildsIsSet() const
{
    return m_BuildsIsSet;
}

void FreeStyleProject::unsetBuilds()
{
    m_BuildsIsSet = false;
}

std::shared_ptr<FreeStyleBuild> FreeStyleProject::getFirstBuild() const
{
    return m_FirstBuild;
}


void FreeStyleProject::setFirstBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_FirstBuild = value;
    m_FirstBuildIsSet = true;
}
bool FreeStyleProject::firstBuildIsSet() const
{
    return m_FirstBuildIsSet;
}

void FreeStyleProject::unsetFirstBuild()
{
    m_FirstBuildIsSet = false;
}

std::vector<std::shared_ptr<FreeStyleProjecthealthReport>>& FreeStyleProject::getHealthReport()
{
    return m_HealthReport;
}

void FreeStyleProject::setHealthReport(std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> value)
{
    m_HealthReport = value;
    m_HealthReportIsSet = true;
}
bool FreeStyleProject::healthReportIsSet() const
{
    return m_HealthReportIsSet;
}

void FreeStyleProject::unsetHealthReport()
{
    m_HealthReportIsSet = false;
}

bool FreeStyleProject::isInQueue() const
{
    return m_InQueue;
}


void FreeStyleProject::setInQueue(bool value)
{
    m_InQueue = value;
    m_InQueueIsSet = true;
}
bool FreeStyleProject::inQueueIsSet() const
{
    return m_InQueueIsSet;
}

void FreeStyleProject::unsetInQueue()
{
    m_InQueueIsSet = false;
}

bool FreeStyleProject::isKeepDependencies() const
{
    return m_KeepDependencies;
}


void FreeStyleProject::setKeepDependencies(bool value)
{
    m_KeepDependencies = value;
    m_KeepDependenciesIsSet = true;
}
bool FreeStyleProject::keepDependenciesIsSet() const
{
    return m_KeepDependenciesIsSet;
}

void FreeStyleProject::unsetKeepDependencies()
{
    m_KeepDependenciesIsSet = false;
}

std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastBuild() const
{
    return m_LastBuild;
}


void FreeStyleProject::setLastBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_LastBuild = value;
    m_LastBuildIsSet = true;
}
bool FreeStyleProject::lastBuildIsSet() const
{
    return m_LastBuildIsSet;
}

void FreeStyleProject::unsetLastBuild()
{
    m_LastBuildIsSet = false;
}

std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastCompletedBuild() const
{
    return m_LastCompletedBuild;
}


void FreeStyleProject::setLastCompletedBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_LastCompletedBuild = value;
    m_LastCompletedBuildIsSet = true;
}
bool FreeStyleProject::lastCompletedBuildIsSet() const
{
    return m_LastCompletedBuildIsSet;
}

void FreeStyleProject::unsetLastCompletedBuild()
{
    m_LastCompletedBuildIsSet = false;
}

utility::string_t FreeStyleProject::getLastFailedBuild() const
{
    return m_LastFailedBuild;
}


void FreeStyleProject::setLastFailedBuild(utility::string_t value)
{
    m_LastFailedBuild = value;
    m_LastFailedBuildIsSet = true;
}
bool FreeStyleProject::lastFailedBuildIsSet() const
{
    return m_LastFailedBuildIsSet;
}

void FreeStyleProject::unsetLastFailedBuild()
{
    m_LastFailedBuildIsSet = false;
}

std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastStableBuild() const
{
    return m_LastStableBuild;
}


void FreeStyleProject::setLastStableBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_LastStableBuild = value;
    m_LastStableBuildIsSet = true;
}
bool FreeStyleProject::lastStableBuildIsSet() const
{
    return m_LastStableBuildIsSet;
}

void FreeStyleProject::unsetLastStableBuild()
{
    m_LastStableBuildIsSet = false;
}

std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastSuccessfulBuild() const
{
    return m_LastSuccessfulBuild;
}


void FreeStyleProject::setLastSuccessfulBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_LastSuccessfulBuild = value;
    m_LastSuccessfulBuildIsSet = true;
}
bool FreeStyleProject::lastSuccessfulBuildIsSet() const
{
    return m_LastSuccessfulBuildIsSet;
}

void FreeStyleProject::unsetLastSuccessfulBuild()
{
    m_LastSuccessfulBuildIsSet = false;
}

utility::string_t FreeStyleProject::getLastUnstableBuild() const
{
    return m_LastUnstableBuild;
}


void FreeStyleProject::setLastUnstableBuild(utility::string_t value)
{
    m_LastUnstableBuild = value;
    m_LastUnstableBuildIsSet = true;
}
bool FreeStyleProject::lastUnstableBuildIsSet() const
{
    return m_LastUnstableBuildIsSet;
}

void FreeStyleProject::unsetLastUnstableBuild()
{
    m_LastUnstableBuildIsSet = false;
}

utility::string_t FreeStyleProject::getLastUnsuccessfulBuild() const
{
    return m_LastUnsuccessfulBuild;
}


void FreeStyleProject::setLastUnsuccessfulBuild(utility::string_t value)
{
    m_LastUnsuccessfulBuild = value;
    m_LastUnsuccessfulBuildIsSet = true;
}
bool FreeStyleProject::lastUnsuccessfulBuildIsSet() const
{
    return m_LastUnsuccessfulBuildIsSet;
}

void FreeStyleProject::unsetLastUnsuccessfulBuild()
{
    m_LastUnsuccessfulBuildIsSet = false;
}

int32_t FreeStyleProject::getNextBuildNumber() const
{
    return m_NextBuildNumber;
}


void FreeStyleProject::setNextBuildNumber(int32_t value)
{
    m_NextBuildNumber = value;
    m_NextBuildNumberIsSet = true;
}
bool FreeStyleProject::nextBuildNumberIsSet() const
{
    return m_NextBuildNumberIsSet;
}

void FreeStyleProject::unsetNextBuildNumber()
{
    m_NextBuildNumberIsSet = false;
}

utility::string_t FreeStyleProject::getQueueItem() const
{
    return m_QueueItem;
}


void FreeStyleProject::setQueueItem(utility::string_t value)
{
    m_QueueItem = value;
    m_QueueItemIsSet = true;
}
bool FreeStyleProject::queueItemIsSet() const
{
    return m_QueueItemIsSet;
}

void FreeStyleProject::unsetQueueItem()
{
    m_QueueItemIsSet = false;
}

bool FreeStyleProject::isConcurrentBuild() const
{
    return m_ConcurrentBuild;
}


void FreeStyleProject::setConcurrentBuild(bool value)
{
    m_ConcurrentBuild = value;
    m_ConcurrentBuildIsSet = true;
}
bool FreeStyleProject::concurrentBuildIsSet() const
{
    return m_ConcurrentBuildIsSet;
}

void FreeStyleProject::unsetConcurrentBuild()
{
    m_ConcurrentBuildIsSet = false;
}

std::shared_ptr<NullSCM> FreeStyleProject::getScm() const
{
    return m_Scm;
}


void FreeStyleProject::setScm(std::shared_ptr<NullSCM> value)
{
    m_Scm = value;
    m_ScmIsSet = true;
}
bool FreeStyleProject::scmIsSet() const
{
    return m_ScmIsSet;
}

void FreeStyleProject::unsetScm()
{
    m_ScmIsSet = false;
}

}
}
}
}

