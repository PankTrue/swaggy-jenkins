{-
   Swaggy Jenkins
   Jenkins API clients generated from Swagger / Open API specification

   OpenAPI spec version: 1.1.0
   Contact: blah@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.RemoteAccess exposing (getComputer, getCrumb, getJenkins, getJob, getJobConfig, getJobLastBuild, getJobProgressiveText, getQueue, getQueueItem, getView, getViewConfig, headJenkins, postCreateItem, postCreateView, postJobBuild, postJobConfig, postJobDelete, postJobDisable, postJobEnable, postJobLastBuildStop, postViewConfig)

import Data.ListView exposing (ListView, listViewDecoder)
import Data.Hudson exposing (Hudson, hudsonDecoder)
import Data.FreeStyleBuild exposing (FreeStyleBuild, freeStyleBuildDecoder)
import Data.FreeStyleProject exposing (FreeStyleProject, freeStyleProjectDecoder)
import Data.DefaultCrumbIssuer exposing (DefaultCrumbIssuer, defaultCrumbIssuerDecoder)
import Data.Queue exposing (Queue, queueDecoder)
import Data.ComputerSet exposing (ComputerSet, computerSetDecoder)
import Dict
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "http://localhost"


{-| Retrieve computer details
-}
getComputer : Http.Request ComputerSet
getComputer =
    { method = "GET"
    , url = basePath ++ "/computer/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson computerSetDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve CSRF protection token
-}
getCrumb : Http.Request DefaultCrumbIssuer
getCrumb =
    { method = "GET"
    , url = basePath ++ "/crumbIssuer/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson defaultCrumbIssuerDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve Jenkins details
-}
getJenkins : Http.Request Hudson
getJenkins =
    { method = "GET"
    , url = basePath ++ "/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson hudsonDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve job details
-}
getJob : String -> Http.Request FreeStyleProject
getJob name =
    { method = "GET"
    , url = basePath ++ "/job/" ++ name ++ "/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson freeStyleProjectDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve job configuration
-}
getJobConfig : String -> Http.Request String
getJobConfig name =
    { method = "GET"
    , url = basePath ++ "/job/" ++ name ++ "/config.xml"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve job's last build details
-}
getJobLastBuild : String -> Http.Request FreeStyleBuild
getJobLastBuild name =
    { method = "GET"
    , url = basePath ++ "/job/" ++ name ++ "/lastBuild/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson freeStyleBuildDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve job's build progressive text output
-}
getJobProgressiveText : String -> String -> Http.Request ()
getJobProgressiveText name number =
    { method = "GET"
    , url = basePath ++ "/job/" ++ name ++ "/" ++ number ++ "/logText/progressiveText"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve queue details
-}
getQueue : Http.Request Queue
getQueue =
    { method = "GET"
    , url = basePath ++ "/queue/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson queueDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve queued item details
-}
getQueueItem : String -> Http.Request Queue
getQueueItem number =
    { method = "GET"
    , url = basePath ++ "/queue/item/" ++ number ++ "/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson queueDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve view details
-}
getView : String -> Http.Request ListView
getView name =
    { method = "GET"
    , url = basePath ++ "/view/" ++ name ++ "/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson listViewDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve view configuration
-}
getViewConfig : String -> Http.Request String
getViewConfig name =
    { method = "GET"
    , url = basePath ++ "/view/" ++ name ++ "/config.xml"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Retrieve Jenkins headers
-}
headJenkins : Http.Request ()
headJenkins =
    { method = "HEAD"
    , url = basePath ++ "/api/json"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Create a new job using job configuration, or copied from an existing job
-}
postCreateItem : String -> Http.Request ()
postCreateItem model =
    { method = "POST"
    , url = basePath ++ "/createItem"
    , headers = []
    , body = Http.jsonBody <| Encode.string model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Create a new view using view configuration
-}
postCreateView : String -> Http.Request ()
postCreateView model =
    { method = "POST"
    , url = basePath ++ "/createView"
    , headers = []
    , body = Http.jsonBody <| Encode.string model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Build a job
-}
postJobBuild : String -> Http.Request ()
postJobBuild name =
    { method = "POST"
    , url = basePath ++ "/job/" ++ name ++ "/build"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Update job configuration
-}
postJobConfig : String -> String -> Http.Request ()
postJobConfig name model =
    { method = "POST"
    , url = basePath ++ "/job/" ++ name ++ "/config.xml"
    , headers = []
    , body = Http.jsonBody <| Encode.string model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Delete a job
-}
postJobDelete : String -> Http.Request ()
postJobDelete name =
    { method = "POST"
    , url = basePath ++ "/job/" ++ name ++ "/doDelete"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Disable a job
-}
postJobDisable : String -> Http.Request ()
postJobDisable name =
    { method = "POST"
    , url = basePath ++ "/job/" ++ name ++ "/disable"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Enable a job
-}
postJobEnable : String -> Http.Request ()
postJobEnable name =
    { method = "POST"
    , url = basePath ++ "/job/" ++ name ++ "/enable"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Stop a job
-}
postJobLastBuildStop : String -> Http.Request ()
postJobLastBuildStop name =
    { method = "POST"
    , url = basePath ++ "/job/" ++ name ++ "/lastBuild/stop"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-| Update view configuration
-}
postViewConfig : String -> String -> Http.Request ()
postViewConfig name model =
    { method = "POST"
    , url = basePath ++ "/view/" ++ name ++ "/config.xml"
    , headers = []
    , body = Http.jsonBody <| Encode.string model
    , expect = Http.expectStringResponse (\_ -> Ok ())
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request
