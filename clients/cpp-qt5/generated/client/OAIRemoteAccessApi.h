/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIRemoteAccessApi_H_
#define _OAI_OAIRemoteAccessApi_H_

#include "OAIHttpRequest.h"

#include "OAIOAIComputerSet.h"
#include "OAIOAIDefaultCrumbIssuer.h"
#include "OAIOAIFreeStyleBuild.h"
#include "OAIOAIFreeStyleProject.h"
#include "OAIOAIHudson.h"
#include "OAIOAIListView.h"
#include "OAIOAIQueue.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIRemoteAccessApi: public QObject {
    Q_OBJECT

public:
    OAIRemoteAccessApi();
    OAIRemoteAccessApi(QString host, QString basePath);
    ~OAIRemoteAccessApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void getComputer(qint32 depth);
    void getCrumb();
    void getJenkins();
    void getJob(QString* name);
    void getJobConfig(QString* name);
    void getJobLastBuild(QString* name);
    void getJobProgressiveText(QString* name, QString* number, QString* start);
    void getQueue();
    void getQueueItem(QString* number);
    void getView(QString* name);
    void getViewConfig(QString* name);
    void headJenkins();
    void postCreateItem(QString* name, QString* from, QString* mode, QString* jenkins_crumb, QString* content_type, QString*& body);
    void postCreateView(QString* name, QString* jenkins_crumb, QString* content_type, QString*& body);
    void postJobBuild(QString* name, QString* json, QString* token, QString* jenkins_crumb);
    void postJobConfig(QString* name, QString*& body, QString* jenkins_crumb);
    void postJobDelete(QString* name, QString* jenkins_crumb);
    void postJobDisable(QString* name, QString* jenkins_crumb);
    void postJobEnable(QString* name, QString* jenkins_crumb);
    void postJobLastBuildStop(QString* name, QString* jenkins_crumb);
    void postViewConfig(QString* name, QString*& body, QString* jenkins_crumb);
    
private:
    void getComputerCallback (OAIHttpRequestWorker * worker);
    void getCrumbCallback (OAIHttpRequestWorker * worker);
    void getJenkinsCallback (OAIHttpRequestWorker * worker);
    void getJobCallback (OAIHttpRequestWorker * worker);
    void getJobConfigCallback (OAIHttpRequestWorker * worker);
    void getJobLastBuildCallback (OAIHttpRequestWorker * worker);
    void getJobProgressiveTextCallback (OAIHttpRequestWorker * worker);
    void getQueueCallback (OAIHttpRequestWorker * worker);
    void getQueueItemCallback (OAIHttpRequestWorker * worker);
    void getViewCallback (OAIHttpRequestWorker * worker);
    void getViewConfigCallback (OAIHttpRequestWorker * worker);
    void headJenkinsCallback (OAIHttpRequestWorker * worker);
    void postCreateItemCallback (OAIHttpRequestWorker * worker);
    void postCreateViewCallback (OAIHttpRequestWorker * worker);
    void postJobBuildCallback (OAIHttpRequestWorker * worker);
    void postJobConfigCallback (OAIHttpRequestWorker * worker);
    void postJobDeleteCallback (OAIHttpRequestWorker * worker);
    void postJobDisableCallback (OAIHttpRequestWorker * worker);
    void postJobEnableCallback (OAIHttpRequestWorker * worker);
    void postJobLastBuildStopCallback (OAIHttpRequestWorker * worker);
    void postViewConfigCallback (OAIHttpRequestWorker * worker);
    
signals:
    void getComputerSignal(OAIComputerSet* summary);
    void getCrumbSignal(OAIDefaultCrumbIssuer* summary);
    void getJenkinsSignal(OAIHudson* summary);
    void getJobSignal(OAIFreeStyleProject* summary);
    void getJobConfigSignal(QString* summary);
    void getJobLastBuildSignal(OAIFreeStyleBuild* summary);
    void getJobProgressiveTextSignal();
    void getQueueSignal(OAIQueue* summary);
    void getQueueItemSignal(OAIQueue* summary);
    void getViewSignal(OAIListView* summary);
    void getViewConfigSignal(QString* summary);
    void headJenkinsSignal();
    void postCreateItemSignal();
    void postCreateViewSignal();
    void postJobBuildSignal();
    void postJobConfigSignal();
    void postJobDeleteSignal();
    void postJobDisableSignal();
    void postJobEnableSignal();
    void postJobLastBuildStopSignal();
    void postViewConfigSignal();
    
    void getComputerSignalE(OAIComputerSet* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCrumbSignalE(OAIDefaultCrumbIssuer* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJenkinsSignalE(OAIHudson* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobSignalE(OAIFreeStyleProject* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobConfigSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobLastBuildSignalE(OAIFreeStyleBuild* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobProgressiveTextSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getQueueSignalE(OAIQueue* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getQueueItemSignalE(OAIQueue* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getViewSignalE(OAIListView* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getViewConfigSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void headJenkinsSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postCreateItemSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postCreateViewSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobBuildSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobConfigSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobDeleteSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobDisableSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobEnableSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobLastBuildStopSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void postViewConfigSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    
    void getComputerSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCrumbSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJenkinsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobConfigSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobLastBuildSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobProgressiveTextSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getQueueSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getQueueItemSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getViewSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getViewConfigSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void headJenkinsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postCreateItemSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postCreateViewSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobBuildSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobConfigSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobDeleteSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobDisableSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobEnableSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobLastBuildStopSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postViewConfigSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
