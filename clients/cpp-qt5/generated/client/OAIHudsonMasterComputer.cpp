/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIHudsonMasterComputer.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIHudsonMasterComputer::OAIHudsonMasterComputer(QString json) {
    init();
    this->fromJson(json);
}

OAIHudsonMasterComputer::OAIHudsonMasterComputer() {
    init();
}

OAIHudsonMasterComputer::~OAIHudsonMasterComputer() {
    this->cleanup();
}

void
OAIHudsonMasterComputer::init() {
    _class = new QString("");
    m__class_isSet = false;
    display_name = new QString("");
    m_display_name_isSet = false;
    executors = new QList<OAIHudsonMasterComputerexecutors*>();
    m_executors_isSet = false;
    icon = new QString("");
    m_icon_isSet = false;
    icon_class_name = new QString("");
    m_icon_class_name_isSet = false;
    idle = false;
    m_idle_isSet = false;
    jnlp_agent = false;
    m_jnlp_agent_isSet = false;
    launch_supported = false;
    m_launch_supported_isSet = false;
    load_statistics = new OAILabel1();
    m_load_statistics_isSet = false;
    manual_launch_allowed = false;
    m_manual_launch_allowed_isSet = false;
    monitor_data = new OAIHudsonMasterComputermonitorData();
    m_monitor_data_isSet = false;
    num_executors = 0;
    m_num_executors_isSet = false;
    offline = false;
    m_offline_isSet = false;
    offline_cause = new QString("");
    m_offline_cause_isSet = false;
    offline_cause_reason = new QString("");
    m_offline_cause_reason_isSet = false;
    temporarily_offline = false;
    m_temporarily_offline_isSet = false;
}

void
OAIHudsonMasterComputer::cleanup() {
    if(_class != nullptr) { 
        delete _class;
    }
    if(display_name != nullptr) { 
        delete display_name;
    }
    if(executors != nullptr) { 
        auto arr = executors;
        for(auto o: *arr) { 
            delete o;
        }
        delete executors;
    }
    if(icon != nullptr) { 
        delete icon;
    }
    if(icon_class_name != nullptr) { 
        delete icon_class_name;
    }



    if(load_statistics != nullptr) { 
        delete load_statistics;
    }

    if(monitor_data != nullptr) { 
        delete monitor_data;
    }


    if(offline_cause != nullptr) { 
        delete offline_cause;
    }
    if(offline_cause_reason != nullptr) { 
        delete offline_cause_reason;
    }

}

OAIHudsonMasterComputer*
OAIHudsonMasterComputer::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIHudsonMasterComputer::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&display_name, pJson["displayName"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&executors, pJson["executors"], "QList", "OAIHudsonMasterComputerexecutors");
    ::OpenAPI::setValue(&icon, pJson["icon"], "QString", "QString");
    
    ::OpenAPI::setValue(&icon_class_name, pJson["iconClassName"], "QString", "QString");
    
    ::OpenAPI::setValue(&idle, pJson["idle"], "bool", "");
    
    ::OpenAPI::setValue(&jnlp_agent, pJson["jnlpAgent"], "bool", "");
    
    ::OpenAPI::setValue(&launch_supported, pJson["launchSupported"], "bool", "");
    
    ::OpenAPI::setValue(&load_statistics, pJson["loadStatistics"], "OAILabel1", "OAILabel1");
    
    ::OpenAPI::setValue(&manual_launch_allowed, pJson["manualLaunchAllowed"], "bool", "");
    
    ::OpenAPI::setValue(&monitor_data, pJson["monitorData"], "OAIHudsonMasterComputermonitorData", "OAIHudsonMasterComputermonitorData");
    
    ::OpenAPI::setValue(&num_executors, pJson["numExecutors"], "qint32", "");
    
    ::OpenAPI::setValue(&offline, pJson["offline"], "bool", "");
    
    ::OpenAPI::setValue(&offline_cause, pJson["offlineCause"], "QString", "QString");
    
    ::OpenAPI::setValue(&offline_cause_reason, pJson["offlineCauseReason"], "QString", "QString");
    
    ::OpenAPI::setValue(&temporarily_offline, pJson["temporarilyOffline"], "bool", "");
    
}

QString
OAIHudsonMasterComputer::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIHudsonMasterComputer::asJsonObject() {
    QJsonObject obj;
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if(display_name != nullptr && *display_name != QString("")){
        toJsonValue(QString("displayName"), display_name, obj, QString("QString"));
    }
    if(executors->size() > 0){
        toJsonArray((QList<void*>*)executors, obj, "executors", "OAIHudsonMasterComputerexecutors");
    }
    if(icon != nullptr && *icon != QString("")){
        toJsonValue(QString("icon"), icon, obj, QString("QString"));
    }
    if(icon_class_name != nullptr && *icon_class_name != QString("")){
        toJsonValue(QString("iconClassName"), icon_class_name, obj, QString("QString"));
    }
    if(m_idle_isSet){
        obj.insert("idle", QJsonValue(idle));
    }
    if(m_jnlp_agent_isSet){
        obj.insert("jnlpAgent", QJsonValue(jnlp_agent));
    }
    if(m_launch_supported_isSet){
        obj.insert("launchSupported", QJsonValue(launch_supported));
    }
    if((load_statistics != nullptr) && (load_statistics->isSet())){
        toJsonValue(QString("loadStatistics"), load_statistics, obj, QString("OAILabel1"));
    }
    if(m_manual_launch_allowed_isSet){
        obj.insert("manualLaunchAllowed", QJsonValue(manual_launch_allowed));
    }
    if((monitor_data != nullptr) && (monitor_data->isSet())){
        toJsonValue(QString("monitorData"), monitor_data, obj, QString("OAIHudsonMasterComputermonitorData"));
    }
    if(m_num_executors_isSet){
        obj.insert("numExecutors", QJsonValue(num_executors));
    }
    if(m_offline_isSet){
        obj.insert("offline", QJsonValue(offline));
    }
    if(offline_cause != nullptr && *offline_cause != QString("")){
        toJsonValue(QString("offlineCause"), offline_cause, obj, QString("QString"));
    }
    if(offline_cause_reason != nullptr && *offline_cause_reason != QString("")){
        toJsonValue(QString("offlineCauseReason"), offline_cause_reason, obj, QString("QString"));
    }
    if(m_temporarily_offline_isSet){
        obj.insert("temporarilyOffline", QJsonValue(temporarily_offline));
    }

    return obj;
}

QString*
OAIHudsonMasterComputer::getClass() {
    return _class;
}
void
OAIHudsonMasterComputer::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

QString*
OAIHudsonMasterComputer::getDisplayName() {
    return display_name;
}
void
OAIHudsonMasterComputer::setDisplayName(QString* display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

QList<OAIHudsonMasterComputerexecutors*>*
OAIHudsonMasterComputer::getExecutors() {
    return executors;
}
void
OAIHudsonMasterComputer::setExecutors(QList<OAIHudsonMasterComputerexecutors*>* executors) {
    this->executors = executors;
    this->m_executors_isSet = true;
}

QString*
OAIHudsonMasterComputer::getIcon() {
    return icon;
}
void
OAIHudsonMasterComputer::setIcon(QString* icon) {
    this->icon = icon;
    this->m_icon_isSet = true;
}

QString*
OAIHudsonMasterComputer::getIconClassName() {
    return icon_class_name;
}
void
OAIHudsonMasterComputer::setIconClassName(QString* icon_class_name) {
    this->icon_class_name = icon_class_name;
    this->m_icon_class_name_isSet = true;
}

bool
OAIHudsonMasterComputer::isIdle() {
    return idle;
}
void
OAIHudsonMasterComputer::setIdle(bool idle) {
    this->idle = idle;
    this->m_idle_isSet = true;
}

bool
OAIHudsonMasterComputer::isJnlpAgent() {
    return jnlp_agent;
}
void
OAIHudsonMasterComputer::setJnlpAgent(bool jnlp_agent) {
    this->jnlp_agent = jnlp_agent;
    this->m_jnlp_agent_isSet = true;
}

bool
OAIHudsonMasterComputer::isLaunchSupported() {
    return launch_supported;
}
void
OAIHudsonMasterComputer::setLaunchSupported(bool launch_supported) {
    this->launch_supported = launch_supported;
    this->m_launch_supported_isSet = true;
}

OAILabel1*
OAIHudsonMasterComputer::getLoadStatistics() {
    return load_statistics;
}
void
OAIHudsonMasterComputer::setLoadStatistics(OAILabel1* load_statistics) {
    this->load_statistics = load_statistics;
    this->m_load_statistics_isSet = true;
}

bool
OAIHudsonMasterComputer::isManualLaunchAllowed() {
    return manual_launch_allowed;
}
void
OAIHudsonMasterComputer::setManualLaunchAllowed(bool manual_launch_allowed) {
    this->manual_launch_allowed = manual_launch_allowed;
    this->m_manual_launch_allowed_isSet = true;
}

OAIHudsonMasterComputermonitorData*
OAIHudsonMasterComputer::getMonitorData() {
    return monitor_data;
}
void
OAIHudsonMasterComputer::setMonitorData(OAIHudsonMasterComputermonitorData* monitor_data) {
    this->monitor_data = monitor_data;
    this->m_monitor_data_isSet = true;
}

qint32
OAIHudsonMasterComputer::getNumExecutors() {
    return num_executors;
}
void
OAIHudsonMasterComputer::setNumExecutors(qint32 num_executors) {
    this->num_executors = num_executors;
    this->m_num_executors_isSet = true;
}

bool
OAIHudsonMasterComputer::isOffline() {
    return offline;
}
void
OAIHudsonMasterComputer::setOffline(bool offline) {
    this->offline = offline;
    this->m_offline_isSet = true;
}

QString*
OAIHudsonMasterComputer::getOfflineCause() {
    return offline_cause;
}
void
OAIHudsonMasterComputer::setOfflineCause(QString* offline_cause) {
    this->offline_cause = offline_cause;
    this->m_offline_cause_isSet = true;
}

QString*
OAIHudsonMasterComputer::getOfflineCauseReason() {
    return offline_cause_reason;
}
void
OAIHudsonMasterComputer::setOfflineCauseReason(QString* offline_cause_reason) {
    this->offline_cause_reason = offline_cause_reason;
    this->m_offline_cause_reason_isSet = true;
}

bool
OAIHudsonMasterComputer::isTemporarilyOffline() {
    return temporarily_offline;
}
void
OAIHudsonMasterComputer::setTemporarilyOffline(bool temporarily_offline) {
    this->temporarily_offline = temporarily_offline;
    this->m_temporarily_offline_isSet = true;
}


bool
OAIHudsonMasterComputer::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(display_name != nullptr && *display_name != QString("")){ isObjectUpdated = true; break;}
        if(executors->size() > 0){ isObjectUpdated = true; break;}
        if(icon != nullptr && *icon != QString("")){ isObjectUpdated = true; break;}
        if(icon_class_name != nullptr && *icon_class_name != QString("")){ isObjectUpdated = true; break;}
        if(m_idle_isSet){ isObjectUpdated = true; break;}
        if(m_jnlp_agent_isSet){ isObjectUpdated = true; break;}
        if(m_launch_supported_isSet){ isObjectUpdated = true; break;}
        if(load_statistics != nullptr && load_statistics->isSet()){ isObjectUpdated = true; break;}
        if(m_manual_launch_allowed_isSet){ isObjectUpdated = true; break;}
        if(monitor_data != nullptr && monitor_data->isSet()){ isObjectUpdated = true; break;}
        if(m_num_executors_isSet){ isObjectUpdated = true; break;}
        if(m_offline_isSet){ isObjectUpdated = true; break;}
        if(offline_cause != nullptr && *offline_cause != QString("")){ isObjectUpdated = true; break;}
        if(offline_cause_reason != nullptr && *offline_cause_reason != QString("")){ isObjectUpdated = true; break;}
        if(m_temporarily_offline_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

