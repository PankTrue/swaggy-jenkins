/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGithubRepositorypermissions.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGithubRepositorypermissions::OAIGithubRepositorypermissions(QString json) {
    init();
    this->fromJson(json);
}

OAIGithubRepositorypermissions::OAIGithubRepositorypermissions() {
    init();
}

OAIGithubRepositorypermissions::~OAIGithubRepositorypermissions() {
    this->cleanup();
}

void
OAIGithubRepositorypermissions::init() {
    admin = false;
    m_admin_isSet = false;
    push = false;
    m_push_isSet = false;
    pull = false;
    m_pull_isSet = false;
    _class = new QString("");
    m__class_isSet = false;
}

void
OAIGithubRepositorypermissions::cleanup() {



    if(_class != nullptr) { 
        delete _class;
    }
}

OAIGithubRepositorypermissions*
OAIGithubRepositorypermissions::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGithubRepositorypermissions::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&admin, pJson["admin"], "bool", "");
    
    ::OpenAPI::setValue(&push, pJson["push"], "bool", "");
    
    ::OpenAPI::setValue(&pull, pJson["pull"], "bool", "");
    
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
}

QString
OAIGithubRepositorypermissions::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGithubRepositorypermissions::asJsonObject() {
    QJsonObject obj;
    if(m_admin_isSet){
        obj.insert("admin", QJsonValue(admin));
    }
    if(m_push_isSet){
        obj.insert("push", QJsonValue(push));
    }
    if(m_pull_isSet){
        obj.insert("pull", QJsonValue(pull));
    }
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }

    return obj;
}

bool
OAIGithubRepositorypermissions::isAdmin() {
    return admin;
}
void
OAIGithubRepositorypermissions::setAdmin(bool admin) {
    this->admin = admin;
    this->m_admin_isSet = true;
}

bool
OAIGithubRepositorypermissions::isPush() {
    return push;
}
void
OAIGithubRepositorypermissions::setPush(bool push) {
    this->push = push;
    this->m_push_isSet = true;
}

bool
OAIGithubRepositorypermissions::isPull() {
    return pull;
}
void
OAIGithubRepositorypermissions::setPull(bool pull) {
    this->pull = pull;
    this->m_pull_isSet = true;
}

QString*
OAIGithubRepositorypermissions::getClass() {
    return _class;
}
void
OAIGithubRepositorypermissions::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}


bool
OAIGithubRepositorypermissions::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_admin_isSet){ isObjectUpdated = true; break;}
        if(m_push_isSet){ isObjectUpdated = true; break;}
        if(m_pull_isSet){ isObjectUpdated = true; break;}
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

