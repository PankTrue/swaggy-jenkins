/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIListView.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIListView::OAIListView(QString json) {
    init();
    this->fromJson(json);
}

OAIListView::OAIListView() {
    init();
}

OAIListView::~OAIListView() {
    this->cleanup();
}

void
OAIListView::init() {
    _class = new QString("");
    m__class_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    jobs = new QList<OAIFreeStyleProject*>();
    m_jobs_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    url = new QString("");
    m_url_isSet = false;
}

void
OAIListView::cleanup() {
    if(_class != nullptr) { 
        delete _class;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(jobs != nullptr) { 
        auto arr = jobs;
        for(auto o: *arr) { 
            delete o;
        }
        delete jobs;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(url != nullptr) { 
        delete url;
    }
}

OAIListView*
OAIListView::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIListView::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&jobs, pJson["jobs"], "QList", "OAIFreeStyleProject");
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&url, pJson["url"], "QString", "QString");
    
}

QString
OAIListView::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIListView::asJsonObject() {
    QJsonObject obj;
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(jobs->size() > 0){
        toJsonArray((QList<void*>*)jobs, obj, "jobs", "OAIFreeStyleProject");
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(url != nullptr && *url != QString("")){
        toJsonValue(QString("url"), url, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIListView::getClass() {
    return _class;
}
void
OAIListView::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

QString*
OAIListView::getDescription() {
    return description;
}
void
OAIListView::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QList<OAIFreeStyleProject*>*
OAIListView::getJobs() {
    return jobs;
}
void
OAIListView::setJobs(QList<OAIFreeStyleProject*>* jobs) {
    this->jobs = jobs;
    this->m_jobs_isSet = true;
}

QString*
OAIListView::getName() {
    return name;
}
void
OAIListView::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIListView::getUrl() {
    return url;
}
void
OAIListView::setUrl(QString* url) {
    this->url = url;
    this->m_url_isSet = true;
}


bool
OAIListView::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(jobs->size() > 0){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(url != nullptr && *url != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

