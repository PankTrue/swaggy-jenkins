/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIPipelineRunNode.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIPipelineRunNode::OAIPipelineRunNode(QString json) {
    init();
    this->fromJson(json);
}

OAIPipelineRunNode::OAIPipelineRunNode() {
    init();
}

OAIPipelineRunNode::~OAIPipelineRunNode() {
    this->cleanup();
}

void
OAIPipelineRunNode::init() {
    _class = new QString("");
    m__class_isSet = false;
    display_name = new QString("");
    m_display_name_isSet = false;
    duration_in_millis = 0;
    m_duration_in_millis_isSet = false;
    edges = new QList<OAIPipelineRunNodeedges*>();
    m_edges_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    result = new QString("");
    m_result_isSet = false;
    start_time = new QString("");
    m_start_time_isSet = false;
    state = new QString("");
    m_state_isSet = false;
}

void
OAIPipelineRunNode::cleanup() {
    if(_class != nullptr) { 
        delete _class;
    }
    if(display_name != nullptr) { 
        delete display_name;
    }

    if(edges != nullptr) { 
        auto arr = edges;
        for(auto o: *arr) { 
            delete o;
        }
        delete edges;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(result != nullptr) { 
        delete result;
    }
    if(start_time != nullptr) { 
        delete start_time;
    }
    if(state != nullptr) { 
        delete state;
    }
}

OAIPipelineRunNode*
OAIPipelineRunNode::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIPipelineRunNode::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&display_name, pJson["displayName"], "QString", "QString");
    
    ::OpenAPI::setValue(&duration_in_millis, pJson["durationInMillis"], "qint32", "");
    
    
    ::OpenAPI::setValue(&edges, pJson["edges"], "QList", "OAIPipelineRunNodeedges");
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&result, pJson["result"], "QString", "QString");
    
    ::OpenAPI::setValue(&start_time, pJson["startTime"], "QString", "QString");
    
    ::OpenAPI::setValue(&state, pJson["state"], "QString", "QString");
    
}

QString
OAIPipelineRunNode::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIPipelineRunNode::asJsonObject() {
    QJsonObject obj;
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if(display_name != nullptr && *display_name != QString("")){
        toJsonValue(QString("displayName"), display_name, obj, QString("QString"));
    }
    if(m_duration_in_millis_isSet){
        obj.insert("durationInMillis", QJsonValue(duration_in_millis));
    }
    if(edges->size() > 0){
        toJsonArray((QList<void*>*)edges, obj, "edges", "OAIPipelineRunNodeedges");
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(result != nullptr && *result != QString("")){
        toJsonValue(QString("result"), result, obj, QString("QString"));
    }
    if(start_time != nullptr && *start_time != QString("")){
        toJsonValue(QString("startTime"), start_time, obj, QString("QString"));
    }
    if(state != nullptr && *state != QString("")){
        toJsonValue(QString("state"), state, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIPipelineRunNode::getClass() {
    return _class;
}
void
OAIPipelineRunNode::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

QString*
OAIPipelineRunNode::getDisplayName() {
    return display_name;
}
void
OAIPipelineRunNode::setDisplayName(QString* display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

qint32
OAIPipelineRunNode::getDurationInMillis() {
    return duration_in_millis;
}
void
OAIPipelineRunNode::setDurationInMillis(qint32 duration_in_millis) {
    this->duration_in_millis = duration_in_millis;
    this->m_duration_in_millis_isSet = true;
}

QList<OAIPipelineRunNodeedges*>*
OAIPipelineRunNode::getEdges() {
    return edges;
}
void
OAIPipelineRunNode::setEdges(QList<OAIPipelineRunNodeedges*>* edges) {
    this->edges = edges;
    this->m_edges_isSet = true;
}

QString*
OAIPipelineRunNode::getId() {
    return id;
}
void
OAIPipelineRunNode::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIPipelineRunNode::getResult() {
    return result;
}
void
OAIPipelineRunNode::setResult(QString* result) {
    this->result = result;
    this->m_result_isSet = true;
}

QString*
OAIPipelineRunNode::getStartTime() {
    return start_time;
}
void
OAIPipelineRunNode::setStartTime(QString* start_time) {
    this->start_time = start_time;
    this->m_start_time_isSet = true;
}

QString*
OAIPipelineRunNode::getState() {
    return state;
}
void
OAIPipelineRunNode::setState(QString* state) {
    this->state = state;
    this->m_state_isSet = true;
}


bool
OAIPipelineRunNode::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(display_name != nullptr && *display_name != QString("")){ isObjectUpdated = true; break;}
        if(m_duration_in_millis_isSet){ isObjectUpdated = true; break;}
        if(edges->size() > 0){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(result != nullptr && *result != QString("")){ isObjectUpdated = true; break;}
        if(start_time != nullptr && *start_time != QString("")){ isObjectUpdated = true; break;}
        if(state != nullptr && *state != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

