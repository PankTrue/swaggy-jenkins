/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBranchImpl.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBranchImpl::OAIBranchImpl(QString json) {
    init();
    this->fromJson(json);
}

OAIBranchImpl::OAIBranchImpl() {
    init();
}

OAIBranchImpl::~OAIBranchImpl() {
    this->cleanup();
}

void
OAIBranchImpl::init() {
    _class = new QString("");
    m__class_isSet = false;
    display_name = new QString("");
    m_display_name_isSet = false;
    estimated_duration_in_millis = 0;
    m_estimated_duration_in_millis_isSet = false;
    full_display_name = new QString("");
    m_full_display_name_isSet = false;
    full_name = new QString("");
    m_full_name_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    organization = new QString("");
    m_organization_isSet = false;
    parameters = new QList<OAIStringParameterDefinition*>();
    m_parameters_isSet = false;
    permissions = new OAIBranchImplpermissions();
    m_permissions_isSet = false;
    weather_score = 0;
    m_weather_score_isSet = false;
    pull_request = new QString("");
    m_pull_request_isSet = false;
    _links = new OAIBranchImpllinks();
    m__links_isSet = false;
    latest_run = new OAIPipelineRunImpl();
    m_latest_run_isSet = false;
}

void
OAIBranchImpl::cleanup() {
    if(_class != nullptr) { 
        delete _class;
    }
    if(display_name != nullptr) { 
        delete display_name;
    }

    if(full_display_name != nullptr) { 
        delete full_display_name;
    }
    if(full_name != nullptr) { 
        delete full_name;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(organization != nullptr) { 
        delete organization;
    }
    if(parameters != nullptr) { 
        auto arr = parameters;
        for(auto o: *arr) { 
            delete o;
        }
        delete parameters;
    }
    if(permissions != nullptr) { 
        delete permissions;
    }

    if(pull_request != nullptr) { 
        delete pull_request;
    }
    if(_links != nullptr) { 
        delete _links;
    }
    if(latest_run != nullptr) { 
        delete latest_run;
    }
}

OAIBranchImpl*
OAIBranchImpl::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIBranchImpl::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&display_name, pJson["displayName"], "QString", "QString");
    
    ::OpenAPI::setValue(&estimated_duration_in_millis, pJson["estimatedDurationInMillis"], "qint32", "");
    
    ::OpenAPI::setValue(&full_display_name, pJson["fullDisplayName"], "QString", "QString");
    
    ::OpenAPI::setValue(&full_name, pJson["fullName"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&organization, pJson["organization"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&parameters, pJson["parameters"], "QList", "OAIStringParameterDefinition");
    ::OpenAPI::setValue(&permissions, pJson["permissions"], "OAIBranchImplpermissions", "OAIBranchImplpermissions");
    
    ::OpenAPI::setValue(&weather_score, pJson["weatherScore"], "qint32", "");
    
    ::OpenAPI::setValue(&pull_request, pJson["pullRequest"], "QString", "QString");
    
    ::OpenAPI::setValue(&_links, pJson["_links"], "OAIBranchImpllinks", "OAIBranchImpllinks");
    
    ::OpenAPI::setValue(&latest_run, pJson["latestRun"], "OAIPipelineRunImpl", "OAIPipelineRunImpl");
    
}

QString
OAIBranchImpl::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBranchImpl::asJsonObject() {
    QJsonObject obj;
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if(display_name != nullptr && *display_name != QString("")){
        toJsonValue(QString("displayName"), display_name, obj, QString("QString"));
    }
    if(m_estimated_duration_in_millis_isSet){
        obj.insert("estimatedDurationInMillis", QJsonValue(estimated_duration_in_millis));
    }
    if(full_display_name != nullptr && *full_display_name != QString("")){
        toJsonValue(QString("fullDisplayName"), full_display_name, obj, QString("QString"));
    }
    if(full_name != nullptr && *full_name != QString("")){
        toJsonValue(QString("fullName"), full_name, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(organization != nullptr && *organization != QString("")){
        toJsonValue(QString("organization"), organization, obj, QString("QString"));
    }
    if(parameters->size() > 0){
        toJsonArray((QList<void*>*)parameters, obj, "parameters", "OAIStringParameterDefinition");
    }
    if((permissions != nullptr) && (permissions->isSet())){
        toJsonValue(QString("permissions"), permissions, obj, QString("OAIBranchImplpermissions"));
    }
    if(m_weather_score_isSet){
        obj.insert("weatherScore", QJsonValue(weather_score));
    }
    if(pull_request != nullptr && *pull_request != QString("")){
        toJsonValue(QString("pullRequest"), pull_request, obj, QString("QString"));
    }
    if((_links != nullptr) && (_links->isSet())){
        toJsonValue(QString("_links"), _links, obj, QString("OAIBranchImpllinks"));
    }
    if((latest_run != nullptr) && (latest_run->isSet())){
        toJsonValue(QString("latestRun"), latest_run, obj, QString("OAIPipelineRunImpl"));
    }

    return obj;
}

QString*
OAIBranchImpl::getClass() {
    return _class;
}
void
OAIBranchImpl::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

QString*
OAIBranchImpl::getDisplayName() {
    return display_name;
}
void
OAIBranchImpl::setDisplayName(QString* display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

qint32
OAIBranchImpl::getEstimatedDurationInMillis() {
    return estimated_duration_in_millis;
}
void
OAIBranchImpl::setEstimatedDurationInMillis(qint32 estimated_duration_in_millis) {
    this->estimated_duration_in_millis = estimated_duration_in_millis;
    this->m_estimated_duration_in_millis_isSet = true;
}

QString*
OAIBranchImpl::getFullDisplayName() {
    return full_display_name;
}
void
OAIBranchImpl::setFullDisplayName(QString* full_display_name) {
    this->full_display_name = full_display_name;
    this->m_full_display_name_isSet = true;
}

QString*
OAIBranchImpl::getFullName() {
    return full_name;
}
void
OAIBranchImpl::setFullName(QString* full_name) {
    this->full_name = full_name;
    this->m_full_name_isSet = true;
}

QString*
OAIBranchImpl::getName() {
    return name;
}
void
OAIBranchImpl::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIBranchImpl::getOrganization() {
    return organization;
}
void
OAIBranchImpl::setOrganization(QString* organization) {
    this->organization = organization;
    this->m_organization_isSet = true;
}

QList<OAIStringParameterDefinition*>*
OAIBranchImpl::getParameters() {
    return parameters;
}
void
OAIBranchImpl::setParameters(QList<OAIStringParameterDefinition*>* parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

OAIBranchImplpermissions*
OAIBranchImpl::getPermissions() {
    return permissions;
}
void
OAIBranchImpl::setPermissions(OAIBranchImplpermissions* permissions) {
    this->permissions = permissions;
    this->m_permissions_isSet = true;
}

qint32
OAIBranchImpl::getWeatherScore() {
    return weather_score;
}
void
OAIBranchImpl::setWeatherScore(qint32 weather_score) {
    this->weather_score = weather_score;
    this->m_weather_score_isSet = true;
}

QString*
OAIBranchImpl::getPullRequest() {
    return pull_request;
}
void
OAIBranchImpl::setPullRequest(QString* pull_request) {
    this->pull_request = pull_request;
    this->m_pull_request_isSet = true;
}

OAIBranchImpllinks*
OAIBranchImpl::getLinks() {
    return _links;
}
void
OAIBranchImpl::setLinks(OAIBranchImpllinks* _links) {
    this->_links = _links;
    this->m__links_isSet = true;
}

OAIPipelineRunImpl*
OAIBranchImpl::getLatestRun() {
    return latest_run;
}
void
OAIBranchImpl::setLatestRun(OAIPipelineRunImpl* latest_run) {
    this->latest_run = latest_run;
    this->m_latest_run_isSet = true;
}


bool
OAIBranchImpl::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(display_name != nullptr && *display_name != QString("")){ isObjectUpdated = true; break;}
        if(m_estimated_duration_in_millis_isSet){ isObjectUpdated = true; break;}
        if(full_display_name != nullptr && *full_display_name != QString("")){ isObjectUpdated = true; break;}
        if(full_name != nullptr && *full_name != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(organization != nullptr && *organization != QString("")){ isObjectUpdated = true; break;}
        if(parameters->size() > 0){ isObjectUpdated = true; break;}
        if(permissions != nullptr && permissions->isSet()){ isObjectUpdated = true; break;}
        if(m_weather_score_isSet){ isObjectUpdated = true; break;}
        if(pull_request != nullptr && *pull_request != QString("")){ isObjectUpdated = true; break;}
        if(_links != nullptr && _links->isSet()){ isObjectUpdated = true; break;}
        if(latest_run != nullptr && latest_run->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

