/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHudsonMasterComputermonitorData.h
 *
 * 
 */

#ifndef OAIHudsonMasterComputermonitorData_H_
#define OAIHudsonMasterComputermonitorData_H_

#include <QJsonObject>


#include "OAIOAIClockDifference.h"
#include "OAIOAIDiskSpaceMonitorDescriptorDiskSpace.h"
#include "OAIOAIResponseTimeMonitorData.h"
#include "OAIOAISwapSpaceMonitorMemoryUsage2.h"
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIHudsonMasterComputermonitorData: public OAIObject {
public:
    OAIHudsonMasterComputermonitorData();
    OAIHudsonMasterComputermonitorData(QString json);
    ~OAIHudsonMasterComputermonitorData();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIHudsonMasterComputermonitorData* fromJson(QString jsonString) override;

    OAISwapSpaceMonitorMemoryUsage2* getHudsonNodeMonitorsSwapSpaceMonitor();
    void setHudsonNodeMonitorsSwapSpaceMonitor(OAISwapSpaceMonitorMemoryUsage2* hudson_node_monitors_swap_space_monitor);

    OAIDiskSpaceMonitorDescriptorDiskSpace* getHudsonNodeMonitorsTemporarySpaceMonitor();
    void setHudsonNodeMonitorsTemporarySpaceMonitor(OAIDiskSpaceMonitorDescriptorDiskSpace* hudson_node_monitors_temporary_space_monitor);

    OAIDiskSpaceMonitorDescriptorDiskSpace* getHudsonNodeMonitorsDiskSpaceMonitor();
    void setHudsonNodeMonitorsDiskSpaceMonitor(OAIDiskSpaceMonitorDescriptorDiskSpace* hudson_node_monitors_disk_space_monitor);

    QString* getHudsonNodeMonitorsArchitectureMonitor();
    void setHudsonNodeMonitorsArchitectureMonitor(QString* hudson_node_monitors_architecture_monitor);

    OAIResponseTimeMonitorData* getHudsonNodeMonitorsResponseTimeMonitor();
    void setHudsonNodeMonitorsResponseTimeMonitor(OAIResponseTimeMonitorData* hudson_node_monitors_response_time_monitor);

    OAIClockDifference* getHudsonNodeMonitorsClockMonitor();
    void setHudsonNodeMonitorsClockMonitor(OAIClockDifference* hudson_node_monitors_clock_monitor);

    QString* getClass();
    void setClass(QString* _class);


    virtual bool isSet() override;

private:
    OAISwapSpaceMonitorMemoryUsage2* hudson_node_monitors_swap_space_monitor;
    bool m_hudson_node_monitors_swap_space_monitor_isSet;

    OAIDiskSpaceMonitorDescriptorDiskSpace* hudson_node_monitors_temporary_space_monitor;
    bool m_hudson_node_monitors_temporary_space_monitor_isSet;

    OAIDiskSpaceMonitorDescriptorDiskSpace* hudson_node_monitors_disk_space_monitor;
    bool m_hudson_node_monitors_disk_space_monitor_isSet;

    QString* hudson_node_monitors_architecture_monitor;
    bool m_hudson_node_monitors_architecture_monitor_isSet;

    OAIResponseTimeMonitorData* hudson_node_monitors_response_time_monitor;
    bool m_hudson_node_monitors_response_time_monitor_isSet;

    OAIClockDifference* hudson_node_monitors_clock_monitor;
    bool m_hudson_node_monitors_clock_monitor_isSet;

    QString* _class;
    bool m__class_isSet;

};

}

#endif /* OAIHudsonMasterComputermonitorData_H_ */
