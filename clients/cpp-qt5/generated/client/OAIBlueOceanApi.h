/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIBlueOceanApi_H_
#define _OAI_OAIBlueOceanApi_H_

#include "OAIHttpRequest.h"

#include "OAIOAIBody.h"
#include "OAIOAIBranchImpl.h"
#include "OAIOAIFavoriteImpl.h"
#include "OAIOAIGithubScm.h"
#include "OAIOAIMultibranchPipeline.h"
#include "OAIOAIOrganisation.h"
#include "OAIOAIOrganisations.h"
#include "OAIOAIPipeline.h"
#include "OAIOAIPipelineActivities.h"
#include "OAIOAIPipelineFolderImpl.h"
#include "OAIOAIPipelineImpl.h"
#include "OAIOAIPipelineQueue.h"
#include "OAIOAIPipelineRun.h"
#include "OAIOAIPipelineRunNode.h"
#include "OAIOAIPipelineRunNodeSteps.h"
#include "OAIOAIPipelineRunNodes.h"
#include "OAIOAIPipelineRuns.h"
#include "OAIOAIPipelineStepImpl.h"
#include "OAIOAIPipelines.h"
#include "OAIOAIQueueItemImpl.h"
#include "OAIOAIScmOrganisations.h"
#include "OAIOAIUser.h"
#include "OAIOAIUserFavorites.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIBlueOceanApi: public QObject {
    Q_OBJECT

public:
    OAIBlueOceanApi();
    OAIBlueOceanApi(QString host, QString basePath);
    ~OAIBlueOceanApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void deletePipelineQueueItem(QString* organization, QString* pipeline, QString* queue);
    void getAuthenticatedUser(QString* organization);
    void getClasses(QString* _class);
    void getJsonWebKey(qint32 key);
    void getJsonWebToken(qint32 expiry_time_in_mins, qint32 max_expiry_time_in_mins);
    void getOrganisation(QString* organization);
    void getOrganisations();
    void getPipeline(QString* organization, QString* pipeline);
    void getPipelineActivities(QString* organization, QString* pipeline);
    void getPipelineBranch(QString* organization, QString* pipeline, QString* branch);
    void getPipelineBranchRun(QString* organization, QString* pipeline, QString* branch, QString* run);
    void getPipelineBranches(QString* organization, QString* pipeline);
    void getPipelineFolder(QString* organization, QString* folder);
    void getPipelineFolderPipeline(QString* organization, QString* pipeline, QString* folder);
    void getPipelineQueue(QString* organization, QString* pipeline);
    void getPipelineRun(QString* organization, QString* pipeline, QString* run);
    void getPipelineRunLog(QString* organization, QString* pipeline, QString* run, qint32 start, bool download);
    void getPipelineRunNode(QString* organization, QString* pipeline, QString* run, QString* node);
    void getPipelineRunNodeStep(QString* organization, QString* pipeline, QString* run, QString* node, QString* step);
    void getPipelineRunNodeStepLog(QString* organization, QString* pipeline, QString* run, QString* node, QString* step);
    void getPipelineRunNodeSteps(QString* organization, QString* pipeline, QString* run, QString* node);
    void getPipelineRunNodes(QString* organization, QString* pipeline, QString* run);
    void getPipelineRuns(QString* organization, QString* pipeline);
    void getPipelines(QString* organization);
    void getSCM(QString* organization, QString* scm);
    void getSCMOrganisationRepositories(QString* organization, QString* scm, QString* scm_organisation, QString* credential_id, qint32 page_size, qint32 page_number);
    void getSCMOrganisationRepository(QString* organization, QString* scm, QString* scm_organisation, QString* repository, QString* credential_id);
    void getSCMOrganisations(QString* organization, QString* scm, QString* credential_id);
    void getUser(QString* organization, QString* user);
    void getUserFavorites(QString* user);
    void getUsers(QString* organization);
    void postPipelineRun(QString* organization, QString* pipeline, QString* run);
    void postPipelineRuns(QString* organization, QString* pipeline);
    void putPipelineFavorite(QString* organization, QString* pipeline, OAIBody& oai_body);
    void putPipelineRun(QString* organization, QString* pipeline, QString* run, QString* blocking, qint32 time_out_in_secs);
    void search(QString* q);
    void searchClasses(QString* q);
    
private:
    void deletePipelineQueueItemCallback (OAIHttpRequestWorker * worker);
    void getAuthenticatedUserCallback (OAIHttpRequestWorker * worker);
    void getClassesCallback (OAIHttpRequestWorker * worker);
    void getJsonWebKeyCallback (OAIHttpRequestWorker * worker);
    void getJsonWebTokenCallback (OAIHttpRequestWorker * worker);
    void getOrganisationCallback (OAIHttpRequestWorker * worker);
    void getOrganisationsCallback (OAIHttpRequestWorker * worker);
    void getPipelineCallback (OAIHttpRequestWorker * worker);
    void getPipelineActivitiesCallback (OAIHttpRequestWorker * worker);
    void getPipelineBranchCallback (OAIHttpRequestWorker * worker);
    void getPipelineBranchRunCallback (OAIHttpRequestWorker * worker);
    void getPipelineBranchesCallback (OAIHttpRequestWorker * worker);
    void getPipelineFolderCallback (OAIHttpRequestWorker * worker);
    void getPipelineFolderPipelineCallback (OAIHttpRequestWorker * worker);
    void getPipelineQueueCallback (OAIHttpRequestWorker * worker);
    void getPipelineRunCallback (OAIHttpRequestWorker * worker);
    void getPipelineRunLogCallback (OAIHttpRequestWorker * worker);
    void getPipelineRunNodeCallback (OAIHttpRequestWorker * worker);
    void getPipelineRunNodeStepCallback (OAIHttpRequestWorker * worker);
    void getPipelineRunNodeStepLogCallback (OAIHttpRequestWorker * worker);
    void getPipelineRunNodeStepsCallback (OAIHttpRequestWorker * worker);
    void getPipelineRunNodesCallback (OAIHttpRequestWorker * worker);
    void getPipelineRunsCallback (OAIHttpRequestWorker * worker);
    void getPipelinesCallback (OAIHttpRequestWorker * worker);
    void getSCMCallback (OAIHttpRequestWorker * worker);
    void getSCMOrganisationRepositoriesCallback (OAIHttpRequestWorker * worker);
    void getSCMOrganisationRepositoryCallback (OAIHttpRequestWorker * worker);
    void getSCMOrganisationsCallback (OAIHttpRequestWorker * worker);
    void getUserCallback (OAIHttpRequestWorker * worker);
    void getUserFavoritesCallback (OAIHttpRequestWorker * worker);
    void getUsersCallback (OAIHttpRequestWorker * worker);
    void postPipelineRunCallback (OAIHttpRequestWorker * worker);
    void postPipelineRunsCallback (OAIHttpRequestWorker * worker);
    void putPipelineFavoriteCallback (OAIHttpRequestWorker * worker);
    void putPipelineRunCallback (OAIHttpRequestWorker * worker);
    void searchCallback (OAIHttpRequestWorker * worker);
    void searchClassesCallback (OAIHttpRequestWorker * worker);
    
signals:
    void deletePipelineQueueItemSignal();
    void getAuthenticatedUserSignal(OAIUser* summary);
    void getClassesSignal(QString* summary);
    void getJsonWebKeySignal(QString* summary);
    void getJsonWebTokenSignal(QString* summary);
    void getOrganisationSignal(OAIOrganisation* summary);
    void getOrganisationsSignal(OAIOrganisations* summary);
    void getPipelineSignal(OAIPipeline* summary);
    void getPipelineActivitiesSignal(OAIPipelineActivities* summary);
    void getPipelineBranchSignal(OAIBranchImpl* summary);
    void getPipelineBranchRunSignal(OAIPipelineRun* summary);
    void getPipelineBranchesSignal(OAIMultibranchPipeline* summary);
    void getPipelineFolderSignal(OAIPipelineFolderImpl* summary);
    void getPipelineFolderPipelineSignal(OAIPipelineImpl* summary);
    void getPipelineQueueSignal(OAIPipelineQueue* summary);
    void getPipelineRunSignal(OAIPipelineRun* summary);
    void getPipelineRunLogSignal(QString* summary);
    void getPipelineRunNodeSignal(OAIPipelineRunNode* summary);
    void getPipelineRunNodeStepSignal(OAIPipelineStepImpl* summary);
    void getPipelineRunNodeStepLogSignal(QString* summary);
    void getPipelineRunNodeStepsSignal(OAIPipelineRunNodeSteps* summary);
    void getPipelineRunNodesSignal(OAIPipelineRunNodes* summary);
    void getPipelineRunsSignal(OAIPipelineRuns* summary);
    void getPipelinesSignal(OAIPipelines* summary);
    void getSCMSignal(OAIGithubScm* summary);
    void getSCMOrganisationRepositoriesSignal(OAIScmOrganisations* summary);
    void getSCMOrganisationRepositorySignal(OAIScmOrganisations* summary);
    void getSCMOrganisationsSignal(OAIScmOrganisations* summary);
    void getUserSignal(OAIUser* summary);
    void getUserFavoritesSignal(OAIUserFavorites* summary);
    void getUsersSignal(OAIUser* summary);
    void postPipelineRunSignal(OAIQueueItemImpl* summary);
    void postPipelineRunsSignal(OAIQueueItemImpl* summary);
    void putPipelineFavoriteSignal(OAIFavoriteImpl* summary);
    void putPipelineRunSignal(OAIPipelineRun* summary);
    void searchSignal(QString* summary);
    void searchClassesSignal(QString* summary);
    
    void deletePipelineQueueItemSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getAuthenticatedUserSignalE(OAIUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getClassesSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJsonWebKeySignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJsonWebTokenSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrganisationSignalE(OAIOrganisation* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrganisationsSignalE(OAIOrganisations* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineSignalE(OAIPipeline* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineActivitiesSignalE(OAIPipelineActivities* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchSignalE(OAIBranchImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchRunSignalE(OAIPipelineRun* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchesSignalE(OAIMultibranchPipeline* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineFolderSignalE(OAIPipelineFolderImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineFolderPipelineSignalE(OAIPipelineImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineQueueSignalE(OAIPipelineQueue* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunSignalE(OAIPipelineRun* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunLogSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeSignalE(OAIPipelineRunNode* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepSignalE(OAIPipelineStepImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepLogSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepsSignalE(OAIPipelineRunNodeSteps* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodesSignalE(OAIPipelineRunNodes* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunsSignalE(OAIPipelineRuns* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelinesSignalE(OAIPipelines* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMSignalE(OAIGithubScm* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationRepositoriesSignalE(OAIScmOrganisations* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationRepositorySignalE(OAIScmOrganisations* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationsSignalE(OAIScmOrganisations* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserSignalE(OAIUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserFavoritesSignalE(OAIUserFavorites* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUsersSignalE(OAIUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPipelineRunSignalE(OAIQueueItemImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPipelineRunsSignalE(OAIQueueItemImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putPipelineFavoriteSignalE(OAIFavoriteImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void putPipelineRunSignalE(OAIPipelineRun* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchClassesSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void deletePipelineQueueItemSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAuthenticatedUserSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getClassesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJsonWebKeySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJsonWebTokenSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrganisationSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrganisationsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineActivitiesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchRunSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineFolderSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineFolderPipelineSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineQueueSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunLogSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepLogSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelinesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationRepositoriesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationRepositorySignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserFavoritesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUsersSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPipelineRunSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPipelineRunsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putPipelineFavoriteSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void putPipelineRunSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchClassesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
