/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComputerSet.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComputerSet::OAIComputerSet(QString json) {
    init();
    this->fromJson(json);
}

OAIComputerSet::OAIComputerSet() {
    init();
}

OAIComputerSet::~OAIComputerSet() {
    this->cleanup();
}

void
OAIComputerSet::init() {
    _class = new QString("");
    m__class_isSet = false;
    busy_executors = 0;
    m_busy_executors_isSet = false;
    computer = new QList<OAIHudsonMasterComputer*>();
    m_computer_isSet = false;
    display_name = new QString("");
    m_display_name_isSet = false;
    total_executors = 0;
    m_total_executors_isSet = false;
}

void
OAIComputerSet::cleanup() {
    if(_class != nullptr) { 
        delete _class;
    }

    if(computer != nullptr) { 
        auto arr = computer;
        for(auto o: *arr) { 
            delete o;
        }
        delete computer;
    }
    if(display_name != nullptr) { 
        delete display_name;
    }

}

OAIComputerSet*
OAIComputerSet::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComputerSet::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&busy_executors, pJson["busyExecutors"], "qint32", "");
    
    
    ::OpenAPI::setValue(&computer, pJson["computer"], "QList", "OAIHudsonMasterComputer");
    ::OpenAPI::setValue(&display_name, pJson["displayName"], "QString", "QString");
    
    ::OpenAPI::setValue(&total_executors, pJson["totalExecutors"], "qint32", "");
    
}

QString
OAIComputerSet::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComputerSet::asJsonObject() {
    QJsonObject obj;
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if(m_busy_executors_isSet){
        obj.insert("busyExecutors", QJsonValue(busy_executors));
    }
    if(computer->size() > 0){
        toJsonArray((QList<void*>*)computer, obj, "computer", "OAIHudsonMasterComputer");
    }
    if(display_name != nullptr && *display_name != QString("")){
        toJsonValue(QString("displayName"), display_name, obj, QString("QString"));
    }
    if(m_total_executors_isSet){
        obj.insert("totalExecutors", QJsonValue(total_executors));
    }

    return obj;
}

QString*
OAIComputerSet::getClass() {
    return _class;
}
void
OAIComputerSet::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

qint32
OAIComputerSet::getBusyExecutors() {
    return busy_executors;
}
void
OAIComputerSet::setBusyExecutors(qint32 busy_executors) {
    this->busy_executors = busy_executors;
    this->m_busy_executors_isSet = true;
}

QList<OAIHudsonMasterComputer*>*
OAIComputerSet::getComputer() {
    return computer;
}
void
OAIComputerSet::setComputer(QList<OAIHudsonMasterComputer*>* computer) {
    this->computer = computer;
    this->m_computer_isSet = true;
}

QString*
OAIComputerSet::getDisplayName() {
    return display_name;
}
void
OAIComputerSet::setDisplayName(QString* display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

qint32
OAIComputerSet::getTotalExecutors() {
    return total_executors;
}
void
OAIComputerSet::setTotalExecutors(qint32 total_executors) {
    this->total_executors = total_executors;
    this->m_total_executors_isSet = true;
}


bool
OAIComputerSet::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(m_busy_executors_isSet){ isObjectUpdated = true; break;}
        if(computer->size() > 0){ isObjectUpdated = true; break;}
        if(display_name != nullptr && *display_name != QString("")){ isObjectUpdated = true; break;}
        if(m_total_executors_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

