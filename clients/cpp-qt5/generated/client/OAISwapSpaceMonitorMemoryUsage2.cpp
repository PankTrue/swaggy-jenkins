/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAISwapSpaceMonitorMemoryUsage2.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAISwapSpaceMonitorMemoryUsage2::OAISwapSpaceMonitorMemoryUsage2(QString json) {
    init();
    this->fromJson(json);
}

OAISwapSpaceMonitorMemoryUsage2::OAISwapSpaceMonitorMemoryUsage2() {
    init();
}

OAISwapSpaceMonitorMemoryUsage2::~OAISwapSpaceMonitorMemoryUsage2() {
    this->cleanup();
}

void
OAISwapSpaceMonitorMemoryUsage2::init() {
    _class = new QString("");
    m__class_isSet = false;
    available_physical_memory = 0;
    m_available_physical_memory_isSet = false;
    available_swap_space = 0;
    m_available_swap_space_isSet = false;
    total_physical_memory = 0;
    m_total_physical_memory_isSet = false;
    total_swap_space = 0;
    m_total_swap_space_isSet = false;
}

void
OAISwapSpaceMonitorMemoryUsage2::cleanup() {
    if(_class != nullptr) { 
        delete _class;
    }




}

OAISwapSpaceMonitorMemoryUsage2*
OAISwapSpaceMonitorMemoryUsage2::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAISwapSpaceMonitorMemoryUsage2::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&available_physical_memory, pJson["availablePhysicalMemory"], "qint32", "");
    
    ::OpenAPI::setValue(&available_swap_space, pJson["availableSwapSpace"], "qint32", "");
    
    ::OpenAPI::setValue(&total_physical_memory, pJson["totalPhysicalMemory"], "qint32", "");
    
    ::OpenAPI::setValue(&total_swap_space, pJson["totalSwapSpace"], "qint32", "");
    
}

QString
OAISwapSpaceMonitorMemoryUsage2::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAISwapSpaceMonitorMemoryUsage2::asJsonObject() {
    QJsonObject obj;
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if(m_available_physical_memory_isSet){
        obj.insert("availablePhysicalMemory", QJsonValue(available_physical_memory));
    }
    if(m_available_swap_space_isSet){
        obj.insert("availableSwapSpace", QJsonValue(available_swap_space));
    }
    if(m_total_physical_memory_isSet){
        obj.insert("totalPhysicalMemory", QJsonValue(total_physical_memory));
    }
    if(m_total_swap_space_isSet){
        obj.insert("totalSwapSpace", QJsonValue(total_swap_space));
    }

    return obj;
}

QString*
OAISwapSpaceMonitorMemoryUsage2::getClass() {
    return _class;
}
void
OAISwapSpaceMonitorMemoryUsage2::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

qint32
OAISwapSpaceMonitorMemoryUsage2::getAvailablePhysicalMemory() {
    return available_physical_memory;
}
void
OAISwapSpaceMonitorMemoryUsage2::setAvailablePhysicalMemory(qint32 available_physical_memory) {
    this->available_physical_memory = available_physical_memory;
    this->m_available_physical_memory_isSet = true;
}

qint32
OAISwapSpaceMonitorMemoryUsage2::getAvailableSwapSpace() {
    return available_swap_space;
}
void
OAISwapSpaceMonitorMemoryUsage2::setAvailableSwapSpace(qint32 available_swap_space) {
    this->available_swap_space = available_swap_space;
    this->m_available_swap_space_isSet = true;
}

qint32
OAISwapSpaceMonitorMemoryUsage2::getTotalPhysicalMemory() {
    return total_physical_memory;
}
void
OAISwapSpaceMonitorMemoryUsage2::setTotalPhysicalMemory(qint32 total_physical_memory) {
    this->total_physical_memory = total_physical_memory;
    this->m_total_physical_memory_isSet = true;
}

qint32
OAISwapSpaceMonitorMemoryUsage2::getTotalSwapSpace() {
    return total_swap_space;
}
void
OAISwapSpaceMonitorMemoryUsage2::setTotalSwapSpace(qint32 total_swap_space) {
    this->total_swap_space = total_swap_space;
    this->m_total_swap_space_isSet = true;
}


bool
OAISwapSpaceMonitorMemoryUsage2::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(m_available_physical_memory_isSet){ isObjectUpdated = true; break;}
        if(m_available_swap_space_isSet){ isObjectUpdated = true; break;}
        if(m_total_physical_memory_isSet){ isObjectUpdated = true; break;}
        if(m_total_swap_space_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

