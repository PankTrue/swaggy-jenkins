/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGithubScm.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGithubScm::OAIGithubScm(QString json) {
    init();
    this->fromJson(json);
}

OAIGithubScm::OAIGithubScm() {
    init();
}

OAIGithubScm::~OAIGithubScm() {
    this->cleanup();
}

void
OAIGithubScm::init() {
    _class = new QString("");
    m__class_isSet = false;
    _links = new OAIGithubScmlinks();
    m__links_isSet = false;
    credential_id = new QString("");
    m_credential_id_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    uri = new QString("");
    m_uri_isSet = false;
}

void
OAIGithubScm::cleanup() {
    if(_class != nullptr) { 
        delete _class;
    }
    if(_links != nullptr) { 
        delete _links;
    }
    if(credential_id != nullptr) { 
        delete credential_id;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(uri != nullptr) { 
        delete uri;
    }
}

OAIGithubScm*
OAIGithubScm::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGithubScm::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&_links, pJson["_links"], "OAIGithubScmlinks", "OAIGithubScmlinks");
    
    ::OpenAPI::setValue(&credential_id, pJson["credentialId"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&uri, pJson["uri"], "QString", "QString");
    
}

QString
OAIGithubScm::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGithubScm::asJsonObject() {
    QJsonObject obj;
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if((_links != nullptr) && (_links->isSet())){
        toJsonValue(QString("_links"), _links, obj, QString("OAIGithubScmlinks"));
    }
    if(credential_id != nullptr && *credential_id != QString("")){
        toJsonValue(QString("credentialId"), credential_id, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(uri != nullptr && *uri != QString("")){
        toJsonValue(QString("uri"), uri, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIGithubScm::getClass() {
    return _class;
}
void
OAIGithubScm::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

OAIGithubScmlinks*
OAIGithubScm::getLinks() {
    return _links;
}
void
OAIGithubScm::setLinks(OAIGithubScmlinks* _links) {
    this->_links = _links;
    this->m__links_isSet = true;
}

QString*
OAIGithubScm::getCredentialId() {
    return credential_id;
}
void
OAIGithubScm::setCredentialId(QString* credential_id) {
    this->credential_id = credential_id;
    this->m_credential_id_isSet = true;
}

QString*
OAIGithubScm::getId() {
    return id;
}
void
OAIGithubScm::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIGithubScm::getUri() {
    return uri;
}
void
OAIGithubScm::setUri(QString* uri) {
    this->uri = uri;
    this->m_uri_isSet = true;
}


bool
OAIGithubScm::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(_links != nullptr && _links->isSet()){ isObjectUpdated = true; break;}
        if(credential_id != nullptr && *credential_id != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(uri != nullptr && *uri != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

