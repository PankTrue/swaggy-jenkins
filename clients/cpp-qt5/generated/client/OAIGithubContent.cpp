/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGithubContent.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGithubContent::OAIGithubContent(QString json) {
    init();
    this->fromJson(json);
}

OAIGithubContent::OAIGithubContent() {
    init();
}

OAIGithubContent::~OAIGithubContent() {
    this->cleanup();
}

void
OAIGithubContent::init() {
    name = new QString("");
    m_name_isSet = false;
    sha = new QString("");
    m_sha_isSet = false;
    _class = new QString("");
    m__class_isSet = false;
    repo = new QString("");
    m_repo_isSet = false;
    size = 0;
    m_size_isSet = false;
    owner = new QString("");
    m_owner_isSet = false;
    path = new QString("");
    m_path_isSet = false;
    base64_data = new QString("");
    m_base64_data_isSet = false;
}

void
OAIGithubContent::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(sha != nullptr) { 
        delete sha;
    }
    if(_class != nullptr) { 
        delete _class;
    }
    if(repo != nullptr) { 
        delete repo;
    }

    if(owner != nullptr) { 
        delete owner;
    }
    if(path != nullptr) { 
        delete path;
    }
    if(base64_data != nullptr) { 
        delete base64_data;
    }
}

OAIGithubContent*
OAIGithubContent::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGithubContent::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&sha, pJson["sha"], "QString", "QString");
    
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&repo, pJson["repo"], "QString", "QString");
    
    ::OpenAPI::setValue(&size, pJson["size"], "qint32", "");
    
    ::OpenAPI::setValue(&owner, pJson["owner"], "QString", "QString");
    
    ::OpenAPI::setValue(&path, pJson["path"], "QString", "QString");
    
    ::OpenAPI::setValue(&base64_data, pJson["base64Data"], "QString", "QString");
    
}

QString
OAIGithubContent::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGithubContent::asJsonObject() {
    QJsonObject obj;
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(sha != nullptr && *sha != QString("")){
        toJsonValue(QString("sha"), sha, obj, QString("QString"));
    }
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if(repo != nullptr && *repo != QString("")){
        toJsonValue(QString("repo"), repo, obj, QString("QString"));
    }
    if(m_size_isSet){
        obj.insert("size", QJsonValue(size));
    }
    if(owner != nullptr && *owner != QString("")){
        toJsonValue(QString("owner"), owner, obj, QString("QString"));
    }
    if(path != nullptr && *path != QString("")){
        toJsonValue(QString("path"), path, obj, QString("QString"));
    }
    if(base64_data != nullptr && *base64_data != QString("")){
        toJsonValue(QString("base64Data"), base64_data, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIGithubContent::getName() {
    return name;
}
void
OAIGithubContent::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIGithubContent::getSha() {
    return sha;
}
void
OAIGithubContent::setSha(QString* sha) {
    this->sha = sha;
    this->m_sha_isSet = true;
}

QString*
OAIGithubContent::getClass() {
    return _class;
}
void
OAIGithubContent::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

QString*
OAIGithubContent::getRepo() {
    return repo;
}
void
OAIGithubContent::setRepo(QString* repo) {
    this->repo = repo;
    this->m_repo_isSet = true;
}

qint32
OAIGithubContent::getSize() {
    return size;
}
void
OAIGithubContent::setSize(qint32 size) {
    this->size = size;
    this->m_size_isSet = true;
}

QString*
OAIGithubContent::getOwner() {
    return owner;
}
void
OAIGithubContent::setOwner(QString* owner) {
    this->owner = owner;
    this->m_owner_isSet = true;
}

QString*
OAIGithubContent::getPath() {
    return path;
}
void
OAIGithubContent::setPath(QString* path) {
    this->path = path;
    this->m_path_isSet = true;
}

QString*
OAIGithubContent::getBase64Data() {
    return base64_data;
}
void
OAIGithubContent::setBase64Data(QString* base64_data) {
    this->base64_data = base64_data;
    this->m_base64_data_isSet = true;
}


bool
OAIGithubContent::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(sha != nullptr && *sha != QString("")){ isObjectUpdated = true; break;}
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(repo != nullptr && *repo != QString("")){ isObjectUpdated = true; break;}
        if(m_size_isSet){ isObjectUpdated = true; break;}
        if(owner != nullptr && *owner != QString("")){ isObjectUpdated = true; break;}
        if(path != nullptr && *path != QString("")){ isObjectUpdated = true; break;}
        if(base64_data != nullptr && *base64_data != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

