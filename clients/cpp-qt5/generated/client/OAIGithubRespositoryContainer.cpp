/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGithubRespositoryContainer.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGithubRespositoryContainer::OAIGithubRespositoryContainer(QString json) {
    init();
    this->fromJson(json);
}

OAIGithubRespositoryContainer::OAIGithubRespositoryContainer() {
    init();
}

OAIGithubRespositoryContainer::~OAIGithubRespositoryContainer() {
    this->cleanup();
}

void
OAIGithubRespositoryContainer::init() {
    _class = new QString("");
    m__class_isSet = false;
    _links = new OAIGithubRespositoryContainerlinks();
    m__links_isSet = false;
    repositories = new OAIGithubRepositories();
    m_repositories_isSet = false;
}

void
OAIGithubRespositoryContainer::cleanup() {
    if(_class != nullptr) { 
        delete _class;
    }
    if(_links != nullptr) { 
        delete _links;
    }
    if(repositories != nullptr) { 
        delete repositories;
    }
}

OAIGithubRespositoryContainer*
OAIGithubRespositoryContainer::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGithubRespositoryContainer::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::OpenAPI::setValue(&_links, pJson["_links"], "OAIGithubRespositoryContainerlinks", "OAIGithubRespositoryContainerlinks");
    
    ::OpenAPI::setValue(&repositories, pJson["repositories"], "OAIGithubRepositories", "OAIGithubRepositories");
    
}

QString
OAIGithubRespositoryContainer::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGithubRespositoryContainer::asJsonObject() {
    QJsonObject obj;
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }
    if((_links != nullptr) && (_links->isSet())){
        toJsonValue(QString("_links"), _links, obj, QString("OAIGithubRespositoryContainerlinks"));
    }
    if((repositories != nullptr) && (repositories->isSet())){
        toJsonValue(QString("repositories"), repositories, obj, QString("OAIGithubRepositories"));
    }

    return obj;
}

QString*
OAIGithubRespositoryContainer::getClass() {
    return _class;
}
void
OAIGithubRespositoryContainer::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

OAIGithubRespositoryContainerlinks*
OAIGithubRespositoryContainer::getLinks() {
    return _links;
}
void
OAIGithubRespositoryContainer::setLinks(OAIGithubRespositoryContainerlinks* _links) {
    this->_links = _links;
    this->m__links_isSet = true;
}

OAIGithubRepositories*
OAIGithubRespositoryContainer::getRepositories() {
    return repositories;
}
void
OAIGithubRespositoryContainer::setRepositories(OAIGithubRepositories* repositories) {
    this->repositories = repositories;
    this->m_repositories_isSet = true;
}


bool
OAIGithubRespositoryContainer::isSet(){
    bool isObjectUpdated = false;
    do{
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(_links != nullptr && _links->isSet()){ isObjectUpdated = true; break;}
        if(repositories != nullptr && repositories->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

