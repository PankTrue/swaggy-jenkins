/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIMultibranchPipeline.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIMultibranchPipeline::OAIMultibranchPipeline(QString json) {
    init();
    this->fromJson(json);
}

OAIMultibranchPipeline::OAIMultibranchPipeline() {
    init();
}

OAIMultibranchPipeline::~OAIMultibranchPipeline() {
    this->cleanup();
}

void
OAIMultibranchPipeline::init() {
    display_name = new QString("");
    m_display_name_isSet = false;
    estimated_duration_in_millis = 0;
    m_estimated_duration_in_millis_isSet = false;
    latest_run = new QString("");
    m_latest_run_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    organization = new QString("");
    m_organization_isSet = false;
    weather_score = 0;
    m_weather_score_isSet = false;
    branch_names = new QList<QString*>();
    m_branch_names_isSet = false;
    number_of_failing_branches = 0;
    m_number_of_failing_branches_isSet = false;
    number_of_failing_pull_requests = 0;
    m_number_of_failing_pull_requests_isSet = false;
    number_of_successful_branches = 0;
    m_number_of_successful_branches_isSet = false;
    number_of_successful_pull_requests = 0;
    m_number_of_successful_pull_requests_isSet = false;
    total_number_of_branches = 0;
    m_total_number_of_branches_isSet = false;
    total_number_of_pull_requests = 0;
    m_total_number_of_pull_requests_isSet = false;
    _class = new QString("");
    m__class_isSet = false;
}

void
OAIMultibranchPipeline::cleanup() {
    if(display_name != nullptr) { 
        delete display_name;
    }

    if(latest_run != nullptr) { 
        delete latest_run;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(organization != nullptr) { 
        delete organization;
    }

    if(branch_names != nullptr) { 
        auto arr = branch_names;
        for(auto o: *arr) { 
            delete o;
        }
        delete branch_names;
    }






    if(_class != nullptr) { 
        delete _class;
    }
}

OAIMultibranchPipeline*
OAIMultibranchPipeline::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIMultibranchPipeline::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&display_name, pJson["displayName"], "QString", "QString");
    
    ::OpenAPI::setValue(&estimated_duration_in_millis, pJson["estimatedDurationInMillis"], "qint32", "");
    
    ::OpenAPI::setValue(&latest_run, pJson["latestRun"], "QString", "QString");
    
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&organization, pJson["organization"], "QString", "QString");
    
    ::OpenAPI::setValue(&weather_score, pJson["weatherScore"], "qint32", "");
    
    
    ::OpenAPI::setValue(&branch_names, pJson["branchNames"], "QList", "QString");
    ::OpenAPI::setValue(&number_of_failing_branches, pJson["numberOfFailingBranches"], "qint32", "");
    
    ::OpenAPI::setValue(&number_of_failing_pull_requests, pJson["numberOfFailingPullRequests"], "qint32", "");
    
    ::OpenAPI::setValue(&number_of_successful_branches, pJson["numberOfSuccessfulBranches"], "qint32", "");
    
    ::OpenAPI::setValue(&number_of_successful_pull_requests, pJson["numberOfSuccessfulPullRequests"], "qint32", "");
    
    ::OpenAPI::setValue(&total_number_of_branches, pJson["totalNumberOfBranches"], "qint32", "");
    
    ::OpenAPI::setValue(&total_number_of_pull_requests, pJson["totalNumberOfPullRequests"], "qint32", "");
    
    ::OpenAPI::setValue(&_class, pJson["_class"], "QString", "QString");
    
}

QString
OAIMultibranchPipeline::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIMultibranchPipeline::asJsonObject() {
    QJsonObject obj;
    if(display_name != nullptr && *display_name != QString("")){
        toJsonValue(QString("displayName"), display_name, obj, QString("QString"));
    }
    if(m_estimated_duration_in_millis_isSet){
        obj.insert("estimatedDurationInMillis", QJsonValue(estimated_duration_in_millis));
    }
    if(latest_run != nullptr && *latest_run != QString("")){
        toJsonValue(QString("latestRun"), latest_run, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(organization != nullptr && *organization != QString("")){
        toJsonValue(QString("organization"), organization, obj, QString("QString"));
    }
    if(m_weather_score_isSet){
        obj.insert("weatherScore", QJsonValue(weather_score));
    }
    if(branch_names->size() > 0){
        toJsonArray((QList<void*>*)branch_names, obj, "branchNames", "QString");
    }
    if(m_number_of_failing_branches_isSet){
        obj.insert("numberOfFailingBranches", QJsonValue(number_of_failing_branches));
    }
    if(m_number_of_failing_pull_requests_isSet){
        obj.insert("numberOfFailingPullRequests", QJsonValue(number_of_failing_pull_requests));
    }
    if(m_number_of_successful_branches_isSet){
        obj.insert("numberOfSuccessfulBranches", QJsonValue(number_of_successful_branches));
    }
    if(m_number_of_successful_pull_requests_isSet){
        obj.insert("numberOfSuccessfulPullRequests", QJsonValue(number_of_successful_pull_requests));
    }
    if(m_total_number_of_branches_isSet){
        obj.insert("totalNumberOfBranches", QJsonValue(total_number_of_branches));
    }
    if(m_total_number_of_pull_requests_isSet){
        obj.insert("totalNumberOfPullRequests", QJsonValue(total_number_of_pull_requests));
    }
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("_class"), _class, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIMultibranchPipeline::getDisplayName() {
    return display_name;
}
void
OAIMultibranchPipeline::setDisplayName(QString* display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

qint32
OAIMultibranchPipeline::getEstimatedDurationInMillis() {
    return estimated_duration_in_millis;
}
void
OAIMultibranchPipeline::setEstimatedDurationInMillis(qint32 estimated_duration_in_millis) {
    this->estimated_duration_in_millis = estimated_duration_in_millis;
    this->m_estimated_duration_in_millis_isSet = true;
}

QString*
OAIMultibranchPipeline::getLatestRun() {
    return latest_run;
}
void
OAIMultibranchPipeline::setLatestRun(QString* latest_run) {
    this->latest_run = latest_run;
    this->m_latest_run_isSet = true;
}

QString*
OAIMultibranchPipeline::getName() {
    return name;
}
void
OAIMultibranchPipeline::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIMultibranchPipeline::getOrganization() {
    return organization;
}
void
OAIMultibranchPipeline::setOrganization(QString* organization) {
    this->organization = organization;
    this->m_organization_isSet = true;
}

qint32
OAIMultibranchPipeline::getWeatherScore() {
    return weather_score;
}
void
OAIMultibranchPipeline::setWeatherScore(qint32 weather_score) {
    this->weather_score = weather_score;
    this->m_weather_score_isSet = true;
}

QList<QString*>*
OAIMultibranchPipeline::getBranchNames() {
    return branch_names;
}
void
OAIMultibranchPipeline::setBranchNames(QList<QString*>* branch_names) {
    this->branch_names = branch_names;
    this->m_branch_names_isSet = true;
}

qint32
OAIMultibranchPipeline::getNumberOfFailingBranches() {
    return number_of_failing_branches;
}
void
OAIMultibranchPipeline::setNumberOfFailingBranches(qint32 number_of_failing_branches) {
    this->number_of_failing_branches = number_of_failing_branches;
    this->m_number_of_failing_branches_isSet = true;
}

qint32
OAIMultibranchPipeline::getNumberOfFailingPullRequests() {
    return number_of_failing_pull_requests;
}
void
OAIMultibranchPipeline::setNumberOfFailingPullRequests(qint32 number_of_failing_pull_requests) {
    this->number_of_failing_pull_requests = number_of_failing_pull_requests;
    this->m_number_of_failing_pull_requests_isSet = true;
}

qint32
OAIMultibranchPipeline::getNumberOfSuccessfulBranches() {
    return number_of_successful_branches;
}
void
OAIMultibranchPipeline::setNumberOfSuccessfulBranches(qint32 number_of_successful_branches) {
    this->number_of_successful_branches = number_of_successful_branches;
    this->m_number_of_successful_branches_isSet = true;
}

qint32
OAIMultibranchPipeline::getNumberOfSuccessfulPullRequests() {
    return number_of_successful_pull_requests;
}
void
OAIMultibranchPipeline::setNumberOfSuccessfulPullRequests(qint32 number_of_successful_pull_requests) {
    this->number_of_successful_pull_requests = number_of_successful_pull_requests;
    this->m_number_of_successful_pull_requests_isSet = true;
}

qint32
OAIMultibranchPipeline::getTotalNumberOfBranches() {
    return total_number_of_branches;
}
void
OAIMultibranchPipeline::setTotalNumberOfBranches(qint32 total_number_of_branches) {
    this->total_number_of_branches = total_number_of_branches;
    this->m_total_number_of_branches_isSet = true;
}

qint32
OAIMultibranchPipeline::getTotalNumberOfPullRequests() {
    return total_number_of_pull_requests;
}
void
OAIMultibranchPipeline::setTotalNumberOfPullRequests(qint32 total_number_of_pull_requests) {
    this->total_number_of_pull_requests = total_number_of_pull_requests;
    this->m_total_number_of_pull_requests_isSet = true;
}

QString*
OAIMultibranchPipeline::getClass() {
    return _class;
}
void
OAIMultibranchPipeline::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}


bool
OAIMultibranchPipeline::isSet(){
    bool isObjectUpdated = false;
    do{
        if(display_name != nullptr && *display_name != QString("")){ isObjectUpdated = true; break;}
        if(m_estimated_duration_in_millis_isSet){ isObjectUpdated = true; break;}
        if(latest_run != nullptr && *latest_run != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(organization != nullptr && *organization != QString("")){ isObjectUpdated = true; break;}
        if(m_weather_score_isSet){ isObjectUpdated = true; break;}
        if(branch_names->size() > 0){ isObjectUpdated = true; break;}
        if(m_number_of_failing_branches_isSet){ isObjectUpdated = true; break;}
        if(m_number_of_failing_pull_requests_isSet){ isObjectUpdated = true; break;}
        if(m_number_of_successful_branches_isSet){ isObjectUpdated = true; break;}
        if(m_number_of_successful_pull_requests_isSet){ isObjectUpdated = true; break;}
        if(m_total_number_of_branches_isSet){ isObjectUpdated = true; break;}
        if(m_total_number_of_pull_requests_isSet){ isObjectUpdated = true; break;}
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

