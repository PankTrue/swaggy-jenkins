/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Body;
import org.openapitools.model.BranchImpl;
import org.openapitools.model.FavoriteImpl;
import org.openapitools.model.GithubScm;
import org.openapitools.model.MultibranchPipeline;
import org.openapitools.model.Organisation;
import org.openapitools.model.Organisations;
import org.openapitools.model.Pipeline;
import org.openapitools.model.PipelineActivities;
import org.openapitools.model.PipelineFolderImpl;
import org.openapitools.model.PipelineImpl;
import org.openapitools.model.PipelineQueue;
import org.openapitools.model.PipelineRun;
import org.openapitools.model.PipelineRunNode;
import org.openapitools.model.PipelineRunNodeSteps;
import org.openapitools.model.PipelineRunNodes;
import org.openapitools.model.PipelineRuns;
import org.openapitools.model.PipelineStepImpl;
import org.openapitools.model.Pipelines;
import org.openapitools.model.QueueItemImpl;
import org.openapitools.model.ScmOrganisations;
import org.openapitools.model.User;
import org.openapitools.model.UserFavorites;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-08-21T02:15:19.934Z[GMT]")

@Validated
@Api(value = "blue", description = "the blue API")
public interface BlueApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "deletePipelineQueueItem", notes = "Delete queue item from an organization pipeline queue", authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deleted queue item"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePipelineQueueItem(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the queue item",required=true) @PathVariable("queue") String queue) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getAuthenticatedUser", notes = "Retrieve authenticated user details for an organization", response = User.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved authenticated user details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/user/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getAuthenticatedUser(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"fullName\" : \"fullName\",  \"_class\" : \"_class\",  \"id\" : \"id\",  \"email\" : \"email\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getClasses", notes = "Get a list of class names supported by a given class", response = String.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved class names", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/classes/{class}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> getClasses(@ApiParam(value = "Name of the class",required=true) @PathVariable("class") String propertyClass) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getOrganisation", notes = "Retrieve organization details", response = Organisation.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = Organisation.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Pipeline cannot be found on Jenkins instance") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Organisation> getOrganisation(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"_class\" : \"_class\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getOrganisations", notes = "Retrieve all organizations details", response = Organisations.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipelines details", response = Organisations.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Organisations> getOrganisations() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipeline", notes = "Retrieve pipeline details for an organization", response = Pipeline.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = Pipeline.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Pipeline cannot be found on Jenkins instance") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Pipeline> getPipeline(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"weatherScore\" : 0,  \"latestRun\" : {    \"runSummary\" : \"runSummary\",    \"durationInMillis\" : 5,    \"commitId\" : \"commitId\",    \"type\" : \"type\",    \"pipeline\" : \"pipeline\",    \"result\" : \"result\",    \"organization\" : \"organization\",    \"estimatedDurationInMillis\" : 5,    \"enQueueTime\" : \"enQueueTime\",    \"startTime\" : \"startTime\",    \"endTime\" : \"endTime\",    \"id\" : \"id\",    \"state\" : \"state\",    \"_class\" : \"_class\",    \"artifacts\" : [ {      \"size\" : 1,      \"name\" : \"name\",      \"_class\" : \"_class\",      \"url\" : \"url\"    }, {      \"size\" : 1,      \"name\" : \"name\",      \"_class\" : \"_class\",      \"url\" : \"url\"    } ]  },  \"displayName\" : \"displayName\",  \"organization\" : \"organization\",  \"name\" : \"name\",  \"estimatedDurationInMillis\" : 6,  \"fullName\" : \"fullName\",  \"_class\" : \"_class\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineActivities", notes = "Retrieve all activities details for an organization pipeline", response = PipelineActivities.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved all activities details", response = PipelineActivities.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineActivities> getPipelineActivities(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineBranch", notes = "Retrieve branch details for an organization pipeline", response = BranchImpl.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved branch details", response = BranchImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<BranchImpl> getPipelineBranch(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the branch",required=true) @PathVariable("branch") String branch) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"weatherScore\" : 6,  \"latestRun\" : {    \"runSummary\" : \"runSummary\",    \"_links\" : {      \"nodes\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      },      \"log\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      },      \"self\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      },      \"_class\" : \"_class\",      \"actions\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      },      \"steps\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      }    },    \"durationInMillis\" : 1,    \"commitId\" : \"commitId\",    \"type\" : \"type\",    \"pipeline\" : \"pipeline\",    \"result\" : \"result\",    \"organization\" : \"organization\",    \"enQueueTime\" : \"enQueueTime\",    \"estimatedDurationInMillis\" : 5,    \"startTime\" : \"startTime\",    \"_class\" : \"_class\",    \"endTime\" : \"endTime\",    \"id\" : \"id\",    \"state\" : \"state\"  },  \"_links\" : {    \"self\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"_class\" : \"_class\",    \"actions\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"runs\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"queue\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    }  },  \"displayName\" : \"displayName\",  \"fullDisplayName\" : \"fullDisplayName\",  \"fullName\" : \"fullName\",  \"pullRequest\" : \"pullRequest\",  \"permissions\" : {    \"read\" : true,    \"stop\" : true,    \"start\" : true,    \"create\" : true,    \"_class\" : \"_class\"  },  \"organization\" : \"organization\",  \"estimatedDurationInMillis\" : 0,  \"name\" : \"name\",  \"_class\" : \"_class\",  \"parameters\" : [ {    \"name\" : \"name\",    \"description\" : \"description\",    \"_class\" : \"_class\",    \"type\" : \"type\",    \"defaultParameterValue\" : {      \"name\" : \"name\",      \"_class\" : \"_class\",      \"value\" : \"value\"    }  }, {    \"name\" : \"name\",    \"description\" : \"description\",    \"_class\" : \"_class\",    \"type\" : \"type\",    \"defaultParameterValue\" : {      \"name\" : \"name\",      \"_class\" : \"_class\",      \"value\" : \"value\"    }  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineBranchRun", notes = "Retrieve branch run details for an organization pipeline", response = PipelineRun.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run details", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineRun> getPipelineBranchRun(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the branch",required=true) @PathVariable("branch") String branch,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"runSummary\" : \"runSummary\",  \"durationInMillis\" : 6,  \"commitId\" : \"commitId\",  \"type\" : \"type\",  \"pipeline\" : \"pipeline\",  \"result\" : \"result\",  \"organization\" : \"organization\",  \"estimatedDurationInMillis\" : 1,  \"enQueueTime\" : \"enQueueTime\",  \"startTime\" : \"startTime\",  \"_class\" : \"_class\",  \"endTime\" : \"endTime\",  \"id\" : \"id\",  \"state\" : \"state\",  \"artifacts\" : [ {    \"size\" : 0,    \"name\" : \"name\",    \"_class\" : \"_class\",    \"url\" : \"url\"  }, {    \"size\" : 0,    \"name\" : \"name\",    \"_class\" : \"_class\",    \"url\" : \"url\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineBranches", notes = "Retrieve all branches details for an organization pipeline", response = MultibranchPipeline.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved all branches details", response = MultibranchPipeline.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<MultibranchPipeline> getPipelineBranches(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"weatherScore\" : 6,  \"latestRun\" : \"latestRun\",  \"displayName\" : \"displayName\",  \"totalNumberOfPullRequests\" : 9,  \"numberOfFailingPullRequests\" : 5,  \"branchNames\" : [ \"branchNames\", \"branchNames\" ],  \"organization\" : \"organization\",  \"totalNumberOfBranches\" : 7,  \"estimatedDurationInMillis\" : 0,  \"name\" : \"name\",  \"numberOfSuccessfulPullRequests\" : 2,  \"numberOfSuccessfulBranches\" : 5,  \"numberOfFailingBranches\" : 1,  \"_class\" : \"_class\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineFolder", notes = "Retrieve pipeline folder for an organization", response = PipelineFolderImpl.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved folder details", response = PipelineFolderImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{folder}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineFolderImpl> getPipelineFolder(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the folder",required=true) @PathVariable("folder") String folder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"numberOfPipelines\" : 6,  \"displayName\" : \"displayName\",  \"numberOfFolders\" : 0,  \"organization\" : \"organization\",  \"name\" : \"name\",  \"fullName\" : \"fullName\",  \"_class\" : \"_class\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineFolderPipeline", notes = "Retrieve pipeline details for an organization folder", response = PipelineImpl.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = PipelineImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineImpl> getPipelineFolderPipeline(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the folder",required=true) @PathVariable("folder") String folder) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"weatherScore\" : 6,  \"latestRun\" : \"latestRun\",  \"_links\" : {    \"self\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"_class\" : \"_class\",    \"runs\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"actions\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"queue\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    }  },  \"displayName\" : \"displayName\",  \"organization\" : \"organization\",  \"estimatedDurationInMillis\" : 0,  \"name\" : \"name\",  \"fullName\" : \"fullName\",  \"_class\" : \"_class\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineQueue", notes = "Retrieve queue details for an organization pipeline", response = PipelineQueue.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved queue details", response = PipelineQueue.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineQueue> getPipelineQueue(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineRun", notes = "Retrieve run details for an organization pipeline", response = PipelineRun.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run details", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineRun> getPipelineRun(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"runSummary\" : \"runSummary\",  \"durationInMillis\" : 6,  \"commitId\" : \"commitId\",  \"type\" : \"type\",  \"pipeline\" : \"pipeline\",  \"result\" : \"result\",  \"organization\" : \"organization\",  \"estimatedDurationInMillis\" : 1,  \"enQueueTime\" : \"enQueueTime\",  \"startTime\" : \"startTime\",  \"_class\" : \"_class\",  \"endTime\" : \"endTime\",  \"id\" : \"id\",  \"state\" : \"state\",  \"artifacts\" : [ {    \"size\" : 0,    \"name\" : \"name\",    \"_class\" : \"_class\",    \"url\" : \"url\"  }, {    \"size\" : 0,    \"name\" : \"name\",    \"_class\" : \"_class\",    \"url\" : \"url\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineRunLog", notes = "Get log for a pipeline run", response = String.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline run log", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> getPipelineRunLog(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run,@ApiParam(value = "Start position of the log") @Valid @RequestParam(value = "start", required = false) Integer start,@ApiParam(value = "Set to true in order to download the file, otherwise it's passed as a response body") @Valid @RequestParam(value = "download", required = false) Boolean download) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineRunNode", notes = "Retrieve run node details for an organization pipeline", response = PipelineRunNode.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run node details", response = PipelineRunNode.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineRunNode> getPipelineRunNode(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run,@ApiParam(value = "Name of the node",required=true) @PathVariable("node") String node) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"result\" : \"result\",  \"durationInMillis\" : 0,  \"displayName\" : \"displayName\",  \"edges\" : [ {    \"id\" : \"id\",    \"_class\" : \"_class\"  }, {    \"id\" : \"id\",    \"_class\" : \"_class\"  } ],  \"startTime\" : \"startTime\",  \"_class\" : \"_class\",  \"id\" : \"id\",  \"state\" : \"state\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineRunNodeStep", notes = "Retrieve run node details for an organization pipeline", response = PipelineStepImpl.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run node step details", response = PipelineStepImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineStepImpl> getPipelineRunNodeStep(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run,@ApiParam(value = "Name of the node",required=true) @PathVariable("node") String node,@ApiParam(value = "Name of the step",required=true) @PathVariable("step") String step) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"result\" : \"result\",  \"input\" : {    \"submitter\" : \"submitter\",    \"_links\" : {      \"self\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      },      \"_class\" : \"_class\"    },    \"_class\" : \"_class\",    \"id\" : \"id\",    \"message\" : \"message\",    \"ok\" : \"ok\",    \"parameters\" : [ {      \"name\" : \"name\",      \"description\" : \"description\",      \"_class\" : \"_class\",      \"type\" : \"type\",      \"defaultParameterValue\" : {        \"name\" : \"name\",        \"_class\" : \"_class\",        \"value\" : \"value\"      }    }, {      \"name\" : \"name\",      \"description\" : \"description\",      \"_class\" : \"_class\",      \"type\" : \"type\",      \"defaultParameterValue\" : {        \"name\" : \"name\",        \"_class\" : \"_class\",        \"value\" : \"value\"      }    } ]  },  \"_links\" : {    \"self\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"_class\" : \"_class\",    \"actions\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    }  },  \"durationInMillis\" : 0,  \"displayName\" : \"displayName\",  \"startTime\" : \"startTime\",  \"_class\" : \"_class\",  \"id\" : \"id\",  \"state\" : \"state\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineRunNodeStepLog", notes = "Get log for a pipeline run node step", response = String.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline run node step log", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> getPipelineRunNodeStepLog(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run,@ApiParam(value = "Name of the node",required=true) @PathVariable("node") String node,@ApiParam(value = "Name of the step",required=true) @PathVariable("step") String step) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineRunNodeSteps", notes = "Retrieve run node steps details for an organization pipeline", response = PipelineRunNodeSteps.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run node steps details", response = PipelineRunNodeSteps.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineRunNodeSteps> getPipelineRunNodeSteps(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run,@ApiParam(value = "Name of the node",required=true) @PathVariable("node") String node) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineRunNodes", notes = "Retrieve run nodes details for an organization pipeline", response = PipelineRunNodes.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run nodes details", response = PipelineRunNodes.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineRunNodes> getPipelineRunNodes(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelineRuns", notes = "Retrieve all runs details for an organization pipeline", response = PipelineRuns.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved runs details", response = PipelineRuns.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PipelineRuns> getPipelineRuns(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getPipelines", notes = "Retrieve all pipelines details for an organization", response = Pipelines.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipelines details", response = Pipelines.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Pipelines> getPipelines(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getSCM", notes = "Retrieve SCM details for an organization", response = GithubScm.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved SCM details", response = GithubScm.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/scm/{scm}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<GithubScm> getSCM(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of SCM",required=true) @PathVariable("scm") String scm) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"_links\" : {    \"self\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"_class\" : \"_class\"  },  \"credentialId\" : \"credentialId\",  \"_class\" : \"_class\",  \"id\" : \"id\",  \"uri\" : \"uri\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getSCMOrganisationRepositories", notes = "Retrieve SCM organization repositories details for an organization", response = ScmOrganisations.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organization repositories details", response = ScmOrganisations.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ScmOrganisations> getSCMOrganisationRepositories(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of SCM",required=true) @PathVariable("scm") String scm,@ApiParam(value = "Name of the SCM organization",required=true) @PathVariable("scmOrganisation") String scmOrganisation,@ApiParam(value = "Credential ID") @Valid @RequestParam(value = "credentialId", required = false) String credentialId,@ApiParam(value = "Number of items in a page") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Page number") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getSCMOrganisationRepository", notes = "Retrieve SCM organization repository details for an organization", response = ScmOrganisations.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organizations details", response = ScmOrganisations.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ScmOrganisations> getSCMOrganisationRepository(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of SCM",required=true) @PathVariable("scm") String scm,@ApiParam(value = "Name of the SCM organization",required=true) @PathVariable("scmOrganisation") String scmOrganisation,@ApiParam(value = "Name of the SCM repository",required=true) @PathVariable("repository") String repository,@ApiParam(value = "Credential ID") @Valid @RequestParam(value = "credentialId", required = false) String credentialId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getSCMOrganisations", notes = "Retrieve SCM organizations details for an organization", response = ScmOrganisations.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organizations details", response = ScmOrganisations.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ScmOrganisations> getSCMOrganisations(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of SCM",required=true) @PathVariable("scm") String scm,@ApiParam(value = "Credential ID") @Valid @RequestParam(value = "credentialId", required = false) String credentialId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getUser", notes = "Retrieve user details for an organization", response = User.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved users details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/users/{user}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getUser(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the user",required=true) @PathVariable("user") String user) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"fullName\" : \"fullName\",  \"_class\" : \"_class\",  \"id\" : \"id\",  \"email\" : \"email\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getUserFavorites", notes = "Retrieve user favorites details for an organization", response = UserFavorites.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved users favorites details", response = UserFavorites.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/users/{user}/favorites",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserFavorites> getUserFavorites(@ApiParam(value = "Name of the user",required=true) @PathVariable("user") String user) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getUsers", notes = "Retrieve users details for an organization", response = User.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved users details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/users/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getUsers(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"name\" : \"name\",  \"fullName\" : \"fullName\",  \"_class\" : \"_class\",  \"id\" : \"id\",  \"email\" : \"email\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postPipelineRun", notes = "Replay an organization pipeline run", response = QueueItemImpl.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully replayed a pipeline run", response = QueueItemImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<QueueItemImpl> postPipelineRun(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"pipeline\" : \"pipeline\",  \"expectedBuildNumber\" : 0,  \"queuedTime\" : 6,  \"_class\" : \"_class\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "postPipelineRuns", notes = "Start a build for an organization pipeline", response = QueueItemImpl.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully started a build", response = QueueItemImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<QueueItemImpl> postPipelineRuns(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"pipeline\" : \"pipeline\",  \"expectedBuildNumber\" : 0,  \"queuedTime\" : 6,  \"_class\" : \"_class\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "putPipelineFavorite", notes = "Favorite/unfavorite a pipeline", response = FavoriteImpl.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully favorited/unfavorited a pipeline", response = FavoriteImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<FavoriteImpl> putPipelineFavorite(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Set JSON string body to {"favorite": true} to favorite, set value to false to unfavorite" ,required=true )  @Valid @RequestBody Body body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"item\" : {    \"weatherScore\" : 6,    \"latestRun\" : \"latestRun\",    \"_links\" : {      \"self\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      },      \"_class\" : \"_class\",      \"runs\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      },      \"actions\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      },      \"queue\" : {        \"_class\" : \"_class\",        \"href\" : \"href\"      }    },    \"displayName\" : \"displayName\",    \"organization\" : \"organization\",    \"estimatedDurationInMillis\" : 0,    \"name\" : \"name\",    \"fullName\" : \"fullName\",    \"_class\" : \"_class\"  },  \"_links\" : {    \"self\" : {      \"_class\" : \"_class\",      \"href\" : \"href\"    },    \"_class\" : \"_class\"  },  \"_class\" : \"_class\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "putPipelineRun", notes = "Stop a build of an organization pipeline", response = PipelineRun.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully stopped a build", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<PipelineRun> putPipelineRun(@ApiParam(value = "Name of the organization",required=true) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true) @PathVariable("run") String run,@ApiParam(value = "Set to true to make blocking stop, default: false") @Valid @RequestParam(value = "blocking", required = false) String blocking,@ApiParam(value = "Timeout in seconds, default: 10 seconds") @Valid @RequestParam(value = "timeOutInSecs", required = false) Integer timeOutInSecs) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"runSummary\" : \"runSummary\",  \"durationInMillis\" : 6,  \"commitId\" : \"commitId\",  \"type\" : \"type\",  \"pipeline\" : \"pipeline\",  \"result\" : \"result\",  \"organization\" : \"organization\",  \"estimatedDurationInMillis\" : 1,  \"enQueueTime\" : \"enQueueTime\",  \"startTime\" : \"startTime\",  \"_class\" : \"_class\",  \"endTime\" : \"endTime\",  \"id\" : \"id\",  \"state\" : \"state\",  \"artifacts\" : [ {    \"size\" : 0,    \"name\" : \"name\",    \"_class\" : \"_class\",    \"url\" : \"url\"  }, {    \"size\" : 0,    \"name\" : \"name\",    \"_class\" : \"_class\",    \"url\" : \"url\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "search", notes = "Search for any resource details", response = String.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved search result", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/search/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> search(@NotNull @ApiParam(value = "Query string", required = true) @Valid @RequestParam(value = "q", required = true) String q) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "searchClasses", notes = "Get classes details", response = String.class, authorizations = {
        @Authorization(value = "jenkins_auth")
    }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved search result", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(value = "/blue/rest/classes/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> searchClasses(@NotNull @ApiParam(value = "Query string containing an array of class names", required = true) @Valid @RequestParam(value = "q", required = true) String q) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
