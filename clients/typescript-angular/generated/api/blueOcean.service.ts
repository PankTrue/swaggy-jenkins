/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Body } from '../model/body';
import { BranchImpl } from '../model/branchImpl';
import { FavoriteImpl } from '../model/favoriteImpl';
import { GithubScm } from '../model/githubScm';
import { MultibranchPipeline } from '../model/multibranchPipeline';
import { Organisation } from '../model/organisation';
import { Organisations } from '../model/organisations';
import { Pipeline } from '../model/pipeline';
import { PipelineActivities } from '../model/pipelineActivities';
import { PipelineFolderImpl } from '../model/pipelineFolderImpl';
import { PipelineImpl } from '../model/pipelineImpl';
import { PipelineQueue } from '../model/pipelineQueue';
import { PipelineRun } from '../model/pipelineRun';
import { PipelineRunNode } from '../model/pipelineRunNode';
import { PipelineRunNodeSteps } from '../model/pipelineRunNodeSteps';
import { PipelineRunNodes } from '../model/pipelineRunNodes';
import { PipelineRuns } from '../model/pipelineRuns';
import { PipelineStepImpl } from '../model/pipelineStepImpl';
import { Pipelines } from '../model/pipelines';
import { QueueItemImpl } from '../model/queueItemImpl';
import { ScmOrganisations } from '../model/scmOrganisations';
import { User } from '../model/user';
import { UserFavorites } from '../model/userFavorites';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BlueOceanService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param queue Name of the queue item
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling deletePipelineQueueItem.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling deletePipelineQueueItem.');
        }
        if (queue === null || queue === undefined) {
            throw new Error('Required parameter queue was null or undefined when calling deletePipelineQueueItem.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/queue/${encodeURIComponent(String(queue))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthenticatedUser(organization: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getAuthenticatedUser(organization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getAuthenticatedUser(organization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getAuthenticatedUser(organization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getAuthenticatedUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/user/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get a list of class names supported by a given class
     * @param _class Name of the class
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClasses(_class: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getClasses(_class: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getClasses(_class: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getClasses(_class: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling getClasses.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/blue/rest/classes/${encodeURIComponent(String(_class))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve JSON Web Key
     * @param key Key ID received as part of JWT header field kid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJsonWebKey(key: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getJsonWebKey(key: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getJsonWebKey(key: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getJsonWebKey(key: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getJsonWebKey.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/jwt-auth/jwks/${encodeURIComponent(String(key))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve JSON Web Token
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expiryTimeInMins !== undefined && expiryTimeInMins !== null) {
            queryParameters = queryParameters.set('expiryTimeInMins', <any>expiryTimeInMins);
        }
        if (maxExpiryTimeInMins !== undefined && maxExpiryTimeInMins !== null) {
            queryParameters = queryParameters.set('maxExpiryTimeInMins', <any>maxExpiryTimeInMins);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/jwt-auth/token`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve organization details
     * @param organization Name of the organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganisation(organization: string, observe?: 'body', reportProgress?: boolean): Observable<Organisation>;
    public getOrganisation(organization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organisation>>;
    public getOrganisation(organization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organisation>>;
    public getOrganisation(organization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getOrganisation.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Organisation>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve all organizations details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganisations(observe?: 'body', reportProgress?: boolean): Observable<Organisations>;
    public getOrganisations(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Organisations>>;
    public getOrganisations(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Organisations>>;
    public getOrganisations(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Organisations>(`${this.configuration.basePath}/blue/rest/organizations/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipeline(organization: string, pipeline: string, observe?: 'body', reportProgress?: boolean): Observable<Pipeline>;
    public getPipeline(organization: string, pipeline: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Pipeline>>;
    public getPipeline(organization: string, pipeline: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Pipeline>>;
    public getPipeline(organization: string, pipeline: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipeline.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipeline.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Pipeline>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineActivities(organization: string, pipeline: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineActivities>;
    public getPipelineActivities(organization: string, pipeline: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineActivities>>;
    public getPipelineActivities(organization: string, pipeline: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineActivities>>;
    public getPipelineActivities(organization: string, pipeline: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineActivities.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineActivities.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineActivities>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/activities`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineBranch(organization: string, pipeline: string, branch: string, observe?: 'body', reportProgress?: boolean): Observable<BranchImpl>;
    public getPipelineBranch(organization: string, pipeline: string, branch: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BranchImpl>>;
    public getPipelineBranch(organization: string, pipeline: string, branch: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BranchImpl>>;
    public getPipelineBranch(organization: string, pipeline: string, branch: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranch.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranch.');
        }
        if (branch === null || branch === undefined) {
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranch.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BranchImpl>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches/${encodeURIComponent(String(branch))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     * @param run Name of the run
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineRun>;
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineRun>>;
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineRun>>;
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranchRun.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranchRun.');
        }
        if (branch === null || branch === undefined) {
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranchRun.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineBranchRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineRun>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches/${encodeURIComponent(String(branch))}/runs/${encodeURIComponent(String(run))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineBranches(organization: string, pipeline: string, observe?: 'body', reportProgress?: boolean): Observable<MultibranchPipeline>;
    public getPipelineBranches(organization: string, pipeline: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MultibranchPipeline>>;
    public getPipelineBranches(organization: string, pipeline: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MultibranchPipeline>>;
    public getPipelineBranches(organization: string, pipeline: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranches.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranches.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MultibranchPipeline>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization
     * @param folder Name of the folder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineFolder(organization: string, folder: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineFolderImpl>;
    public getPipelineFolder(organization: string, folder: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineFolderImpl>>;
    public getPipelineFolder(organization: string, folder: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineFolderImpl>>;
    public getPipelineFolder(organization: string, folder: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineFolder.');
        }
        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolder.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineFolderImpl>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(folder))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param folder Name of the folder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineImpl>;
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineImpl>>;
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineImpl>>;
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineFolderPipeline.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineFolderPipeline.');
        }
        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolderPipeline.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineImpl>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(folder))}/pipelines/${encodeURIComponent(String(pipeline))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineQueue(organization: string, pipeline: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineQueue>;
    public getPipelineQueue(organization: string, pipeline: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineQueue>>;
    public getPipelineQueue(organization: string, pipeline: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineQueue>>;
    public getPipelineQueue(organization: string, pipeline: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineQueue.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineQueue.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineQueue>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/queue`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRun(organization: string, pipeline: string, run: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineRun>;
    public getPipelineRun(organization: string, pipeline: string, run: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineRun>>;
    public getPipelineRun(organization: string, pipeline: string, run: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineRun>>;
    public getPipelineRun(organization: string, pipeline: string, run: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRun.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRun.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineRun>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get log for a pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param start Start position of the log
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunLog.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunLog.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunLog.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (download !== undefined && download !== null) {
            queryParameters = queryParameters.set('download', <any>download);
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/log`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineRunNode>;
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineRunNode>>;
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineRunNode>>;
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNode.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNode.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNode.');
        }
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNode.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineRunNode>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineStepImpl>;
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineStepImpl>>;
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineStepImpl>>;
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeStep.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeStep.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeStep.');
        }
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeStep.');
        }
        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling getPipelineRunNodeStep.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineStepImpl>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps/${encodeURIComponent(String(step))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get log for a pipeline run node step
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeStepLog.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeStepLog.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeStepLog.');
        }
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeStepLog.');
        }
        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps/${encodeURIComponent(String(step))}/log`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineRunNodeSteps>;
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineRunNodeSteps>>;
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineRunNodeSteps>>;
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeSteps.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeSteps.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeSteps.');
        }
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeSteps.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineRunNodeSteps>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineRunNodes>;
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineRunNodes>>;
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineRunNodes>>;
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodes.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodes.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodes.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineRunNodes>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRuns(organization: string, pipeline: string, observe?: 'body', reportProgress?: boolean): Observable<PipelineRuns>;
    public getPipelineRuns(organization: string, pipeline: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineRuns>>;
    public getPipelineRuns(organization: string, pipeline: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineRuns>>;
    public getPipelineRuns(organization: string, pipeline: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRuns.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRuns.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PipelineRuns>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelines(organization: string, observe?: 'body', reportProgress?: boolean): Observable<Pipelines>;
    public getPipelines(organization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Pipelines>>;
    public getPipelines(organization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Pipelines>>;
    public getPipelines(organization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelines.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Pipelines>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve SCM details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSCM(organization: string, scm: string, observe?: 'body', reportProgress?: boolean): Observable<GithubScm>;
    public getSCM(organization: string, scm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GithubScm>>;
    public getSCM(organization: string, scm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GithubScm>>;
    public getSCM(organization: string, scm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCM.');
        }
        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCM.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<GithubScm>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param credentialId Credential ID
     * @param pageSize Number of items in a page
     * @param pageNumber Page number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, observe?: 'body', reportProgress?: boolean): Observable<ScmOrganisations>;
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScmOrganisations>>;
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScmOrganisations>>;
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisationRepositories.');
        }
        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisationRepositories.');
        }
        if (scmOrganisation === null || scmOrganisation === undefined) {
            throw new Error('Required parameter scmOrganisation was null or undefined when calling getSCMOrganisationRepositories.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (credentialId !== undefined && credentialId !== null) {
            queryParameters = queryParameters.set('credentialId', <any>credentialId);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>pageNumber);
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ScmOrganisations>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations/${encodeURIComponent(String(scmOrganisation))}/repositories`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param repository Name of the SCM repository
     * @param credentialId Credential ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, observe?: 'body', reportProgress?: boolean): Observable<ScmOrganisations>;
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScmOrganisations>>;
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScmOrganisations>>;
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisationRepository.');
        }
        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisationRepository.');
        }
        if (scmOrganisation === null || scmOrganisation === undefined) {
            throw new Error('Required parameter scmOrganisation was null or undefined when calling getSCMOrganisationRepository.');
        }
        if (repository === null || repository === undefined) {
            throw new Error('Required parameter repository was null or undefined when calling getSCMOrganisationRepository.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (credentialId !== undefined && credentialId !== null) {
            queryParameters = queryParameters.set('credentialId', <any>credentialId);
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ScmOrganisations>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations/${encodeURIComponent(String(scmOrganisation))}/repositories/${encodeURIComponent(String(repository))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param credentialId Credential ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, observe?: 'body', reportProgress?: boolean): Observable<ScmOrganisations>;
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScmOrganisations>>;
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScmOrganisations>>;
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisations.');
        }
        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (credentialId !== undefined && credentialId !== null) {
            queryParameters = queryParameters.set('credentialId', <any>credentialId);
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ScmOrganisations>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve user details for an organization
     * @param organization Name of the organization
     * @param user Name of the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUser(organization: string, user: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getUser(organization: string, user: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getUser(organization: string, user: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getUser(organization: string, user: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getUser.');
        }
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/users/${encodeURIComponent(String(user))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve user favorites details for an organization
     * @param user Name of the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserFavorites(user: string, observe?: 'body', reportProgress?: boolean): Observable<UserFavorites>;
    public getUserFavorites(user: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserFavorites>>;
    public getUserFavorites(user: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserFavorites>>;
    public getUserFavorites(user: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getUserFavorites.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserFavorites>(`${this.configuration.basePath}/blue/rest/users/${encodeURIComponent(String(user))}/favorites`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Retrieve users details for an organization
     * @param organization Name of the organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(organization: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getUsers(organization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getUsers(organization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getUsers(organization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getUsers.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/users/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Replay an organization pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPipelineRun(organization: string, pipeline: string, run: string, observe?: 'body', reportProgress?: boolean): Observable<QueueItemImpl>;
    public postPipelineRun(organization: string, pipeline: string, run: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QueueItemImpl>>;
    public postPipelineRun(organization: string, pipeline: string, run: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QueueItemImpl>>;
    public postPipelineRun(organization: string, pipeline: string, run: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling postPipelineRun.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling postPipelineRun.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling postPipelineRun.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<QueueItemImpl>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/replay`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Start a build for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPipelineRuns(organization: string, pipeline: string, observe?: 'body', reportProgress?: boolean): Observable<QueueItemImpl>;
    public postPipelineRuns(organization: string, pipeline: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QueueItemImpl>>;
    public postPipelineRuns(organization: string, pipeline: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QueueItemImpl>>;
    public postPipelineRuns(organization: string, pipeline: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling postPipelineRuns.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling postPipelineRuns.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<QueueItemImpl>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param body Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putPipelineFavorite(organization: string, pipeline: string, body: Body, observe?: 'body', reportProgress?: boolean): Observable<FavoriteImpl>;
    public putPipelineFavorite(organization: string, pipeline: string, body: Body, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FavoriteImpl>>;
    public putPipelineFavorite(organization: string, pipeline: string, body: Body, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FavoriteImpl>>;
    public putPipelineFavorite(organization: string, pipeline: string, body: Body, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling putPipelineFavorite.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling putPipelineFavorite.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putPipelineFavorite.');
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<FavoriteImpl>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/favorite`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Stop a build of an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param blocking Set to true to make blocking stop, default: false
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, observe?: 'body', reportProgress?: boolean): Observable<PipelineRun>;
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PipelineRun>>;
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PipelineRun>>;
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling putPipelineRun.');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling putPipelineRun.');
        }
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling putPipelineRun.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (blocking !== undefined && blocking !== null) {
            queryParameters = queryParameters.set('blocking', <any>blocking);
        }
        if (timeOutInSecs !== undefined && timeOutInSecs !== null) {
            queryParameters = queryParameters.set('timeOutInSecs', <any>timeOutInSecs);
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<PipelineRun>(`${this.configuration.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/stop`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Search for any resource details
     * @param q Query string
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public search(q: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public search(q: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public search(q: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public search(q: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling search.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (q !== undefined && q !== null) {
            queryParameters = queryParameters.set('q', <any>q);
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/blue/rest/search/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchClasses(q: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public searchClasses(q: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public searchClasses(q: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public searchClasses(q: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling searchClasses.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (q !== undefined && q !== null) {
            queryParameters = queryParameters.set('q', <any>q);
        }

        let headers = this.defaultHeaders;

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.configuration.basePath}/blue/rest/classes/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
