/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "BaseRemoteAccessApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

BaseRemoteAccessApi::BaseRemoteAccessApi() {
	std::shared_ptr<BaseRemoteAccessApiCrumbIssuerApiJsonResource> spBaseRemoteAccessApiCrumbIssuerApiJsonResource = std::make_shared<BaseRemoteAccessApiCrumbIssuerApiJsonResource>();
	this->publish(spBaseRemoteAccessApiCrumbIssuerApiJsonResource);
	
}

BaseRemoteAccessApi::~BaseRemoteAccessApi() {}

void BaseRemoteAccessApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/");
	
	this->start(settings);
}

void BaseRemoteAccessApi::stopService() {
	this->stop();
}

BaseRemoteAccessApiCrumbIssuerApiJsonResource::BaseRemoteAccessApiCrumbIssuerApiJsonResource()
{
	this->set_path("/crumbIssuer/api/json/");
	this->set_method_handler("GET",
		std::bind(&BaseRemoteAccessApiCrumbIssuerApiJsonResource::GET_method_handler, this,
			std::placeholders::_1));
}

BaseRemoteAccessApiCrumbIssuerApiJsonResource::~BaseRemoteAccessApiCrumbIssuerApiJsonResource()
{
}

void BaseRemoteAccessApiCrumbIssuerApiJsonResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved CSRF protection token", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

