/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "BlueOceanApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

BlueOceanApi::BlueOceanApi() {
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUserResource> spBlueOceanApiBlueRestOrganizationsOrganizationUserResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationUserResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationUserResource);
	
	std::shared_ptr<BlueOceanApiBlueRestClassesClassResource> spBlueOceanApiBlueRestClassesClassResource = std::make_shared<BlueOceanApiBlueRestClassesClassResource>();
	this->publish(spBlueOceanApiBlueRestClassesClassResource);
	
	std::shared_ptr<BlueOceanApiJwt-authJwksKeyResource> spBlueOceanApiJwt-authJwksKeyResource = std::make_shared<BlueOceanApiJwt-authJwksKeyResource>();
	this->publish(spBlueOceanApiJwt-authJwksKeyResource);
	
	std::shared_ptr<BlueOceanApiJwt-authTokenResource> spBlueOceanApiJwt-authTokenResource = std::make_shared<BlueOceanApiJwt-authTokenResource>();
	this->publish(spBlueOceanApiJwt-authTokenResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationResource> spBlueOceanApiBlueRestOrganizationsOrganizationResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsResource> spBlueOceanApiBlueRestOrganizationsResource = std::make_shared<BlueOceanApiBlueRestOrganizationsResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource> spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource);
	
	std::shared_ptr<BlueOceanApiBlueRestUsersUserFavoritesResource> spBlueOceanApiBlueRestUsersUserFavoritesResource = std::make_shared<BlueOceanApiBlueRestUsersUserFavoritesResource>();
	this->publish(spBlueOceanApiBlueRestUsersUserFavoritesResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationUsersResource> spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationUsersResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource);
	
	std::shared_ptr<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource = std::make_shared<BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource>();
	this->publish(spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource);
	
	std::shared_ptr<BlueOceanApiBlueRestSearchResource> spBlueOceanApiBlueRestSearchResource = std::make_shared<BlueOceanApiBlueRestSearchResource>();
	this->publish(spBlueOceanApiBlueRestSearchResource);
	
	std::shared_ptr<BlueOceanApiBlueRestClassesResource> spBlueOceanApiBlueRestClassesResource = std::make_shared<BlueOceanApiBlueRestClassesResource>();
	this->publish(spBlueOceanApiBlueRestClassesResource);
	
}

BlueOceanApi::~BlueOceanApi() {}

void BlueOceanApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/");
	
	this->start(settings);
}

void BlueOceanApi::stopService() {
	this->stop();
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/queue/{queue: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::DELETE_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string queue = request->get_path_parameter("queue", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully deleted queue item", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationUserResource::BlueOceanApiBlueRestOrganizationsOrganizationUserResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/user//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationUserResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationUserResource::~BlueOceanApiBlueRestOrganizationsOrganizationUserResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationUserResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved authenticated user details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestClassesClassResource::BlueOceanApiBlueRestClassesClassResource()
{
	this->set_path("/blue/rest/classes/{class: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestClassesClassResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestClassesClassResource::~BlueOceanApiBlueRestClassesClassResource()
{
}

void BlueOceanApiBlueRestClassesClassResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string _class = request->get_path_parameter("_class", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved class names", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiJwt-authJwksKeyResource::BlueOceanApiJwt-authJwksKeyResource()
{
	this->set_path("/jwt-auth/jwks/{key: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiJwt-authJwksKeyResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiJwt-authJwksKeyResource::~BlueOceanApiJwt-authJwksKeyResource()
{
}

void BlueOceanApiJwt-authJwksKeyResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const int32_t key = request->get_path_parameter("key", 0);
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved JWT token", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiJwt-authTokenResource::BlueOceanApiJwt-authTokenResource()
{
	this->set_path("/jwt-auth/token/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiJwt-authTokenResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiJwt-authTokenResource::~BlueOceanApiJwt-authTokenResource()
{
}

void BlueOceanApiJwt-authTokenResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const int32_t expiryTimeInMins = request->get_query_parameter("expiryTimeInMins", 0);
			const int32_t maxExpiryTimeInMins = request->get_query_parameter("maxExpiryTimeInMins", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved JWT token", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationResource::BlueOceanApiBlueRestOrganizationsOrganizationResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationResource::~BlueOceanApiBlueRestOrganizationsOrganizationResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved pipeline details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, "Pipeline cannot be found on Jenkins instance", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsResource::BlueOceanApiBlueRestOrganizationsResource()
{
	this->set_path("/blue/rest/organizations//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsResource::~BlueOceanApiBlueRestOrganizationsResource()
{
}

void BlueOceanApiBlueRestOrganizationsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved pipelines details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved pipeline details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, "Pipeline cannot be found on Jenkins instance", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/activities/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved all activities details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches/{branch: .*}//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string branch = request->get_path_parameter("branch", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved branch details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches/{branch: .*}/runs/{run: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string branch = request->get_path_parameter("branch", "");
			const std::string run = request->get_path_parameter("run", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved run details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved all branches details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{folder: .*}//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string folder = request->get_path_parameter("folder", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved folder details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{folder: .*}/pipelines/{pipeline: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string folder = request->get_path_parameter("folder", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved pipeline details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/queue/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved queue details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved run details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/log/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			
			// Getting the query params
			const int32_t start = request->get_query_parameter("start", 0);
			const bool download = request->get_query_parameter("download", );

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved pipeline run log", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			const std::string node = request->get_path_parameter("node", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved run node details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps/{step: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			const std::string node = request->get_path_parameter("node", "");
			const std::string step = request->get_path_parameter("step", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved run node step details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps/{step: .*}/log/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			const std::string node = request->get_path_parameter("node", "");
			const std::string step = request->get_path_parameter("step", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved pipeline run node step log", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			const std::string node = request->get_path_parameter("node", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved run node steps details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved run nodes details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::GET_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::POST_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved runs details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			
		
			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				std::shared_ptr<QueueItemImpl> response = NULL;
				session->close(200, "Successfully started a build", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}


BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved pipelines details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::~BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string scm = request->get_path_parameter("scm", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved SCM details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations/{scmOrganisation: .*}/repositories/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string scm = request->get_path_parameter("scm", "");
			const std::string scmOrganisation = request->get_path_parameter("scmOrganisation", "");
			
			// Getting the query params
			const std::string credentialId = request->get_query_parameter("credentialId", "");
			const int32_t pageSize = request->get_query_parameter("pageSize", 0);
			const int32_t pageNumber = request->get_query_parameter("pageNumber", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved SCM organization repositories details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations/{scmOrganisation: .*}/repositories/{repository: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string scm = request->get_path_parameter("scm", "");
			const std::string scmOrganisation = request->get_path_parameter("scmOrganisation", "");
			const std::string repository = request->get_path_parameter("repository", "");
			
			// Getting the query params
			const std::string credentialId = request->get_query_parameter("credentialId", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved SCM organizations details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string scm = request->get_path_parameter("scm", "");
			
			// Getting the query params
			const std::string credentialId = request->get_query_parameter("credentialId", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved SCM organizations details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/users/{user: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::~BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string user = request->get_path_parameter("user", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved users details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestUsersUserFavoritesResource::BlueOceanApiBlueRestUsersUserFavoritesResource()
{
	this->set_path("/blue/rest/users/{user: .*}/favorites/");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestUsersUserFavoritesResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestUsersUserFavoritesResource::~BlueOceanApiBlueRestUsersUserFavoritesResource()
{
}

void BlueOceanApiBlueRestUsersUserFavoritesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string user = request->get_path_parameter("user", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved users favorites details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::BlueOceanApiBlueRestOrganizationsOrganizationUsersResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/users//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::~BlueOceanApiBlueRestOrganizationsOrganizationUsersResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationUsersResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved users details", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/replay/");
	this->set_method_handler("POST",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::POST_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully replayed a pipeline run", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/favorite/");
	this->set_method_handler("PUT",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::PUT_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully favorited/unfavorited a pipeline", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

		});
}



BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource()
{
	this->set_path("/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/stop/");
	this->set_method_handler("PUT",
		std::bind(&BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::PUT_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource()
{
}

void BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::PUT_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string organization = request->get_path_parameter("organization", "");
			const std::string pipeline = request->get_path_parameter("pipeline", "");
			const std::string run = request->get_path_parameter("run", "");
			
			// Getting the query params
			const std::string blocking = request->get_query_parameter("blocking", "");
			const int32_t timeOutInSecs = request->get_query_parameter("timeOutInSecs", 0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully stopped a build", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestSearchResource::BlueOceanApiBlueRestSearchResource()
{
	this->set_path("/blue/rest/search//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestSearchResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestSearchResource::~BlueOceanApiBlueRestSearchResource()
{
}

void BlueOceanApiBlueRestSearchResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string q = request->get_query_parameter("q", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved search result", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}



BlueOceanApiBlueRestClassesResource::BlueOceanApiBlueRestClassesResource()
{
	this->set_path("/blue/rest/classes//");
	this->set_method_handler("GET",
		std::bind(&BlueOceanApiBlueRestClassesResource::GET_method_handler, this,
			std::placeholders::_1));
}

BlueOceanApiBlueRestClassesResource::~BlueOceanApiBlueRestClassesResource()
{
}

void BlueOceanApiBlueRestClassesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string q = request->get_query_parameter("q", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Successfully retrieved search result", { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, "Authentication failed - incorrect username and/or password", { {"Connection", "close"} });
				return;
			}
			if (status_code == 403) {
				session->close(403, "Jenkins requires authentication - please set username and password", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

