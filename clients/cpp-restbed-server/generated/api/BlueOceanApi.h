/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BlueOceanApi.h
 *
 * 
 */

#ifndef BlueOceanApi_H_
#define BlueOceanApi_H_


#include <memory>
#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "Body.h"
#include "BranchImpl.h"
#include "FavoriteImpl.h"
#include "GithubScm.h"
#include "MultibranchPipeline.h"
#include "Organisation.h"
#include "Organisations.h"
#include "Pipeline.h"
#include "PipelineActivities.h"
#include "PipelineFolderImpl.h"
#include "PipelineImpl.h"
#include "PipelineQueue.h"
#include "PipelineRun.h"
#include "PipelineRunNode.h"
#include "PipelineRunNodeSteps.h"
#include "PipelineRunNodes.h"
#include "PipelineRuns.h"
#include "PipelineStepImpl.h"
#include "Pipelines.h"
#include "QueueItemImpl.h"
#include "ScmOrganisations.h"
#include "User.h"
#include "UserFavorites.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  BlueOceanApi: public restbed::Service
{
public:
	BlueOceanApi();
	~BlueOceanApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Delete queue item from an organization pipeline queue
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource();
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve authenticated user details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationUserResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationUserResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationUserResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get a list of class names supported by a given class
/// </remarks>
class  BlueOceanApiBlueRestClassesClassResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestClassesClassResource();
    virtual ~BlueOceanApiBlueRestClassesClassResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve JSON Web Key
/// </remarks>
class  BlueOceanApiJwt-authJwksKeyResource: public restbed::Resource
{
public:
	BlueOceanApiJwt-authJwksKeyResource();
    virtual ~BlueOceanApiJwt-authJwksKeyResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve JSON Web Token
/// </remarks>
class  BlueOceanApiJwt-authTokenResource: public restbed::Resource
{
public:
	BlueOceanApiJwt-authTokenResource();
    virtual ~BlueOceanApiJwt-authTokenResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve organization details
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all organizations details
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsResource();
    virtual ~BlueOceanApiBlueRestOrganizationsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all activities details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve branch details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve branch run details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all branches details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline folder for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline details for an organization folder
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queue details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get log for a pipeline run
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get log for a pipeline run node step
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node steps details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run nodes details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all runs details for an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all pipelines details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organization repositories details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organization repository details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organizations details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve user details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve user favorites details for an organization
/// </remarks>
class  BlueOceanApiBlueRestUsersUserFavoritesResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestUsersUserFavoritesResource();
    virtual ~BlueOceanApiBlueRestUsersUserFavoritesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve users details for an organization
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationUsersResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationUsersResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationUsersResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Replay an organization pipeline run
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Favorite/unfavorite a pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Stop a build of an organization pipeline
/// </remarks>
class  BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource();
    virtual ~BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource();
    void PUT_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Search for any resource details
/// </remarks>
class  BlueOceanApiBlueRestSearchResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestSearchResource();
    virtual ~BlueOceanApiBlueRestSearchResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get classes details
/// </remarks>
class  BlueOceanApiBlueRestClassesResource: public restbed::Resource
{
public:
	BlueOceanApiBlueRestClassesResource();
    virtual ~BlueOceanApiBlueRestClassesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}

#endif /* BlueOceanApi_H_ */

