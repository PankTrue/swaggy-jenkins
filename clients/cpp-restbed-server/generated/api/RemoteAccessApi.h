/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RemoteAccessApi.h
 *
 * 
 */

#ifndef RemoteAccessApi_H_
#define RemoteAccessApi_H_


#include <memory>
#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "ComputerSet.h"
#include "DefaultCrumbIssuer.h"
#include "FreeStyleBuild.h"
#include "FreeStyleProject.h"
#include "Hudson.h"
#include "ListView.h"
#include "Queue.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

class  RemoteAccessApi: public restbed::Service
{
public:
	RemoteAccessApi();
	~RemoteAccessApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve computer details
/// </remarks>
class  RemoteAccessApiComputerApiJsonResource: public restbed::Resource
{
public:
	RemoteAccessApiComputerApiJsonResource();
    virtual ~RemoteAccessApiComputerApiJsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve CSRF protection token
/// </remarks>
class  RemoteAccessApiCrumbIssuerApiJsonResource: public restbed::Resource
{
public:
	RemoteAccessApiCrumbIssuerApiJsonResource();
    virtual ~RemoteAccessApiCrumbIssuerApiJsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve Jenkins details
/// </remarks>
class  RemoteAccessApiApiJsonResource: public restbed::Resource
{
public:
	RemoteAccessApiApiJsonResource();
    virtual ~RemoteAccessApiApiJsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void HEAD_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job details
/// </remarks>
class  RemoteAccessApiJobNameApiJsonResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameApiJsonResource();
    virtual ~RemoteAccessApiJobNameApiJsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job configuration
/// </remarks>
class  RemoteAccessApiJobNameConfig.xmlResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameConfig.xmlResource();
    virtual ~RemoteAccessApiJobNameConfig.xmlResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job&#39;s last build details
/// </remarks>
class  RemoteAccessApiJobNameLastBuildApiJsonResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameLastBuildApiJsonResource();
    virtual ~RemoteAccessApiJobNameLastBuildApiJsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job&#39;s build progressive text output
/// </remarks>
class  RemoteAccessApiJobNameNumberLogTextProgressiveTextResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameNumberLogTextProgressiveTextResource();
    virtual ~RemoteAccessApiJobNameNumberLogTextProgressiveTextResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queue details
/// </remarks>
class  RemoteAccessApiQueueApiJsonResource: public restbed::Resource
{
public:
	RemoteAccessApiQueueApiJsonResource();
    virtual ~RemoteAccessApiQueueApiJsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queued item details
/// </remarks>
class  RemoteAccessApiQueueItemNumberApiJsonResource: public restbed::Resource
{
public:
	RemoteAccessApiQueueItemNumberApiJsonResource();
    virtual ~RemoteAccessApiQueueItemNumberApiJsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve view details
/// </remarks>
class  RemoteAccessApiViewNameApiJsonResource: public restbed::Resource
{
public:
	RemoteAccessApiViewNameApiJsonResource();
    virtual ~RemoteAccessApiViewNameApiJsonResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve view configuration
/// </remarks>
class  RemoteAccessApiViewNameConfig.xmlResource: public restbed::Resource
{
public:
	RemoteAccessApiViewNameConfig.xmlResource();
    virtual ~RemoteAccessApiViewNameConfig.xmlResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Create a new job using job configuration, or copied from an existing job
/// </remarks>
class  RemoteAccessApiCreateItemResource: public restbed::Resource
{
public:
	RemoteAccessApiCreateItemResource();
    virtual ~RemoteAccessApiCreateItemResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Create a new view using view configuration
/// </remarks>
class  RemoteAccessApiCreateViewResource: public restbed::Resource
{
public:
	RemoteAccessApiCreateViewResource();
    virtual ~RemoteAccessApiCreateViewResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Build a job
/// </remarks>
class  RemoteAccessApiJobNameBuildResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameBuildResource();
    virtual ~RemoteAccessApiJobNameBuildResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Delete a job
/// </remarks>
class  RemoteAccessApiJobNameDoDeleteResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameDoDeleteResource();
    virtual ~RemoteAccessApiJobNameDoDeleteResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Disable a job
/// </remarks>
class  RemoteAccessApiJobNameDisableResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameDisableResource();
    virtual ~RemoteAccessApiJobNameDisableResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Enable a job
/// </remarks>
class  RemoteAccessApiJobNameEnableResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameEnableResource();
    virtual ~RemoteAccessApiJobNameEnableResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Stop a job
/// </remarks>
class  RemoteAccessApiJobNameLastBuildStopResource: public restbed::Resource
{
public:
	RemoteAccessApiJobNameLastBuildStopResource();
    virtual ~RemoteAccessApiJobNameLastBuildStopResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}

#endif /* RemoteAccessApi_H_ */

