/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GithubRepositories.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GithubRepositories::GithubRepositories()
{
    m__class = "";
    m_LastPage = 0;
    m_NextPage = 0;
    m_PageSize = 0;
    
}

GithubRepositories::~GithubRepositories()
{
}

std::string GithubRepositories::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("_class", m__class);
	pt.put("LastPage", m_LastPage);
	pt.put("NextPage", m_NextPage);
	pt.put("PageSize", m_PageSize);
	write_json(ss, pt, false);
	return ss.str();
}

void GithubRepositories::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m__class = pt.get("_class", "");
	m_LastPage = pt.get("LastPage", 0);
	m_NextPage = pt.get("NextPage", 0);
	m_PageSize = pt.get("PageSize", 0);
}

std::string GithubRepositories::getClass() const
{
    return m__class;
}
void GithubRepositories::setClass(std::string value)
{
    m__class = value;
}
std::shared_ptr<GithubRepositorieslinks> GithubRepositories::getLinks() const
{
    return m__links;
}
void GithubRepositories::setLinks(std::shared_ptr<GithubRepositorieslinks> value)
{
    m__links = value;
}
std::vector<std::shared_ptr<GithubRepository>> GithubRepositories::getItems() const
{
    return m_Items;
}
void GithubRepositories::setItems(std::vector<std::shared_ptr<GithubRepository>> value)
{
    m_Items = value;
}
int32_t GithubRepositories::getLastPage() const
{
    return m_LastPage;
}
void GithubRepositories::setLastPage(int32_t value)
{
    m_LastPage = value;
}
int32_t GithubRepositories::getNextPage() const
{
    return m_NextPage;
}
void GithubRepositories::setNextPage(int32_t value)
{
    m_NextPage = value;
}
int32_t GithubRepositories::getPageSize() const
{
    return m_PageSize;
}
void GithubRepositories::setPageSize(int32_t value)
{
    m_PageSize = value;
}

}
}
}
}

