/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FreeStyleBuild.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FreeStyleBuild::FreeStyleBuild()
{
    m__class = "";
    m_number = 0;
    m_Url = "";
    m_Building = false;
    m_Description = "";
    m_DisplayName = "";
    m_Duration = 0;
    m_EstimatedDuration = 0;
    m_Executor = "";
    m_FullDisplayName = "";
    m_Id = "";
    m_KeepLog = false;
    m_QueueId = 0;
    m_Result = "";
    m_Timestamp = 0;
    m_BuiltOn = "";
    
}

FreeStyleBuild::~FreeStyleBuild()
{
}

std::string FreeStyleBuild::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("_class", m__class);
	pt.put("number", m_number);
	pt.put("Url", m_Url);
	pt.put("Building", m_Building);
	pt.put("Description", m_Description);
	pt.put("DisplayName", m_DisplayName);
	pt.put("Duration", m_Duration);
	pt.put("EstimatedDuration", m_EstimatedDuration);
	pt.put("Executor", m_Executor);
	pt.put("FullDisplayName", m_FullDisplayName);
	pt.put("Id", m_Id);
	pt.put("KeepLog", m_KeepLog);
	pt.put("QueueId", m_QueueId);
	pt.put("Result", m_Result);
	pt.put("Timestamp", m_Timestamp);
	pt.put("BuiltOn", m_BuiltOn);
	write_json(ss, pt, false);
	return ss.str();
}

void FreeStyleBuild::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m__class = pt.get("_class", "");
	m_number = pt.get("number", 0);
	m_Url = pt.get("Url", "");
	m_Building = pt.get("Building", false);
	m_Description = pt.get("Description", "");
	m_DisplayName = pt.get("DisplayName", "");
	m_Duration = pt.get("Duration", 0);
	m_EstimatedDuration = pt.get("EstimatedDuration", 0);
	m_Executor = pt.get("Executor", "");
	m_FullDisplayName = pt.get("FullDisplayName", "");
	m_Id = pt.get("Id", "");
	m_KeepLog = pt.get("KeepLog", false);
	m_QueueId = pt.get("QueueId", 0);
	m_Result = pt.get("Result", "");
	m_Timestamp = pt.get("Timestamp", 0);
	m_BuiltOn = pt.get("BuiltOn", "");
}

std::string FreeStyleBuild::getClass() const
{
    return m__class;
}
void FreeStyleBuild::setClass(std::string value)
{
    m__class = value;
}
int32_t FreeStyleBuild::getNumber() const
{
    return m_number;
}
void FreeStyleBuild::setNumber(int32_t value)
{
    m_number = value;
}
std::string FreeStyleBuild::getUrl() const
{
    return m_Url;
}
void FreeStyleBuild::setUrl(std::string value)
{
    m_Url = value;
}
std::vector<std::shared_ptr<CauseAction>> FreeStyleBuild::getActions() const
{
    return m_Actions;
}
void FreeStyleBuild::setActions(std::vector<std::shared_ptr<CauseAction>> value)
{
    m_Actions = value;
}
bool FreeStyleBuild::isBuilding() const
{
    return m_Building;
}
void FreeStyleBuild::setBuilding(bool value)
{
    m_Building = value;
}
std::string FreeStyleBuild::getDescription() const
{
    return m_Description;
}
void FreeStyleBuild::setDescription(std::string value)
{
    m_Description = value;
}
std::string FreeStyleBuild::getDisplayName() const
{
    return m_DisplayName;
}
void FreeStyleBuild::setDisplayName(std::string value)
{
    m_DisplayName = value;
}
int32_t FreeStyleBuild::getDuration() const
{
    return m_Duration;
}
void FreeStyleBuild::setDuration(int32_t value)
{
    m_Duration = value;
}
int32_t FreeStyleBuild::getEstimatedDuration() const
{
    return m_EstimatedDuration;
}
void FreeStyleBuild::setEstimatedDuration(int32_t value)
{
    m_EstimatedDuration = value;
}
std::string FreeStyleBuild::getExecutor() const
{
    return m_Executor;
}
void FreeStyleBuild::setExecutor(std::string value)
{
    m_Executor = value;
}
std::string FreeStyleBuild::getFullDisplayName() const
{
    return m_FullDisplayName;
}
void FreeStyleBuild::setFullDisplayName(std::string value)
{
    m_FullDisplayName = value;
}
std::string FreeStyleBuild::getId() const
{
    return m_Id;
}
void FreeStyleBuild::setId(std::string value)
{
    m_Id = value;
}
bool FreeStyleBuild::isKeepLog() const
{
    return m_KeepLog;
}
void FreeStyleBuild::setKeepLog(bool value)
{
    m_KeepLog = value;
}
int32_t FreeStyleBuild::getQueueId() const
{
    return m_QueueId;
}
void FreeStyleBuild::setQueueId(int32_t value)
{
    m_QueueId = value;
}
std::string FreeStyleBuild::getResult() const
{
    return m_Result;
}
void FreeStyleBuild::setResult(std::string value)
{
    m_Result = value;
}
int32_t FreeStyleBuild::getTimestamp() const
{
    return m_Timestamp;
}
void FreeStyleBuild::setTimestamp(int32_t value)
{
    m_Timestamp = value;
}
std::string FreeStyleBuild::getBuiltOn() const
{
    return m_BuiltOn;
}
void FreeStyleBuild::setBuiltOn(std::string value)
{
    m_BuiltOn = value;
}
std::shared_ptr<EmptyChangeLogSet> FreeStyleBuild::getChangeSet() const
{
    return m_ChangeSet;
}
void FreeStyleBuild::setChangeSet(std::shared_ptr<EmptyChangeLogSet> value)
{
    m_ChangeSet = value;
}

}
}
}
}

