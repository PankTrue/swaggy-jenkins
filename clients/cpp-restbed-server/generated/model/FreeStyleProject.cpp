/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FreeStyleProject.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FreeStyleProject::FreeStyleProject()
{
    m__class = "";
    m_Name = "";
    m_Url = "";
    m_Color = "";
    m_Description = "";
    m_DisplayName = "";
    m_DisplayNameOrNull = "";
    m_FullDisplayName = "";
    m_FullName = "";
    m_Buildable = false;
    m_InQueue = false;
    m_KeepDependencies = false;
    m_LastFailedBuild = "";
    m_LastUnstableBuild = "";
    m_LastUnsuccessfulBuild = "";
    m_NextBuildNumber = 0;
    m_QueueItem = "";
    m_ConcurrentBuild = false;
    
}

FreeStyleProject::~FreeStyleProject()
{
}

std::string FreeStyleProject::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("_class", m__class);
	pt.put("Name", m_Name);
	pt.put("Url", m_Url);
	pt.put("Color", m_Color);
	pt.put("Description", m_Description);
	pt.put("DisplayName", m_DisplayName);
	pt.put("DisplayNameOrNull", m_DisplayNameOrNull);
	pt.put("FullDisplayName", m_FullDisplayName);
	pt.put("FullName", m_FullName);
	pt.put("Buildable", m_Buildable);
	pt.put("InQueue", m_InQueue);
	pt.put("KeepDependencies", m_KeepDependencies);
	pt.put("LastFailedBuild", m_LastFailedBuild);
	pt.put("LastUnstableBuild", m_LastUnstableBuild);
	pt.put("LastUnsuccessfulBuild", m_LastUnsuccessfulBuild);
	pt.put("NextBuildNumber", m_NextBuildNumber);
	pt.put("QueueItem", m_QueueItem);
	pt.put("ConcurrentBuild", m_ConcurrentBuild);
	write_json(ss, pt, false);
	return ss.str();
}

void FreeStyleProject::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m__class = pt.get("_class", "");
	m_Name = pt.get("Name", "");
	m_Url = pt.get("Url", "");
	m_Color = pt.get("Color", "");
	m_Description = pt.get("Description", "");
	m_DisplayName = pt.get("DisplayName", "");
	m_DisplayNameOrNull = pt.get("DisplayNameOrNull", "");
	m_FullDisplayName = pt.get("FullDisplayName", "");
	m_FullName = pt.get("FullName", "");
	m_Buildable = pt.get("Buildable", false);
	m_InQueue = pt.get("InQueue", false);
	m_KeepDependencies = pt.get("KeepDependencies", false);
	m_LastFailedBuild = pt.get("LastFailedBuild", "");
	m_LastUnstableBuild = pt.get("LastUnstableBuild", "");
	m_LastUnsuccessfulBuild = pt.get("LastUnsuccessfulBuild", "");
	m_NextBuildNumber = pt.get("NextBuildNumber", 0);
	m_QueueItem = pt.get("QueueItem", "");
	m_ConcurrentBuild = pt.get("ConcurrentBuild", false);
}

std::string FreeStyleProject::getClass() const
{
    return m__class;
}
void FreeStyleProject::setClass(std::string value)
{
    m__class = value;
}
std::string FreeStyleProject::getName() const
{
    return m_Name;
}
void FreeStyleProject::setName(std::string value)
{
    m_Name = value;
}
std::string FreeStyleProject::getUrl() const
{
    return m_Url;
}
void FreeStyleProject::setUrl(std::string value)
{
    m_Url = value;
}
std::string FreeStyleProject::getColor() const
{
    return m_Color;
}
void FreeStyleProject::setColor(std::string value)
{
    m_Color = value;
}
std::vector<std::shared_ptr<FreeStyleProjectactions>> FreeStyleProject::getActions() const
{
    return m_Actions;
}
void FreeStyleProject::setActions(std::vector<std::shared_ptr<FreeStyleProjectactions>> value)
{
    m_Actions = value;
}
std::string FreeStyleProject::getDescription() const
{
    return m_Description;
}
void FreeStyleProject::setDescription(std::string value)
{
    m_Description = value;
}
std::string FreeStyleProject::getDisplayName() const
{
    return m_DisplayName;
}
void FreeStyleProject::setDisplayName(std::string value)
{
    m_DisplayName = value;
}
std::string FreeStyleProject::getDisplayNameOrNull() const
{
    return m_DisplayNameOrNull;
}
void FreeStyleProject::setDisplayNameOrNull(std::string value)
{
    m_DisplayNameOrNull = value;
}
std::string FreeStyleProject::getFullDisplayName() const
{
    return m_FullDisplayName;
}
void FreeStyleProject::setFullDisplayName(std::string value)
{
    m_FullDisplayName = value;
}
std::string FreeStyleProject::getFullName() const
{
    return m_FullName;
}
void FreeStyleProject::setFullName(std::string value)
{
    m_FullName = value;
}
bool FreeStyleProject::isBuildable() const
{
    return m_Buildable;
}
void FreeStyleProject::setBuildable(bool value)
{
    m_Buildable = value;
}
std::vector<std::shared_ptr<FreeStyleBuild>> FreeStyleProject::getBuilds() const
{
    return m_Builds;
}
void FreeStyleProject::setBuilds(std::vector<std::shared_ptr<FreeStyleBuild>> value)
{
    m_Builds = value;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getFirstBuild() const
{
    return m_FirstBuild;
}
void FreeStyleProject::setFirstBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_FirstBuild = value;
}
std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> FreeStyleProject::getHealthReport() const
{
    return m_HealthReport;
}
void FreeStyleProject::setHealthReport(std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> value)
{
    m_HealthReport = value;
}
bool FreeStyleProject::isInQueue() const
{
    return m_InQueue;
}
void FreeStyleProject::setInQueue(bool value)
{
    m_InQueue = value;
}
bool FreeStyleProject::isKeepDependencies() const
{
    return m_KeepDependencies;
}
void FreeStyleProject::setKeepDependencies(bool value)
{
    m_KeepDependencies = value;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastBuild() const
{
    return m_LastBuild;
}
void FreeStyleProject::setLastBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_LastBuild = value;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastCompletedBuild() const
{
    return m_LastCompletedBuild;
}
void FreeStyleProject::setLastCompletedBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_LastCompletedBuild = value;
}
std::string FreeStyleProject::getLastFailedBuild() const
{
    return m_LastFailedBuild;
}
void FreeStyleProject::setLastFailedBuild(std::string value)
{
    m_LastFailedBuild = value;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastStableBuild() const
{
    return m_LastStableBuild;
}
void FreeStyleProject::setLastStableBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_LastStableBuild = value;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastSuccessfulBuild() const
{
    return m_LastSuccessfulBuild;
}
void FreeStyleProject::setLastSuccessfulBuild(std::shared_ptr<FreeStyleBuild> value)
{
    m_LastSuccessfulBuild = value;
}
std::string FreeStyleProject::getLastUnstableBuild() const
{
    return m_LastUnstableBuild;
}
void FreeStyleProject::setLastUnstableBuild(std::string value)
{
    m_LastUnstableBuild = value;
}
std::string FreeStyleProject::getLastUnsuccessfulBuild() const
{
    return m_LastUnsuccessfulBuild;
}
void FreeStyleProject::setLastUnsuccessfulBuild(std::string value)
{
    m_LastUnsuccessfulBuild = value;
}
int32_t FreeStyleProject::getNextBuildNumber() const
{
    return m_NextBuildNumber;
}
void FreeStyleProject::setNextBuildNumber(int32_t value)
{
    m_NextBuildNumber = value;
}
std::string FreeStyleProject::getQueueItem() const
{
    return m_QueueItem;
}
void FreeStyleProject::setQueueItem(std::string value)
{
    m_QueueItem = value;
}
bool FreeStyleProject::isConcurrentBuild() const
{
    return m_ConcurrentBuild;
}
void FreeStyleProject::setConcurrentBuild(bool value)
{
    m_ConcurrentBuild = value;
}
std::shared_ptr<NullSCM> FreeStyleProject::getScm() const
{
    return m_Scm;
}
void FreeStyleProject::setScm(std::shared_ptr<NullSCM> value)
{
    m_Scm = value;
}

}
}
}
}

