/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HudsonMasterComputermonitorData.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

HudsonMasterComputermonitorData::HudsonMasterComputermonitorData()
{
    m_Hudson_node_monitors_ArchitectureMonitor = "";
    m__class = "";
    
}

HudsonMasterComputermonitorData::~HudsonMasterComputermonitorData()
{
}

std::string HudsonMasterComputermonitorData::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("Hudson_node_monitors_ArchitectureMonitor", m_Hudson_node_monitors_ArchitectureMonitor);
	pt.put("_class", m__class);
	write_json(ss, pt, false);
	return ss.str();
}

void HudsonMasterComputermonitorData::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m_Hudson_node_monitors_ArchitectureMonitor = pt.get("Hudson_node_monitors_ArchitectureMonitor", "");
	m__class = pt.get("_class", "");
}

std::shared_ptr<SwapSpaceMonitorMemoryUsage2> HudsonMasterComputermonitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsSwapSpaceMonitor(std::shared_ptr<SwapSpaceMonitorMemoryUsage2> value)
{
    m_Hudson_node_monitors_SwapSpaceMonitor = value;
}
std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> HudsonMasterComputermonitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> value)
{
    m_Hudson_node_monitors_TemporarySpaceMonitor = value;
}
std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> HudsonMasterComputermonitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsDiskSpaceMonitor(std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> value)
{
    m_Hudson_node_monitors_DiskSpaceMonitor = value;
}
std::string HudsonMasterComputermonitorData::getHudsonNodeMonitorsArchitectureMonitor() const
{
    return m_Hudson_node_monitors_ArchitectureMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsArchitectureMonitor(std::string value)
{
    m_Hudson_node_monitors_ArchitectureMonitor = value;
}
std::shared_ptr<ResponseTimeMonitorData> HudsonMasterComputermonitorData::getHudsonNodeMonitorsResponseTimeMonitor() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsResponseTimeMonitor(std::shared_ptr<ResponseTimeMonitorData> value)
{
    m_Hudson_node_monitors_ResponseTimeMonitor = value;
}
std::shared_ptr<ClockDifference> HudsonMasterComputermonitorData::getHudsonNodeMonitorsClockMonitor() const
{
    return m_Hudson_node_monitors_ClockMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsClockMonitor(std::shared_ptr<ClockDifference> value)
{
    m_Hudson_node_monitors_ClockMonitor = value;
}
std::string HudsonMasterComputermonitorData::getClass() const
{
    return m__class;
}
void HudsonMasterComputermonitorData::setClass(std::string value)
{
    m__class = value;
}

}
}
}
}

