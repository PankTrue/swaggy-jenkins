/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MultibranchPipeline.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

MultibranchPipeline::MultibranchPipeline()
{
    m_DisplayName = "";
    m_EstimatedDurationInMillis = 0;
    m_LatestRun = "";
    m_Name = "";
    m_Organization = "";
    m_WeatherScore = 0;
    m_NumberOfFailingBranches = 0;
    m_NumberOfFailingPullRequests = 0;
    m_NumberOfSuccessfulBranches = 0;
    m_NumberOfSuccessfulPullRequests = 0;
    m_TotalNumberOfBranches = 0;
    m_TotalNumberOfPullRequests = 0;
    m__class = "";
    
}

MultibranchPipeline::~MultibranchPipeline()
{
}

std::string MultibranchPipeline::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("DisplayName", m_DisplayName);
	pt.put("EstimatedDurationInMillis", m_EstimatedDurationInMillis);
	pt.put("LatestRun", m_LatestRun);
	pt.put("Name", m_Name);
	pt.put("Organization", m_Organization);
	pt.put("WeatherScore", m_WeatherScore);
	pt.put("NumberOfFailingBranches", m_NumberOfFailingBranches);
	pt.put("NumberOfFailingPullRequests", m_NumberOfFailingPullRequests);
	pt.put("NumberOfSuccessfulBranches", m_NumberOfSuccessfulBranches);
	pt.put("NumberOfSuccessfulPullRequests", m_NumberOfSuccessfulPullRequests);
	pt.put("TotalNumberOfBranches", m_TotalNumberOfBranches);
	pt.put("TotalNumberOfPullRequests", m_TotalNumberOfPullRequests);
	pt.put("_class", m__class);
	write_json(ss, pt, false);
	return ss.str();
}

void MultibranchPipeline::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m_DisplayName = pt.get("DisplayName", "");
	m_EstimatedDurationInMillis = pt.get("EstimatedDurationInMillis", 0);
	m_LatestRun = pt.get("LatestRun", "");
	m_Name = pt.get("Name", "");
	m_Organization = pt.get("Organization", "");
	m_WeatherScore = pt.get("WeatherScore", 0);
	m_NumberOfFailingBranches = pt.get("NumberOfFailingBranches", 0);
	m_NumberOfFailingPullRequests = pt.get("NumberOfFailingPullRequests", 0);
	m_NumberOfSuccessfulBranches = pt.get("NumberOfSuccessfulBranches", 0);
	m_NumberOfSuccessfulPullRequests = pt.get("NumberOfSuccessfulPullRequests", 0);
	m_TotalNumberOfBranches = pt.get("TotalNumberOfBranches", 0);
	m_TotalNumberOfPullRequests = pt.get("TotalNumberOfPullRequests", 0);
	m__class = pt.get("_class", "");
}

std::string MultibranchPipeline::getDisplayName() const
{
    return m_DisplayName;
}
void MultibranchPipeline::setDisplayName(std::string value)
{
    m_DisplayName = value;
}
int32_t MultibranchPipeline::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}
void MultibranchPipeline::setEstimatedDurationInMillis(int32_t value)
{
    m_EstimatedDurationInMillis = value;
}
std::string MultibranchPipeline::getLatestRun() const
{
    return m_LatestRun;
}
void MultibranchPipeline::setLatestRun(std::string value)
{
    m_LatestRun = value;
}
std::string MultibranchPipeline::getName() const
{
    return m_Name;
}
void MultibranchPipeline::setName(std::string value)
{
    m_Name = value;
}
std::string MultibranchPipeline::getOrganization() const
{
    return m_Organization;
}
void MultibranchPipeline::setOrganization(std::string value)
{
    m_Organization = value;
}
int32_t MultibranchPipeline::getWeatherScore() const
{
    return m_WeatherScore;
}
void MultibranchPipeline::setWeatherScore(int32_t value)
{
    m_WeatherScore = value;
}
std::vector<std::string> MultibranchPipeline::getBranchNames() const
{
    return m_BranchNames;
}
void MultibranchPipeline::setBranchNames(std::vector<std::string> value)
{
    m_BranchNames = value;
}
int32_t MultibranchPipeline::getNumberOfFailingBranches() const
{
    return m_NumberOfFailingBranches;
}
void MultibranchPipeline::setNumberOfFailingBranches(int32_t value)
{
    m_NumberOfFailingBranches = value;
}
int32_t MultibranchPipeline::getNumberOfFailingPullRequests() const
{
    return m_NumberOfFailingPullRequests;
}
void MultibranchPipeline::setNumberOfFailingPullRequests(int32_t value)
{
    m_NumberOfFailingPullRequests = value;
}
int32_t MultibranchPipeline::getNumberOfSuccessfulBranches() const
{
    return m_NumberOfSuccessfulBranches;
}
void MultibranchPipeline::setNumberOfSuccessfulBranches(int32_t value)
{
    m_NumberOfSuccessfulBranches = value;
}
int32_t MultibranchPipeline::getNumberOfSuccessfulPullRequests() const
{
    return m_NumberOfSuccessfulPullRequests;
}
void MultibranchPipeline::setNumberOfSuccessfulPullRequests(int32_t value)
{
    m_NumberOfSuccessfulPullRequests = value;
}
int32_t MultibranchPipeline::getTotalNumberOfBranches() const
{
    return m_TotalNumberOfBranches;
}
void MultibranchPipeline::setTotalNumberOfBranches(int32_t value)
{
    m_TotalNumberOfBranches = value;
}
int32_t MultibranchPipeline::getTotalNumberOfPullRequests() const
{
    return m_TotalNumberOfPullRequests;
}
void MultibranchPipeline::setTotalNumberOfPullRequests(int32_t value)
{
    m_TotalNumberOfPullRequests = value;
}
std::string MultibranchPipeline::getClass() const
{
    return m__class;
}
void MultibranchPipeline::setClass(std::string value)
{
    m__class = value;
}

}
}
}
}

