/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "QueueBlockedItem.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

QueueBlockedItem::QueueBlockedItem()
{
    m__class = "";
    m_Blocked = false;
    m_Buildable = false;
    m_Id = 0;
    m_InQueueSince = 0;
    m_Params = "";
    m_Stuck = false;
    m_Url = "";
    m_Why = "";
    m_BuildableStartMilliseconds = 0;
    
}

QueueBlockedItem::~QueueBlockedItem()
{
}

std::string QueueBlockedItem::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("_class", m__class);
	pt.put("Blocked", m_Blocked);
	pt.put("Buildable", m_Buildable);
	pt.put("Id", m_Id);
	pt.put("InQueueSince", m_InQueueSince);
	pt.put("Params", m_Params);
	pt.put("Stuck", m_Stuck);
	pt.put("Url", m_Url);
	pt.put("Why", m_Why);
	pt.put("BuildableStartMilliseconds", m_BuildableStartMilliseconds);
	write_json(ss, pt, false);
	return ss.str();
}

void QueueBlockedItem::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m__class = pt.get("_class", "");
	m_Blocked = pt.get("Blocked", false);
	m_Buildable = pt.get("Buildable", false);
	m_Id = pt.get("Id", 0);
	m_InQueueSince = pt.get("InQueueSince", 0);
	m_Params = pt.get("Params", "");
	m_Stuck = pt.get("Stuck", false);
	m_Url = pt.get("Url", "");
	m_Why = pt.get("Why", "");
	m_BuildableStartMilliseconds = pt.get("BuildableStartMilliseconds", 0);
}

std::string QueueBlockedItem::getClass() const
{
    return m__class;
}
void QueueBlockedItem::setClass(std::string value)
{
    m__class = value;
}
std::vector<std::shared_ptr<CauseAction>> QueueBlockedItem::getActions() const
{
    return m_Actions;
}
void QueueBlockedItem::setActions(std::vector<std::shared_ptr<CauseAction>> value)
{
    m_Actions = value;
}
bool QueueBlockedItem::isBlocked() const
{
    return m_Blocked;
}
void QueueBlockedItem::setBlocked(bool value)
{
    m_Blocked = value;
}
bool QueueBlockedItem::isBuildable() const
{
    return m_Buildable;
}
void QueueBlockedItem::setBuildable(bool value)
{
    m_Buildable = value;
}
int32_t QueueBlockedItem::getId() const
{
    return m_Id;
}
void QueueBlockedItem::setId(int32_t value)
{
    m_Id = value;
}
int32_t QueueBlockedItem::getInQueueSince() const
{
    return m_InQueueSince;
}
void QueueBlockedItem::setInQueueSince(int32_t value)
{
    m_InQueueSince = value;
}
std::string QueueBlockedItem::getParams() const
{
    return m_Params;
}
void QueueBlockedItem::setParams(std::string value)
{
    m_Params = value;
}
bool QueueBlockedItem::isStuck() const
{
    return m_Stuck;
}
void QueueBlockedItem::setStuck(bool value)
{
    m_Stuck = value;
}
std::shared_ptr<FreeStyleProject> QueueBlockedItem::getTask() const
{
    return m_Task;
}
void QueueBlockedItem::setTask(std::shared_ptr<FreeStyleProject> value)
{
    m_Task = value;
}
std::string QueueBlockedItem::getUrl() const
{
    return m_Url;
}
void QueueBlockedItem::setUrl(std::string value)
{
    m_Url = value;
}
std::string QueueBlockedItem::getWhy() const
{
    return m_Why;
}
void QueueBlockedItem::setWhy(std::string value)
{
    m_Why = value;
}
int32_t QueueBlockedItem::getBuildableStartMilliseconds() const
{
    return m_BuildableStartMilliseconds;
}
void QueueBlockedItem::setBuildableStartMilliseconds(int32_t value)
{
    m_BuildableStartMilliseconds = value;
}

}
}
}
}

