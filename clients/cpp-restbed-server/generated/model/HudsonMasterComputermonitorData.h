/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HudsonMasterComputermonitorData.h
 *
 * 
 */

#ifndef HudsonMasterComputermonitorData_H_
#define HudsonMasterComputermonitorData_H_



#include "SwapSpaceMonitorMemoryUsage2.h"
#include "DiskSpaceMonitorDescriptorDiskSpace.h"
#include <string>
#include "ResponseTimeMonitorData.h"
#include "ClockDifference.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  HudsonMasterComputermonitorData
{
public:
    HudsonMasterComputermonitorData();
    virtual ~HudsonMasterComputermonitorData();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// HudsonMasterComputermonitorData members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SwapSpaceMonitorMemoryUsage2> getHudsonNodeMonitorsSwapSpaceMonitor() const;
    void setHudsonNodeMonitorsSwapSpaceMonitor(std::shared_ptr<SwapSpaceMonitorMemoryUsage2> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> getHudsonNodeMonitorsTemporarySpaceMonitor() const;
    void setHudsonNodeMonitorsTemporarySpaceMonitor(std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> getHudsonNodeMonitorsDiskSpaceMonitor() const;
    void setHudsonNodeMonitorsDiskSpaceMonitor(std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> value);
    /// <summary>
    /// 
    /// </summary>
    std::string getHudsonNodeMonitorsArchitectureMonitor() const;
    void setHudsonNodeMonitorsArchitectureMonitor(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ResponseTimeMonitorData> getHudsonNodeMonitorsResponseTimeMonitor() const;
    void setHudsonNodeMonitorsResponseTimeMonitor(std::shared_ptr<ResponseTimeMonitorData> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ClockDifference> getHudsonNodeMonitorsClockMonitor() const;
    void setHudsonNodeMonitorsClockMonitor(std::shared_ptr<ClockDifference> value);
    /// <summary>
    /// 
    /// </summary>
    std::string getClass() const;
    void setClass(std::string value);

protected:
    std::shared_ptr<SwapSpaceMonitorMemoryUsage2> m_Hudson_node_monitors_SwapSpaceMonitor;
    std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> m_Hudson_node_monitors_TemporarySpaceMonitor;
    std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> m_Hudson_node_monitors_DiskSpaceMonitor;
    std::string m_Hudson_node_monitors_ArchitectureMonitor;
    std::shared_ptr<ResponseTimeMonitorData> m_Hudson_node_monitors_ResponseTimeMonitor;
    std::shared_ptr<ClockDifference> m_Hudson_node_monitors_ClockMonitor;
    std::string m__class;
};

}
}
}
}

#endif /* HudsonMasterComputermonitorData_H_ */
