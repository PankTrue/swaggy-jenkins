/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SwapSpaceMonitorMemoryUsage2.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

SwapSpaceMonitorMemoryUsage2::SwapSpaceMonitorMemoryUsage2()
{
    m__class = "";
    m_AvailablePhysicalMemory = 0;
    m_AvailableSwapSpace = 0;
    m_TotalPhysicalMemory = 0;
    m_TotalSwapSpace = 0;
    
}

SwapSpaceMonitorMemoryUsage2::~SwapSpaceMonitorMemoryUsage2()
{
}

std::string SwapSpaceMonitorMemoryUsage2::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("_class", m__class);
	pt.put("AvailablePhysicalMemory", m_AvailablePhysicalMemory);
	pt.put("AvailableSwapSpace", m_AvailableSwapSpace);
	pt.put("TotalPhysicalMemory", m_TotalPhysicalMemory);
	pt.put("TotalSwapSpace", m_TotalSwapSpace);
	write_json(ss, pt, false);
	return ss.str();
}

void SwapSpaceMonitorMemoryUsage2::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m__class = pt.get("_class", "");
	m_AvailablePhysicalMemory = pt.get("AvailablePhysicalMemory", 0);
	m_AvailableSwapSpace = pt.get("AvailableSwapSpace", 0);
	m_TotalPhysicalMemory = pt.get("TotalPhysicalMemory", 0);
	m_TotalSwapSpace = pt.get("TotalSwapSpace", 0);
}

std::string SwapSpaceMonitorMemoryUsage2::getClass() const
{
    return m__class;
}
void SwapSpaceMonitorMemoryUsage2::setClass(std::string value)
{
    m__class = value;
}
int32_t SwapSpaceMonitorMemoryUsage2::getAvailablePhysicalMemory() const
{
    return m_AvailablePhysicalMemory;
}
void SwapSpaceMonitorMemoryUsage2::setAvailablePhysicalMemory(int32_t value)
{
    m_AvailablePhysicalMemory = value;
}
int32_t SwapSpaceMonitorMemoryUsage2::getAvailableSwapSpace() const
{
    return m_AvailableSwapSpace;
}
void SwapSpaceMonitorMemoryUsage2::setAvailableSwapSpace(int32_t value)
{
    m_AvailableSwapSpace = value;
}
int32_t SwapSpaceMonitorMemoryUsage2::getTotalPhysicalMemory() const
{
    return m_TotalPhysicalMemory;
}
void SwapSpaceMonitorMemoryUsage2::setTotalPhysicalMemory(int32_t value)
{
    m_TotalPhysicalMemory = value;
}
int32_t SwapSpaceMonitorMemoryUsage2::getTotalSwapSpace() const
{
    return m_TotalSwapSpace;
}
void SwapSpaceMonitorMemoryUsage2::setTotalSwapSpace(int32_t value)
{
    m_TotalSwapSpace = value;
}

}
}
}
}

