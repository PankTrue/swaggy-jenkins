/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FreeStyleProject.h
 *
 * 
 */

#ifndef FreeStyleProject_H_
#define FreeStyleProject_H_



#include "NullSCM.h"
#include "FreeStyleBuild.h"
#include <string>
#include <vector>
#include "FreeStyleProjectactions.h"
#include "FreeStyleProjecthealthReport.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  FreeStyleProject
{
public:
    FreeStyleProject();
    virtual ~FreeStyleProject();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// FreeStyleProject members
    
    /// <summary>
    /// 
    /// </summary>
    std::string getClass() const;
    void setClass(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FreeStyleProjectactions>> getActions() const;
    void setActions(std::vector<std::shared_ptr<FreeStyleProjectactions>> value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDisplayName() const;
    void setDisplayName(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::string getDisplayNameOrNull() const;
    void setDisplayNameOrNull(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::string getFullDisplayName() const;
    void setFullDisplayName(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string value);
    /// <summary>
    /// 
    /// </summary>
    bool isBuildable() const;
    void setBuildable(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FreeStyleBuild>> getBuilds() const;
    void setBuilds(std::vector<std::shared_ptr<FreeStyleBuild>> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getFirstBuild() const;
    void setFirstBuild(std::shared_ptr<FreeStyleBuild> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> getHealthReport() const;
    void setHealthReport(std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> value);
    /// <summary>
    /// 
    /// </summary>
    bool isInQueue() const;
    void setInQueue(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isKeepDependencies() const;
    void setKeepDependencies(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getLastBuild() const;
    void setLastBuild(std::shared_ptr<FreeStyleBuild> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getLastCompletedBuild() const;
    void setLastCompletedBuild(std::shared_ptr<FreeStyleBuild> value);
    /// <summary>
    /// 
    /// </summary>
    std::string getLastFailedBuild() const;
    void setLastFailedBuild(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getLastStableBuild() const;
    void setLastStableBuild(std::shared_ptr<FreeStyleBuild> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getLastSuccessfulBuild() const;
    void setLastSuccessfulBuild(std::shared_ptr<FreeStyleBuild> value);
    /// <summary>
    /// 
    /// </summary>
    std::string getLastUnstableBuild() const;
    void setLastUnstableBuild(std::string value);
    /// <summary>
    /// 
    /// </summary>
    std::string getLastUnsuccessfulBuild() const;
    void setLastUnsuccessfulBuild(std::string value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getNextBuildNumber() const;
    void setNextBuildNumber(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    std::string getQueueItem() const;
    void setQueueItem(std::string value);
    /// <summary>
    /// 
    /// </summary>
    bool isConcurrentBuild() const;
    void setConcurrentBuild(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NullSCM> getScm() const;
    void setScm(std::shared_ptr<NullSCM> value);

protected:
    std::string m__class;
    std::string m_Name;
    std::string m_Url;
    std::string m_Color;
    std::vector<std::shared_ptr<FreeStyleProjectactions>> m_Actions;
    std::string m_Description;
    std::string m_DisplayName;
    std::string m_DisplayNameOrNull;
    std::string m_FullDisplayName;
    std::string m_FullName;
    bool m_Buildable;
    std::vector<std::shared_ptr<FreeStyleBuild>> m_Builds;
    std::shared_ptr<FreeStyleBuild> m_FirstBuild;
    std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> m_HealthReport;
    bool m_InQueue;
    bool m_KeepDependencies;
    std::shared_ptr<FreeStyleBuild> m_LastBuild;
    std::shared_ptr<FreeStyleBuild> m_LastCompletedBuild;
    std::string m_LastFailedBuild;
    std::shared_ptr<FreeStyleBuild> m_LastStableBuild;
    std::shared_ptr<FreeStyleBuild> m_LastSuccessfulBuild;
    std::string m_LastUnstableBuild;
    std::string m_LastUnsuccessfulBuild;
    int32_t m_NextBuildNumber;
    std::string m_QueueItem;
    bool m_ConcurrentBuild;
    std::shared_ptr<NullSCM> m_Scm;
};

}
}
}
}

#endif /* FreeStyleProject_H_ */
