/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GithubRepository.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

GithubRepository::GithubRepository()
{
    m__class = "";
    m_DefaultBranch = "";
    m_Description = "";
    m_Name = "";
    m__private = false;
    m_FullName = "";
    
}

GithubRepository::~GithubRepository()
{
}

std::string GithubRepository::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("_class", m__class);
	pt.put("DefaultBranch", m_DefaultBranch);
	pt.put("Description", m_Description);
	pt.put("Name", m_Name);
	pt.put("_private", m__private);
	pt.put("FullName", m_FullName);
	write_json(ss, pt, false);
	return ss.str();
}

void GithubRepository::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m__class = pt.get("_class", "");
	m_DefaultBranch = pt.get("DefaultBranch", "");
	m_Description = pt.get("Description", "");
	m_Name = pt.get("Name", "");
	m__private = pt.get("_private", false);
	m_FullName = pt.get("FullName", "");
}

std::string GithubRepository::getClass() const
{
    return m__class;
}
void GithubRepository::setClass(std::string value)
{
    m__class = value;
}
std::shared_ptr<GithubRepositorylinks> GithubRepository::getLinks() const
{
    return m__links;
}
void GithubRepository::setLinks(std::shared_ptr<GithubRepositorylinks> value)
{
    m__links = value;
}
std::string GithubRepository::getDefaultBranch() const
{
    return m_DefaultBranch;
}
void GithubRepository::setDefaultBranch(std::string value)
{
    m_DefaultBranch = value;
}
std::string GithubRepository::getDescription() const
{
    return m_Description;
}
void GithubRepository::setDescription(std::string value)
{
    m_Description = value;
}
std::string GithubRepository::getName() const
{
    return m_Name;
}
void GithubRepository::setName(std::string value)
{
    m_Name = value;
}
std::shared_ptr<GithubRepositorypermissions> GithubRepository::getPermissions() const
{
    return m_Permissions;
}
void GithubRepository::setPermissions(std::shared_ptr<GithubRepositorypermissions> value)
{
    m_Permissions = value;
}
bool GithubRepository::isPrivate() const
{
    return m__private;
}
void GithubRepository::setPrivate(bool value)
{
    m__private = value;
}
std::string GithubRepository::getFullName() const
{
    return m_FullName;
}
void GithubRepository::setFullName(std::string value)
{
    m_FullName = value;
}

}
}
}
}

