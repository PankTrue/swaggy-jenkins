/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PipelineRunNode.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineRunNode::PipelineRunNode()
{
    m__class = "";
    m_DisplayName = "";
    m_DurationInMillis = 0;
    m_Id = "";
    m_Result = "";
    m_StartTime = "";
    m_State = "";
    
}

PipelineRunNode::~PipelineRunNode()
{
}

std::string PipelineRunNode::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("_class", m__class);
	pt.put("DisplayName", m_DisplayName);
	pt.put("DurationInMillis", m_DurationInMillis);
	pt.put("Id", m_Id);
	pt.put("Result", m_Result);
	pt.put("StartTime", m_StartTime);
	pt.put("State", m_State);
	write_json(ss, pt, false);
	return ss.str();
}

void PipelineRunNode::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m__class = pt.get("_class", "");
	m_DisplayName = pt.get("DisplayName", "");
	m_DurationInMillis = pt.get("DurationInMillis", 0);
	m_Id = pt.get("Id", "");
	m_Result = pt.get("Result", "");
	m_StartTime = pt.get("StartTime", "");
	m_State = pt.get("State", "");
}

std::string PipelineRunNode::getClass() const
{
    return m__class;
}
void PipelineRunNode::setClass(std::string value)
{
    m__class = value;
}
std::string PipelineRunNode::getDisplayName() const
{
    return m_DisplayName;
}
void PipelineRunNode::setDisplayName(std::string value)
{
    m_DisplayName = value;
}
int32_t PipelineRunNode::getDurationInMillis() const
{
    return m_DurationInMillis;
}
void PipelineRunNode::setDurationInMillis(int32_t value)
{
    m_DurationInMillis = value;
}
std::vector<std::shared_ptr<PipelineRunNodeedges>> PipelineRunNode::getEdges() const
{
    return m_Edges;
}
void PipelineRunNode::setEdges(std::vector<std::shared_ptr<PipelineRunNodeedges>> value)
{
    m_Edges = value;
}
std::string PipelineRunNode::getId() const
{
    return m_Id;
}
void PipelineRunNode::setId(std::string value)
{
    m_Id = value;
}
std::string PipelineRunNode::getResult() const
{
    return m_Result;
}
void PipelineRunNode::setResult(std::string value)
{
    m_Result = value;
}
std::string PipelineRunNode::getStartTime() const
{
    return m_StartTime;
}
void PipelineRunNode::setStartTime(std::string value)
{
    m_StartTime = value;
}
std::string PipelineRunNode::getState() const
{
    return m_State;
}
void PipelineRunNode::setState(std::string value)
{
    m_State = value;
}

}
}
}
}

