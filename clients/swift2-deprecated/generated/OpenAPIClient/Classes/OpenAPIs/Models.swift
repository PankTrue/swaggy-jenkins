// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe OpenAPI spec file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [AllView]
            Decoders.addDecoder(clazz: [AllView].self) { (source: AnyObject) -> [AllView] in
                return Decoders.decode(clazz: [AllView].self, source: source)
            }
            // Decoder for AllView
            Decoders.addDecoder(clazz: AllView.self) { (source: AnyObject) -> AllView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AllView()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [Body]
            Decoders.addDecoder(clazz: [Body].self) { (source: AnyObject) -> [Body] in
                return Decoders.decode(clazz: [Body].self, source: source)
            }
            // Decoder for Body
            Decoders.addDecoder(clazz: Body.self) { (source: AnyObject) -> Body in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Body()
                instance.favorite = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["favorite"])
                return instance
            }


            // Decoder for [BranchImpl]
            Decoders.addDecoder(clazz: [BranchImpl].self) { (source: AnyObject) -> [BranchImpl] in
                return Decoders.decode(clazz: [BranchImpl].self, source: source)
            }
            // Decoder for BranchImpl
            Decoders.addDecoder(clazz: BranchImpl.self) { (source: AnyObject) -> BranchImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BranchImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"])
                instance.permissions = Decoders.decodeOptional(clazz: BranchImplpermissions.self, source: sourceDictionary["permissions"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.pullRequest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pullRequest"])
                instance.links = Decoders.decodeOptional(clazz: BranchImpllinks.self, source: sourceDictionary["_links"])
                instance.latestRun = Decoders.decodeOptional(clazz: PipelineRunImpl.self, source: sourceDictionary["latestRun"])
                return instance
            }


            // Decoder for [BranchImpllinks]
            Decoders.addDecoder(clazz: [BranchImpllinks].self) { (source: AnyObject) -> [BranchImpllinks] in
                return Decoders.decode(clazz: [BranchImpllinks].self, source: source)
            }
            // Decoder for BranchImpllinks
            Decoders.addDecoder(clazz: BranchImpllinks.self) { (source: AnyObject) -> BranchImpllinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BranchImpllinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance.actions = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["actions"])
                instance.runs = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["runs"])
                instance.queue = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["queue"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [BranchImplpermissions]
            Decoders.addDecoder(clazz: [BranchImplpermissions].self) { (source: AnyObject) -> [BranchImplpermissions] in
                return Decoders.decode(clazz: [BranchImplpermissions].self, source: source)
            }
            // Decoder for BranchImplpermissions
            Decoders.addDecoder(clazz: BranchImplpermissions.self) { (source: AnyObject) -> BranchImplpermissions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BranchImplpermissions()
                instance.create = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["create"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                instance.start = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["start"])
                instance.stop = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stop"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [CauseAction]
            Decoders.addDecoder(clazz: [CauseAction].self) { (source: AnyObject) -> [CauseAction] in
                return Decoders.decode(clazz: [CauseAction].self, source: source)
            }
            // Decoder for CauseAction
            Decoders.addDecoder(clazz: CauseAction.self) { (source: AnyObject) -> CauseAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CauseAction()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.causes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["causes"])
                return instance
            }


            // Decoder for [CauseUserIdCause]
            Decoders.addDecoder(clazz: [CauseUserIdCause].self) { (source: AnyObject) -> [CauseUserIdCause] in
                return Decoders.decode(clazz: [CauseUserIdCause].self, source: source)
            }
            // Decoder for CauseUserIdCause
            Decoders.addDecoder(clazz: CauseUserIdCause.self) { (source: AnyObject) -> CauseUserIdCause in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CauseUserIdCause()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortDescription"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.userName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"])
                return instance
            }


            // Decoder for [ClassesByClass]
            Decoders.addDecoder(clazz: [ClassesByClass].self) { (source: AnyObject) -> [ClassesByClass] in
                return Decoders.decode(clazz: [ClassesByClass].self, source: source)
            }
            // Decoder for ClassesByClass
            Decoders.addDecoder(clazz: ClassesByClass.self) { (source: AnyObject) -> ClassesByClass in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ClassesByClass()
                instance.classes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["classes"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [ClockDifference]
            Decoders.addDecoder(clazz: [ClockDifference].self) { (source: AnyObject) -> [ClockDifference] in
                return Decoders.decode(clazz: [ClockDifference].self, source: source)
            }
            // Decoder for ClockDifference
            Decoders.addDecoder(clazz: ClockDifference.self) { (source: AnyObject) -> ClockDifference in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ClockDifference()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.diff = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["diff"])
                return instance
            }


            // Decoder for [ComputerSet]
            Decoders.addDecoder(clazz: [ComputerSet].self) { (source: AnyObject) -> [ComputerSet] in
                return Decoders.decode(clazz: [ComputerSet].self, source: source)
            }
            // Decoder for ComputerSet
            Decoders.addDecoder(clazz: ComputerSet.self) { (source: AnyObject) -> ComputerSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ComputerSet()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.busyExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["busyExecutors"])
                instance.computer = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["computer"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.totalExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalExecutors"])
                return instance
            }


            // Decoder for [DefaultCrumbIssuer]
            Decoders.addDecoder(clazz: [DefaultCrumbIssuer].self) { (source: AnyObject) -> [DefaultCrumbIssuer] in
                return Decoders.decode(clazz: [DefaultCrumbIssuer].self, source: source)
            }
            // Decoder for DefaultCrumbIssuer
            Decoders.addDecoder(clazz: DefaultCrumbIssuer.self) { (source: AnyObject) -> DefaultCrumbIssuer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DefaultCrumbIssuer()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.crumb = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crumb"])
                instance.crumbRequestField = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crumbRequestField"])
                return instance
            }


            // Decoder for [DiskSpaceMonitorDescriptorDiskSpace]
            Decoders.addDecoder(clazz: [DiskSpaceMonitorDescriptorDiskSpace].self) { (source: AnyObject) -> [DiskSpaceMonitorDescriptorDiskSpace] in
                return Decoders.decode(clazz: [DiskSpaceMonitorDescriptorDiskSpace].self, source: source)
            }
            // Decoder for DiskSpaceMonitorDescriptorDiskSpace
            Decoders.addDecoder(clazz: DiskSpaceMonitorDescriptorDiskSpace.self) { (source: AnyObject) -> DiskSpaceMonitorDescriptorDiskSpace in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DiskSpaceMonitorDescriptorDiskSpace()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                return instance
            }


            // Decoder for [EmptyChangeLogSet]
            Decoders.addDecoder(clazz: [EmptyChangeLogSet].self) { (source: AnyObject) -> [EmptyChangeLogSet] in
                return Decoders.decode(clazz: [EmptyChangeLogSet].self, source: source)
            }
            // Decoder for EmptyChangeLogSet
            Decoders.addDecoder(clazz: EmptyChangeLogSet.self) { (source: AnyObject) -> EmptyChangeLogSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EmptyChangeLogSet()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.kind = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["kind"])
                return instance
            }


            // Decoder for [ExtensionClassContainerImpl1]
            Decoders.addDecoder(clazz: [ExtensionClassContainerImpl1].self) { (source: AnyObject) -> [ExtensionClassContainerImpl1] in
                return Decoders.decode(clazz: [ExtensionClassContainerImpl1].self, source: source)
            }
            // Decoder for ExtensionClassContainerImpl1
            Decoders.addDecoder(clazz: ExtensionClassContainerImpl1.self) { (source: AnyObject) -> ExtensionClassContainerImpl1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtensionClassContainerImpl1()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: ExtensionClassContainerImpl1links.self, source: sourceDictionary["_links"])
                instance.map = Decoders.decodeOptional(clazz: ExtensionClassContainerImpl1map.self, source: sourceDictionary["map"])
                return instance
            }


            // Decoder for [ExtensionClassContainerImpl1links]
            Decoders.addDecoder(clazz: [ExtensionClassContainerImpl1links].self) { (source: AnyObject) -> [ExtensionClassContainerImpl1links] in
                return Decoders.decode(clazz: [ExtensionClassContainerImpl1links].self, source: source)
            }
            // Decoder for ExtensionClassContainerImpl1links
            Decoders.addDecoder(clazz: ExtensionClassContainerImpl1links.self) { (source: AnyObject) -> ExtensionClassContainerImpl1links in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtensionClassContainerImpl1links()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [ExtensionClassContainerImpl1map]
            Decoders.addDecoder(clazz: [ExtensionClassContainerImpl1map].self) { (source: AnyObject) -> [ExtensionClassContainerImpl1map] in
                return Decoders.decode(clazz: [ExtensionClassContainerImpl1map].self, source: source)
            }
            // Decoder for ExtensionClassContainerImpl1map
            Decoders.addDecoder(clazz: ExtensionClassContainerImpl1map.self) { (source: AnyObject) -> ExtensionClassContainerImpl1map in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtensionClassContainerImpl1map()
                instance.ioJenkinsBlueoceanServiceEmbeddedRestPipelineImpl = Decoders.decodeOptional(clazz: ExtensionClassImpl.self, source: sourceDictionary["io.jenkins.blueocean.service.embedded.rest.PipelineImpl"])
                instance.ioJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl = Decoders.decodeOptional(clazz: ExtensionClassImpl.self, source: sourceDictionary["io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [ExtensionClassImpl]
            Decoders.addDecoder(clazz: [ExtensionClassImpl].self) { (source: AnyObject) -> [ExtensionClassImpl] in
                return Decoders.decode(clazz: [ExtensionClassImpl].self, source: source)
            }
            // Decoder for ExtensionClassImpl
            Decoders.addDecoder(clazz: ExtensionClassImpl.self) { (source: AnyObject) -> ExtensionClassImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtensionClassImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: ExtensionClassImpllinks.self, source: sourceDictionary["_links"])
                instance.classes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["classes"])
                return instance
            }


            // Decoder for [ExtensionClassImpllinks]
            Decoders.addDecoder(clazz: [ExtensionClassImpllinks].self) { (source: AnyObject) -> [ExtensionClassImpllinks] in
                return Decoders.decode(clazz: [ExtensionClassImpllinks].self, source: source)
            }
            // Decoder for ExtensionClassImpllinks
            Decoders.addDecoder(clazz: ExtensionClassImpllinks.self) { (source: AnyObject) -> ExtensionClassImpllinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExtensionClassImpllinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [FavoriteImpl]
            Decoders.addDecoder(clazz: [FavoriteImpl].self) { (source: AnyObject) -> [FavoriteImpl] in
                return Decoders.decode(clazz: [FavoriteImpl].self, source: source)
            }
            // Decoder for FavoriteImpl
            Decoders.addDecoder(clazz: FavoriteImpl.self) { (source: AnyObject) -> FavoriteImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FavoriteImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: FavoriteImpllinks.self, source: sourceDictionary["_links"])
                instance.item = Decoders.decodeOptional(clazz: PipelineImpl.self, source: sourceDictionary["item"])
                return instance
            }


            // Decoder for [FavoriteImpllinks]
            Decoders.addDecoder(clazz: [FavoriteImpllinks].self) { (source: AnyObject) -> [FavoriteImpllinks] in
                return Decoders.decode(clazz: [FavoriteImpllinks].self, source: source)
            }
            // Decoder for FavoriteImpllinks
            Decoders.addDecoder(clazz: FavoriteImpllinks.self) { (source: AnyObject) -> FavoriteImpllinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FavoriteImpllinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [FreeStyleBuild]
            Decoders.addDecoder(clazz: [FreeStyleBuild].self) { (source: AnyObject) -> [FreeStyleBuild] in
                return Decoders.decode(clazz: [FreeStyleBuild].self, source: source)
            }
            // Decoder for FreeStyleBuild
            Decoders.addDecoder(clazz: FreeStyleBuild.self) { (source: AnyObject) -> FreeStyleBuild in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FreeStyleBuild()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.building = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["building"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"])
                instance.estimatedDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDuration"])
                instance.executor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["executor"])
                instance.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.keepLog = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["keepLog"])
                instance.queueId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueId"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"])
                instance.builtOn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["builtOn"])
                instance.changeSet = Decoders.decodeOptional(clazz: EmptyChangeLogSet.self, source: sourceDictionary["changeSet"])
                return instance
            }


            // Decoder for [FreeStyleProject]
            Decoders.addDecoder(clazz: [FreeStyleProject].self) { (source: AnyObject) -> [FreeStyleProject] in
                return Decoders.decode(clazz: [FreeStyleProject].self, source: source)
            }
            // Decoder for FreeStyleProject
            Decoders.addDecoder(clazz: FreeStyleProject.self) { (source: AnyObject) -> FreeStyleProject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FreeStyleProject()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.displayNameOrNull = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayNameOrNull"])
                instance.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"])
                instance.builds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["builds"])
                instance.firstBuild = Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["firstBuild"])
                instance.healthReport = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["healthReport"])
                instance.inQueue = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inQueue"])
                instance.keepDependencies = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["keepDependencies"])
                instance.lastBuild = Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["lastBuild"])
                instance.lastCompletedBuild = Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["lastCompletedBuild"])
                instance.lastFailedBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastFailedBuild"])
                instance.lastStableBuild = Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["lastStableBuild"])
                instance.lastSuccessfulBuild = Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["lastSuccessfulBuild"])
                instance.lastUnstableBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnstableBuild"])
                instance.lastUnsuccessfulBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnsuccessfulBuild"])
                instance.nextBuildNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nextBuildNumber"])
                instance.queueItem = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueItem"])
                instance.concurrentBuild = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["concurrentBuild"])
                instance.scm = Decoders.decodeOptional(clazz: NullSCM.self, source: sourceDictionary["scm"])
                return instance
            }


            // Decoder for [FreeStyleProjectactions]
            Decoders.addDecoder(clazz: [FreeStyleProjectactions].self) { (source: AnyObject) -> [FreeStyleProjectactions] in
                return Decoders.decode(clazz: [FreeStyleProjectactions].self, source: source)
            }
            // Decoder for FreeStyleProjectactions
            Decoders.addDecoder(clazz: FreeStyleProjectactions.self) { (source: AnyObject) -> FreeStyleProjectactions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FreeStyleProjectactions()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [FreeStyleProjecthealthReport]
            Decoders.addDecoder(clazz: [FreeStyleProjecthealthReport].self) { (source: AnyObject) -> [FreeStyleProjecthealthReport] in
                return Decoders.decode(clazz: [FreeStyleProjecthealthReport].self, source: source)
            }
            // Decoder for FreeStyleProjecthealthReport
            Decoders.addDecoder(clazz: FreeStyleProjecthealthReport.self) { (source: AnyObject) -> FreeStyleProjecthealthReport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FreeStyleProjecthealthReport()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.iconClassName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconClassName"])
                instance.iconUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconUrl"])
                instance.score = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["score"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GenericResource]
            Decoders.addDecoder(clazz: [GenericResource].self) { (source: AnyObject) -> [GenericResource] in
                return Decoders.decode(clazz: [GenericResource].self, source: source)
            }
            // Decoder for GenericResource
            Decoders.addDecoder(clazz: GenericResource.self) { (source: AnyObject) -> GenericResource in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GenericResource()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                return instance
            }


            // Decoder for [GithubContent]
            Decoders.addDecoder(clazz: [GithubContent].self) { (source: AnyObject) -> [GithubContent] in
                return Decoders.decode(clazz: [GithubContent].self, source: source)
            }
            // Decoder for GithubContent
            Decoders.addDecoder(clazz: GithubContent.self) { (source: AnyObject) -> GithubContent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubContent()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.sha = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sha"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.repo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["repo"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.owner = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.base64Data = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base64Data"])
                return instance
            }


            // Decoder for [GithubFile]
            Decoders.addDecoder(clazz: [GithubFile].self) { (source: AnyObject) -> [GithubFile] in
                return Decoders.decode(clazz: [GithubFile].self, source: source)
            }
            // Decoder for GithubFile
            Decoders.addDecoder(clazz: GithubFile.self) { (source: AnyObject) -> GithubFile in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubFile()
                instance.content = Decoders.decodeOptional(clazz: GithubContent.self, source: sourceDictionary["content"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GithubOrganization]
            Decoders.addDecoder(clazz: [GithubOrganization].self) { (source: AnyObject) -> [GithubOrganization] in
                return Decoders.decode(clazz: [GithubOrganization].self, source: source)
            }
            // Decoder for GithubOrganization
            Decoders.addDecoder(clazz: GithubOrganization.self) { (source: AnyObject) -> GithubOrganization in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubOrganization()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: GithubOrganizationlinks.self, source: sourceDictionary["_links"])
                instance.jenkinsOrganizationPipeline = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["jenkinsOrganizationPipeline"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [GithubOrganizationlinks]
            Decoders.addDecoder(clazz: [GithubOrganizationlinks].self) { (source: AnyObject) -> [GithubOrganizationlinks] in
                return Decoders.decode(clazz: [GithubOrganizationlinks].self, source: source)
            }
            // Decoder for GithubOrganizationlinks
            Decoders.addDecoder(clazz: GithubOrganizationlinks.self) { (source: AnyObject) -> GithubOrganizationlinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubOrganizationlinks()
                instance.repositories = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["repositories"])
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GithubRepositories]
            Decoders.addDecoder(clazz: [GithubRepositories].self) { (source: AnyObject) -> [GithubRepositories] in
                return Decoders.decode(clazz: [GithubRepositories].self, source: source)
            }
            // Decoder for GithubRepositories
            Decoders.addDecoder(clazz: GithubRepositories.self) { (source: AnyObject) -> GithubRepositories in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubRepositories()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: GithubRepositorieslinks.self, source: sourceDictionary["_links"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                instance.lastPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lastPage"])
                instance.nextPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nextPage"])
                instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"])
                return instance
            }


            // Decoder for [GithubRepositorieslinks]
            Decoders.addDecoder(clazz: [GithubRepositorieslinks].self) { (source: AnyObject) -> [GithubRepositorieslinks] in
                return Decoders.decode(clazz: [GithubRepositorieslinks].self, source: source)
            }
            // Decoder for GithubRepositorieslinks
            Decoders.addDecoder(clazz: GithubRepositorieslinks.self) { (source: AnyObject) -> GithubRepositorieslinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubRepositorieslinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GithubRepository]
            Decoders.addDecoder(clazz: [GithubRepository].self) { (source: AnyObject) -> [GithubRepository] in
                return Decoders.decode(clazz: [GithubRepository].self, source: source)
            }
            // Decoder for GithubRepository
            Decoders.addDecoder(clazz: GithubRepository.self) { (source: AnyObject) -> GithubRepository in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubRepository()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: GithubRepositorylinks.self, source: sourceDictionary["_links"])
                instance.defaultBranch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultBranch"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.permissions = Decoders.decodeOptional(clazz: GithubRepositorypermissions.self, source: sourceDictionary["permissions"])
                instance._private = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["private"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                return instance
            }


            // Decoder for [GithubRepositorylinks]
            Decoders.addDecoder(clazz: [GithubRepositorylinks].self) { (source: AnyObject) -> [GithubRepositorylinks] in
                return Decoders.decode(clazz: [GithubRepositorylinks].self, source: source)
            }
            // Decoder for GithubRepositorylinks
            Decoders.addDecoder(clazz: GithubRepositorylinks.self) { (source: AnyObject) -> GithubRepositorylinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubRepositorylinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GithubRepositorypermissions]
            Decoders.addDecoder(clazz: [GithubRepositorypermissions].self) { (source: AnyObject) -> [GithubRepositorypermissions] in
                return Decoders.decode(clazz: [GithubRepositorypermissions].self, source: source)
            }
            // Decoder for GithubRepositorypermissions
            Decoders.addDecoder(clazz: GithubRepositorypermissions.self) { (source: AnyObject) -> GithubRepositorypermissions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubRepositorypermissions()
                instance.admin = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["admin"])
                instance.push = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["push"])
                instance.pull = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pull"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GithubRespositoryContainer]
            Decoders.addDecoder(clazz: [GithubRespositoryContainer].self) { (source: AnyObject) -> [GithubRespositoryContainer] in
                return Decoders.decode(clazz: [GithubRespositoryContainer].self, source: source)
            }
            // Decoder for GithubRespositoryContainer
            Decoders.addDecoder(clazz: GithubRespositoryContainer.self) { (source: AnyObject) -> GithubRespositoryContainer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubRespositoryContainer()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: GithubRespositoryContainerlinks.self, source: sourceDictionary["_links"])
                instance.repositories = Decoders.decodeOptional(clazz: GithubRepositories.self, source: sourceDictionary["repositories"])
                return instance
            }


            // Decoder for [GithubRespositoryContainerlinks]
            Decoders.addDecoder(clazz: [GithubRespositoryContainerlinks].self) { (source: AnyObject) -> [GithubRespositoryContainerlinks] in
                return Decoders.decode(clazz: [GithubRespositoryContainerlinks].self, source: source)
            }
            // Decoder for GithubRespositoryContainerlinks
            Decoders.addDecoder(clazz: GithubRespositoryContainerlinks.self) { (source: AnyObject) -> GithubRespositoryContainerlinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubRespositoryContainerlinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GithubScm]
            Decoders.addDecoder(clazz: [GithubScm].self) { (source: AnyObject) -> [GithubScm] in
                return Decoders.decode(clazz: [GithubScm].self, source: source)
            }
            // Decoder for GithubScm
            Decoders.addDecoder(clazz: GithubScm.self) { (source: AnyObject) -> GithubScm in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubScm()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: GithubScmlinks.self, source: sourceDictionary["_links"])
                instance.credentialId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["credentialId"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"])
                return instance
            }


            // Decoder for [GithubScmlinks]
            Decoders.addDecoder(clazz: [GithubScmlinks].self) { (source: AnyObject) -> [GithubScmlinks] in
                return Decoders.decode(clazz: [GithubScmlinks].self, source: source)
            }
            // Decoder for GithubScmlinks
            Decoders.addDecoder(clazz: GithubScmlinks.self) { (source: AnyObject) -> GithubScmlinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GithubScmlinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [Hudson]
            Decoders.addDecoder(clazz: [Hudson].self) { (source: AnyObject) -> [Hudson] in
                return Decoders.decode(clazz: [Hudson].self, source: source)
            }
            // Decoder for Hudson
            Decoders.addDecoder(clazz: Hudson.self) { (source: AnyObject) -> Hudson in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Hudson()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.assignedLabels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assignedLabels"])
                instance.mode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mode"])
                instance.nodeDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nodeDescription"])
                instance.nodeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nodeName"])
                instance.numExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numExecutors"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.jobs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jobs"])
                instance.primaryView = Decoders.decodeOptional(clazz: AllView.self, source: sourceDictionary["primaryView"])
                instance.quietingDown = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["quietingDown"])
                instance.slaveAgentPort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["slaveAgentPort"])
                instance.unlabeledLoad = Decoders.decodeOptional(clazz: UnlabeledLoadStatistics.self, source: sourceDictionary["unlabeledLoad"])
                instance.useCrumbs = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useCrumbs"])
                instance.useSecurity = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useSecurity"])
                instance.views = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["views"])
                return instance
            }


            // Decoder for [HudsonMasterComputer]
            Decoders.addDecoder(clazz: [HudsonMasterComputer].self) { (source: AnyObject) -> [HudsonMasterComputer] in
                return Decoders.decode(clazz: [HudsonMasterComputer].self, source: source)
            }
            // Decoder for HudsonMasterComputer
            Decoders.addDecoder(clazz: HudsonMasterComputer.self) { (source: AnyObject) -> HudsonMasterComputer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonMasterComputer()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.executors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["executors"])
                instance.icon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"])
                instance.iconClassName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconClassName"])
                instance.idle = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["idle"])
                instance.jnlpAgent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["jnlpAgent"])
                instance.launchSupported = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["launchSupported"])
                instance.loadStatistics = Decoders.decodeOptional(clazz: Label1.self, source: sourceDictionary["loadStatistics"])
                instance.manualLaunchAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualLaunchAllowed"])
                instance.monitorData = Decoders.decodeOptional(clazz: HudsonMasterComputermonitorData.self, source: sourceDictionary["monitorData"])
                instance.numExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numExecutors"])
                instance.offline = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["offline"])
                instance.offlineCause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offlineCause"])
                instance.offlineCauseReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offlineCauseReason"])
                instance.temporarilyOffline = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["temporarilyOffline"])
                return instance
            }


            // Decoder for [HudsonMasterComputerexecutors]
            Decoders.addDecoder(clazz: [HudsonMasterComputerexecutors].self) { (source: AnyObject) -> [HudsonMasterComputerexecutors] in
                return Decoders.decode(clazz: [HudsonMasterComputerexecutors].self, source: source)
            }
            // Decoder for HudsonMasterComputerexecutors
            Decoders.addDecoder(clazz: HudsonMasterComputerexecutors.self) { (source: AnyObject) -> HudsonMasterComputerexecutors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonMasterComputerexecutors()
                instance.currentExecutable = Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["currentExecutable"])
                instance.idle = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["idle"])
                instance.likelyStuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["likelyStuck"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonMasterComputermonitorData]
            Decoders.addDecoder(clazz: [HudsonMasterComputermonitorData].self) { (source: AnyObject) -> [HudsonMasterComputermonitorData] in
                return Decoders.decode(clazz: [HudsonMasterComputermonitorData].self, source: source)
            }
            // Decoder for HudsonMasterComputermonitorData
            Decoders.addDecoder(clazz: HudsonMasterComputermonitorData.self) { (source: AnyObject) -> HudsonMasterComputermonitorData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonMasterComputermonitorData()
                instance.hudsonNodeMonitorsSwapSpaceMonitor = Decoders.decodeOptional(clazz: SwapSpaceMonitorMemoryUsage2.self, source: sourceDictionary["hudson.node_monitors.SwapSpaceMonitor"])
                instance.hudsonNodeMonitorsTemporarySpaceMonitor = Decoders.decodeOptional(clazz: DiskSpaceMonitorDescriptorDiskSpace.self, source: sourceDictionary["hudson.node_monitors.TemporarySpaceMonitor"])
                instance.hudsonNodeMonitorsDiskSpaceMonitor = Decoders.decodeOptional(clazz: DiskSpaceMonitorDescriptorDiskSpace.self, source: sourceDictionary["hudson.node_monitors.DiskSpaceMonitor"])
                instance.hudsonNodeMonitorsArchitectureMonitor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hudson.node_monitors.ArchitectureMonitor"])
                instance.hudsonNodeMonitorsResponseTimeMonitor = Decoders.decodeOptional(clazz: ResponseTimeMonitorData.self, source: sourceDictionary["hudson.node_monitors.ResponseTimeMonitor"])
                instance.hudsonNodeMonitorsClockMonitor = Decoders.decodeOptional(clazz: ClockDifference.self, source: sourceDictionary["hudson.node_monitors.ClockMonitor"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonassignedLabels]
            Decoders.addDecoder(clazz: [HudsonassignedLabels].self) { (source: AnyObject) -> [HudsonassignedLabels] in
                return Decoders.decode(clazz: [HudsonassignedLabels].self, source: source)
            }
            // Decoder for HudsonassignedLabels
            Decoders.addDecoder(clazz: HudsonassignedLabels.self) { (source: AnyObject) -> HudsonassignedLabels in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonassignedLabels()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [InputStepImpl]
            Decoders.addDecoder(clazz: [InputStepImpl].self) { (source: AnyObject) -> [InputStepImpl] in
                return Decoders.decode(clazz: [InputStepImpl].self, source: source)
            }
            // Decoder for InputStepImpl
            Decoders.addDecoder(clazz: InputStepImpl.self) { (source: AnyObject) -> InputStepImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InputStepImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: InputStepImpllinks.self, source: sourceDictionary["_links"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.ok = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ok"])
                instance.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"])
                instance.submitter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["submitter"])
                return instance
            }


            // Decoder for [InputStepImpllinks]
            Decoders.addDecoder(clazz: [InputStepImpllinks].self) { (source: AnyObject) -> [InputStepImpllinks] in
                return Decoders.decode(clazz: [InputStepImpllinks].self, source: source)
            }
            // Decoder for InputStepImpllinks
            Decoders.addDecoder(clazz: InputStepImpllinks.self) { (source: AnyObject) -> InputStepImpllinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InputStepImpllinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [Label1]
            Decoders.addDecoder(clazz: [Label1].self) { (source: AnyObject) -> [Label1] in
                return Decoders.decode(clazz: [Label1].self, source: source)
            }
            // Decoder for Label1
            Decoders.addDecoder(clazz: Label1.self) { (source: AnyObject) -> Label1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Label1()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [Link]
            Decoders.addDecoder(clazz: [Link].self) { (source: AnyObject) -> [Link] in
                return Decoders.decode(clazz: [Link].self, source: source)
            }
            // Decoder for Link
            Decoders.addDecoder(clazz: Link.self) { (source: AnyObject) -> Link in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Link()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.href = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["href"])
                return instance
            }


            // Decoder for [ListView]
            Decoders.addDecoder(clazz: [ListView].self) { (source: AnyObject) -> [ListView] in
                return Decoders.decode(clazz: [ListView].self, source: source)
            }
            // Decoder for ListView
            Decoders.addDecoder(clazz: ListView.self) { (source: AnyObject) -> ListView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ListView()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.jobs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jobs"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [MultibranchPipeline]
            Decoders.addDecoder(clazz: [MultibranchPipeline].self) { (source: AnyObject) -> [MultibranchPipeline] in
                return Decoders.decode(clazz: [MultibranchPipeline].self, source: source)
            }
            // Decoder for MultibranchPipeline
            Decoders.addDecoder(clazz: MultibranchPipeline.self) { (source: AnyObject) -> MultibranchPipeline in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MultibranchPipeline()
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.latestRun = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestRun"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.branchNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["branchNames"])
                instance.numberOfFailingBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFailingBranches"])
                instance.numberOfFailingPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFailingPullRequests"])
                instance.numberOfSuccessfulBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfSuccessfulBranches"])
                instance.numberOfSuccessfulPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfSuccessfulPullRequests"])
                instance.totalNumberOfBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfBranches"])
                instance.totalNumberOfPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfPullRequests"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [NullSCM]
            Decoders.addDecoder(clazz: [NullSCM].self) { (source: AnyObject) -> [NullSCM] in
                return Decoders.decode(clazz: [NullSCM].self, source: source)
            }
            // Decoder for NullSCM
            Decoders.addDecoder(clazz: NullSCM.self) { (source: AnyObject) -> NullSCM in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = NullSCM()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [Organisation]
            Decoders.addDecoder(clazz: [Organisation].self) { (source: AnyObject) -> [Organisation] in
                return Decoders.decode(clazz: [Organisation].self, source: source)
            }
            // Decoder for Organisation
            Decoders.addDecoder(clazz: Organisation.self) { (source: AnyObject) -> Organisation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Organisation()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [Organisations]
            Decoders.addDecoder(clazz: [Organisations].self) { (source: AnyObject) -> [Organisations] in
                return Decoders.decode(clazz: [Organisations].self, source: source)
            }
            // Decoder for Organisations
            Decoders.addDecoder(clazz: Organisations.self) { (source: AnyObject) -> Organisations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Organisations()
                return instance
            }


            // Decoder for [Pipeline]
            Decoders.addDecoder(clazz: [Pipeline].self) { (source: AnyObject) -> [Pipeline] in
                return Decoders.decode(clazz: [Pipeline].self, source: source)
            }
            // Decoder for Pipeline
            Decoders.addDecoder(clazz: Pipeline.self) { (source: AnyObject) -> Pipeline in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pipeline()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.latestRun = Decoders.decodeOptional(clazz: PipelinelatestRun.self, source: sourceDictionary["latestRun"])
                return instance
            }


            // Decoder for [PipelineActivities]
            Decoders.addDecoder(clazz: [PipelineActivities].self) { (source: AnyObject) -> [PipelineActivities] in
                return Decoders.decode(clazz: [PipelineActivities].self, source: source)
            }
            // Decoder for PipelineActivities
            Decoders.addDecoder(clazz: PipelineActivities.self) { (source: AnyObject) -> PipelineActivities in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineActivities()
                return instance
            }


            // Decoder for [PipelineActivity]
            Decoders.addDecoder(clazz: [PipelineActivity].self) { (source: AnyObject) -> [PipelineActivity] in
                return Decoders.decode(clazz: [PipelineActivity].self, source: source)
            }
            // Decoder for PipelineActivity
            Decoders.addDecoder(clazz: PipelineActivity.self) { (source: AnyObject) -> PipelineActivity in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineActivity()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.artifacts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["artifacts"])
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"])
                instance.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"])
                return instance
            }


            // Decoder for [PipelineActivityartifacts]
            Decoders.addDecoder(clazz: [PipelineActivityartifacts].self) { (source: AnyObject) -> [PipelineActivityartifacts] in
                return Decoders.decode(clazz: [PipelineActivityartifacts].self, source: source)
            }
            // Decoder for PipelineActivityartifacts
            Decoders.addDecoder(clazz: PipelineActivityartifacts.self) { (source: AnyObject) -> PipelineActivityartifacts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineActivityartifacts()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineBranches]
            Decoders.addDecoder(clazz: [PipelineBranches].self) { (source: AnyObject) -> [PipelineBranches] in
                return Decoders.decode(clazz: [PipelineBranches].self, source: source)
            }
            // Decoder for PipelineBranches
            Decoders.addDecoder(clazz: PipelineBranches.self) { (source: AnyObject) -> PipelineBranches in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineBranches()
                return instance
            }


            // Decoder for [PipelineBranchesitem]
            Decoders.addDecoder(clazz: [PipelineBranchesitem].self) { (source: AnyObject) -> [PipelineBranchesitem] in
                return Decoders.decode(clazz: [PipelineBranchesitem].self, source: source)
            }
            // Decoder for PipelineBranchesitem
            Decoders.addDecoder(clazz: PipelineBranchesitem.self) { (source: AnyObject) -> PipelineBranchesitem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineBranchesitem()
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.latestRun = Decoders.decodeOptional(clazz: PipelineBranchesitemlatestRun.self, source: sourceDictionary["latestRun"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pullRequest = Decoders.decodeOptional(clazz: PipelineBranchesitempullRequest.self, source: sourceDictionary["pullRequest"])
                instance.totalNumberOfPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfPullRequests"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineBranchesitemlatestRun]
            Decoders.addDecoder(clazz: [PipelineBranchesitemlatestRun].self) { (source: AnyObject) -> [PipelineBranchesitemlatestRun] in
                return Decoders.decode(clazz: [PipelineBranchesitemlatestRun].self, source: source)
            }
            // Decoder for PipelineBranchesitemlatestRun
            Decoders.addDecoder(clazz: PipelineBranchesitemlatestRun.self) { (source: AnyObject) -> PipelineBranchesitemlatestRun in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineBranchesitemlatestRun()
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"])
                instance.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineBranchesitempullRequest]
            Decoders.addDecoder(clazz: [PipelineBranchesitempullRequest].self) { (source: AnyObject) -> [PipelineBranchesitempullRequest] in
                return Decoders.decode(clazz: [PipelineBranchesitempullRequest].self, source: source)
            }
            // Decoder for PipelineBranchesitempullRequest
            Decoders.addDecoder(clazz: PipelineBranchesitempullRequest.self) { (source: AnyObject) -> PipelineBranchesitempullRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineBranchesitempullRequest()
                instance.links = Decoders.decodeOptional(clazz: PipelineBranchesitempullRequestlinks.self, source: sourceDictionary["_links"])
                instance.author = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineBranchesitempullRequestlinks]
            Decoders.addDecoder(clazz: [PipelineBranchesitempullRequestlinks].self) { (source: AnyObject) -> [PipelineBranchesitempullRequestlinks] in
                return Decoders.decode(clazz: [PipelineBranchesitempullRequestlinks].self, source: source)
            }
            // Decoder for PipelineBranchesitempullRequestlinks
            Decoders.addDecoder(clazz: PipelineBranchesitempullRequestlinks.self) { (source: AnyObject) -> PipelineBranchesitempullRequestlinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineBranchesitempullRequestlinks()
                instance._self = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineFolderImpl]
            Decoders.addDecoder(clazz: [PipelineFolderImpl].self) { (source: AnyObject) -> [PipelineFolderImpl] in
                return Decoders.decode(clazz: [PipelineFolderImpl].self, source: source)
            }
            // Decoder for PipelineFolderImpl
            Decoders.addDecoder(clazz: PipelineFolderImpl.self) { (source: AnyObject) -> PipelineFolderImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineFolderImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.numberOfFolders = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFolders"])
                instance.numberOfPipelines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfPipelines"])
                return instance
            }


            // Decoder for [PipelineImpl]
            Decoders.addDecoder(clazz: [PipelineImpl].self) { (source: AnyObject) -> [PipelineImpl] in
                return Decoders.decode(clazz: [PipelineImpl].self, source: source)
            }
            // Decoder for PipelineImpl
            Decoders.addDecoder(clazz: PipelineImpl.self) { (source: AnyObject) -> PipelineImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.latestRun = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestRun"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.links = Decoders.decodeOptional(clazz: PipelineImpllinks.self, source: sourceDictionary["_links"])
                return instance
            }


            // Decoder for [PipelineImpllinks]
            Decoders.addDecoder(clazz: [PipelineImpllinks].self) { (source: AnyObject) -> [PipelineImpllinks] in
                return Decoders.decode(clazz: [PipelineImpllinks].self, source: source)
            }
            // Decoder for PipelineImpllinks
            Decoders.addDecoder(clazz: PipelineImpllinks.self) { (source: AnyObject) -> PipelineImpllinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineImpllinks()
                instance.runs = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["runs"])
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance.queue = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["queue"])
                instance.actions = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["actions"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineQueue]
            Decoders.addDecoder(clazz: [PipelineQueue].self) { (source: AnyObject) -> [PipelineQueue] in
                return Decoders.decode(clazz: [PipelineQueue].self, source: source)
            }
            // Decoder for PipelineQueue
            Decoders.addDecoder(clazz: PipelineQueue.self) { (source: AnyObject) -> PipelineQueue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineQueue()
                return instance
            }


            // Decoder for [PipelineRun]
            Decoders.addDecoder(clazz: [PipelineRun].self) { (source: AnyObject) -> [PipelineRun] in
                return Decoders.decode(clazz: [PipelineRun].self, source: source)
            }
            // Decoder for PipelineRun
            Decoders.addDecoder(clazz: PipelineRun.self) { (source: AnyObject) -> PipelineRun in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRun()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.artifacts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["artifacts"])
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"])
                instance.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"])
                return instance
            }


            // Decoder for [PipelineRunImpl]
            Decoders.addDecoder(clazz: [PipelineRunImpl].self) { (source: AnyObject) -> [PipelineRunImpl] in
                return Decoders.decode(clazz: [PipelineRunImpl].self, source: source)
            }
            // Decoder for PipelineRunImpl
            Decoders.addDecoder(clazz: PipelineRunImpl.self) { (source: AnyObject) -> PipelineRunImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRunImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: PipelineRunImpllinks.self, source: sourceDictionary["_links"])
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"])
                instance.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"])
                return instance
            }


            // Decoder for [PipelineRunImpllinks]
            Decoders.addDecoder(clazz: [PipelineRunImpllinks].self) { (source: AnyObject) -> [PipelineRunImpllinks] in
                return Decoders.decode(clazz: [PipelineRunImpllinks].self, source: source)
            }
            // Decoder for PipelineRunImpllinks
            Decoders.addDecoder(clazz: PipelineRunImpllinks.self) { (source: AnyObject) -> PipelineRunImpllinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRunImpllinks()
                instance.nodes = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["nodes"])
                instance.log = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["log"])
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance.actions = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["actions"])
                instance.steps = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["steps"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineRunNode]
            Decoders.addDecoder(clazz: [PipelineRunNode].self) { (source: AnyObject) -> [PipelineRunNode] in
                return Decoders.decode(clazz: [PipelineRunNode].self, source: source)
            }
            // Decoder for PipelineRunNode
            Decoders.addDecoder(clazz: PipelineRunNode.self) { (source: AnyObject) -> PipelineRunNode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRunNode()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.edges = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["edges"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                return instance
            }


            // Decoder for [PipelineRunNodeSteps]
            Decoders.addDecoder(clazz: [PipelineRunNodeSteps].self) { (source: AnyObject) -> [PipelineRunNodeSteps] in
                return Decoders.decode(clazz: [PipelineRunNodeSteps].self, source: source)
            }
            // Decoder for PipelineRunNodeSteps
            Decoders.addDecoder(clazz: PipelineRunNodeSteps.self) { (source: AnyObject) -> PipelineRunNodeSteps in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRunNodeSteps()
                return instance
            }


            // Decoder for [PipelineRunNodeedges]
            Decoders.addDecoder(clazz: [PipelineRunNodeedges].self) { (source: AnyObject) -> [PipelineRunNodeedges] in
                return Decoders.decode(clazz: [PipelineRunNodeedges].self, source: source)
            }
            // Decoder for PipelineRunNodeedges
            Decoders.addDecoder(clazz: PipelineRunNodeedges.self) { (source: AnyObject) -> PipelineRunNodeedges in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRunNodeedges()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineRunNodes]
            Decoders.addDecoder(clazz: [PipelineRunNodes].self) { (source: AnyObject) -> [PipelineRunNodes] in
                return Decoders.decode(clazz: [PipelineRunNodes].self, source: source)
            }
            // Decoder for PipelineRunNodes
            Decoders.addDecoder(clazz: PipelineRunNodes.self) { (source: AnyObject) -> PipelineRunNodes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRunNodes()
                return instance
            }


            // Decoder for [PipelineRunSteps]
            Decoders.addDecoder(clazz: [PipelineRunSteps].self) { (source: AnyObject) -> [PipelineRunSteps] in
                return Decoders.decode(clazz: [PipelineRunSteps].self, source: source)
            }
            // Decoder for PipelineRunSteps
            Decoders.addDecoder(clazz: PipelineRunSteps.self) { (source: AnyObject) -> PipelineRunSteps in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRunSteps()
                return instance
            }


            // Decoder for [PipelineRunartifacts]
            Decoders.addDecoder(clazz: [PipelineRunartifacts].self) { (source: AnyObject) -> [PipelineRunartifacts] in
                return Decoders.decode(clazz: [PipelineRunartifacts].self, source: source)
            }
            // Decoder for PipelineRunartifacts
            Decoders.addDecoder(clazz: PipelineRunartifacts.self) { (source: AnyObject) -> PipelineRunartifacts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRunartifacts()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelineRuns]
            Decoders.addDecoder(clazz: [PipelineRuns].self) { (source: AnyObject) -> [PipelineRuns] in
                return Decoders.decode(clazz: [PipelineRuns].self, source: source)
            }
            // Decoder for PipelineRuns
            Decoders.addDecoder(clazz: PipelineRuns.self) { (source: AnyObject) -> PipelineRuns in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineRuns()
                return instance
            }


            // Decoder for [PipelineStepImpl]
            Decoders.addDecoder(clazz: [PipelineStepImpl].self) { (source: AnyObject) -> [PipelineStepImpl] in
                return Decoders.decode(clazz: [PipelineStepImpl].self, source: source)
            }
            // Decoder for PipelineStepImpl
            Decoders.addDecoder(clazz: PipelineStepImpl.self) { (source: AnyObject) -> PipelineStepImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineStepImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: PipelineStepImpllinks.self, source: sourceDictionary["_links"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.input = Decoders.decodeOptional(clazz: InputStepImpl.self, source: sourceDictionary["input"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                return instance
            }


            // Decoder for [PipelineStepImpllinks]
            Decoders.addDecoder(clazz: [PipelineStepImpllinks].self) { (source: AnyObject) -> [PipelineStepImpllinks] in
                return Decoders.decode(clazz: [PipelineStepImpllinks].self, source: source)
            }
            // Decoder for PipelineStepImpllinks
            Decoders.addDecoder(clazz: PipelineStepImpllinks.self) { (source: AnyObject) -> PipelineStepImpllinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelineStepImpllinks()
                instance._self = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"])
                instance.actions = Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["actions"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelinelatestRun]
            Decoders.addDecoder(clazz: [PipelinelatestRun].self) { (source: AnyObject) -> [PipelinelatestRun] in
                return Decoders.decode(clazz: [PipelinelatestRun].self, source: source)
            }
            // Decoder for PipelinelatestRun
            Decoders.addDecoder(clazz: PipelinelatestRun.self) { (source: AnyObject) -> PipelinelatestRun in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelinelatestRun()
                instance.artifacts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["artifacts"])
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"])
                instance.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [PipelinelatestRunartifacts]
            Decoders.addDecoder(clazz: [PipelinelatestRunartifacts].self) { (source: AnyObject) -> [PipelinelatestRunartifacts] in
                return Decoders.decode(clazz: [PipelinelatestRunartifacts].self, source: source)
            }
            // Decoder for PipelinelatestRunartifacts
            Decoders.addDecoder(clazz: PipelinelatestRunartifacts.self) { (source: AnyObject) -> PipelinelatestRunartifacts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PipelinelatestRunartifacts()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [Pipelines]
            Decoders.addDecoder(clazz: [Pipelines].self) { (source: AnyObject) -> [Pipelines] in
                return Decoders.decode(clazz: [Pipelines].self, source: source)
            }
            // Decoder for Pipelines
            Decoders.addDecoder(clazz: Pipelines.self) { (source: AnyObject) -> Pipelines in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pipelines()
                return instance
            }


            // Decoder for [Queue]
            Decoders.addDecoder(clazz: [Queue].self) { (source: AnyObject) -> [Queue] in
                return Decoders.decode(clazz: [Queue].self, source: source)
            }
            // Decoder for Queue
            Decoders.addDecoder(clazz: Queue.self) { (source: AnyObject) -> Queue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Queue()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [QueueBlockedItem]
            Decoders.addDecoder(clazz: [QueueBlockedItem].self) { (source: AnyObject) -> [QueueBlockedItem] in
                return Decoders.decode(clazz: [QueueBlockedItem].self, source: source)
            }
            // Decoder for QueueBlockedItem
            Decoders.addDecoder(clazz: QueueBlockedItem.self) { (source: AnyObject) -> QueueBlockedItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueueBlockedItem()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.blocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["blocked"])
                instance.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.inQueueSince = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inQueueSince"])
                instance.params = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["params"])
                instance.stuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stuck"])
                instance.task = Decoders.decodeOptional(clazz: FreeStyleProject.self, source: sourceDictionary["task"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.why = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["why"])
                instance.buildableStartMilliseconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["buildableStartMilliseconds"])
                return instance
            }


            // Decoder for [QueueItemImpl]
            Decoders.addDecoder(clazz: [QueueItemImpl].self) { (source: AnyObject) -> [QueueItemImpl] in
                return Decoders.decode(clazz: [QueueItemImpl].self, source: source)
            }
            // Decoder for QueueItemImpl
            Decoders.addDecoder(clazz: QueueItemImpl.self) { (source: AnyObject) -> QueueItemImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueueItemImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.expectedBuildNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expectedBuildNumber"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"])
                instance.queuedTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queuedTime"])
                return instance
            }


            // Decoder for [QueueLeftItem]
            Decoders.addDecoder(clazz: [QueueLeftItem].self) { (source: AnyObject) -> [QueueLeftItem] in
                return Decoders.decode(clazz: [QueueLeftItem].self, source: source)
            }
            // Decoder for QueueLeftItem
            Decoders.addDecoder(clazz: QueueLeftItem.self) { (source: AnyObject) -> QueueLeftItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueueLeftItem()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.blocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["blocked"])
                instance.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.inQueueSince = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inQueueSince"])
                instance.params = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["params"])
                instance.stuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stuck"])
                instance.task = Decoders.decodeOptional(clazz: FreeStyleProject.self, source: sourceDictionary["task"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.why = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["why"])
                instance.cancelled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cancelled"])
                instance.executable = Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["executable"])
                return instance
            }


            // Decoder for [ResponseTimeMonitorData]
            Decoders.addDecoder(clazz: [ResponseTimeMonitorData].self) { (source: AnyObject) -> [ResponseTimeMonitorData] in
                return Decoders.decode(clazz: [ResponseTimeMonitorData].self, source: source)
            }
            // Decoder for ResponseTimeMonitorData
            Decoders.addDecoder(clazz: ResponseTimeMonitorData.self) { (source: AnyObject) -> ResponseTimeMonitorData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeMonitorData()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"])
                instance.average = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["average"])
                return instance
            }


            // Decoder for [ScmOrganisations]
            Decoders.addDecoder(clazz: [ScmOrganisations].self) { (source: AnyObject) -> [ScmOrganisations] in
                return Decoders.decode(clazz: [ScmOrganisations].self, source: source)
            }
            // Decoder for ScmOrganisations
            Decoders.addDecoder(clazz: ScmOrganisations.self) { (source: AnyObject) -> ScmOrganisations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ScmOrganisations()
                return instance
            }


            // Decoder for [StringParameterDefinition]
            Decoders.addDecoder(clazz: [StringParameterDefinition].self) { (source: AnyObject) -> [StringParameterDefinition] in
                return Decoders.decode(clazz: [StringParameterDefinition].self, source: source)
            }
            // Decoder for StringParameterDefinition
            Decoders.addDecoder(clazz: StringParameterDefinition.self) { (source: AnyObject) -> StringParameterDefinition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StringParameterDefinition()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.defaultParameterValue = Decoders.decodeOptional(clazz: StringParameterValue.self, source: sourceDictionary["defaultParameterValue"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [StringParameterValue]
            Decoders.addDecoder(clazz: [StringParameterValue].self) { (source: AnyObject) -> [StringParameterValue] in
                return Decoders.decode(clazz: [StringParameterValue].self, source: source)
            }
            // Decoder for StringParameterValue
            Decoders.addDecoder(clazz: StringParameterValue.self) { (source: AnyObject) -> StringParameterValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = StringParameterValue()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [SwapSpaceMonitorMemoryUsage2]
            Decoders.addDecoder(clazz: [SwapSpaceMonitorMemoryUsage2].self) { (source: AnyObject) -> [SwapSpaceMonitorMemoryUsage2] in
                return Decoders.decode(clazz: [SwapSpaceMonitorMemoryUsage2].self, source: source)
            }
            // Decoder for SwapSpaceMonitorMemoryUsage2
            Decoders.addDecoder(clazz: SwapSpaceMonitorMemoryUsage2.self) { (source: AnyObject) -> SwapSpaceMonitorMemoryUsage2 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwapSpaceMonitorMemoryUsage2()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.availablePhysicalMemory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["availablePhysicalMemory"])
                instance.availableSwapSpace = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["availableSwapSpace"])
                instance.totalPhysicalMemory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalPhysicalMemory"])
                instance.totalSwapSpace = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalSwapSpace"])
                return instance
            }


            // Decoder for [UnlabeledLoadStatistics]
            Decoders.addDecoder(clazz: [UnlabeledLoadStatistics].self) { (source: AnyObject) -> [UnlabeledLoadStatistics] in
                return Decoders.decode(clazz: [UnlabeledLoadStatistics].self, source: source)
            }
            // Decoder for UnlabeledLoadStatistics
            Decoders.addDecoder(clazz: UnlabeledLoadStatistics.self) { (source: AnyObject) -> UnlabeledLoadStatistics in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UnlabeledLoadStatistics()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
            // Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [UserFavorites]
            Decoders.addDecoder(clazz: [UserFavorites].self) { (source: AnyObject) -> [UserFavorites] in
                return Decoders.decode(clazz: [UserFavorites].self, source: source)
            }
            // Decoder for UserFavorites
            Decoders.addDecoder(clazz: UserFavorites.self) { (source: AnyObject) -> UserFavorites in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserFavorites()
                return instance
            }


            // Decoder for [Users]
            Decoders.addDecoder(clazz: [Users].self) { (source: AnyObject) -> [Users] in
                return Decoders.decode(clazz: [Users].self, source: source)
            }
            // Decoder for Users
            Decoders.addDecoder(clazz: Users.self) { (source: AnyObject) -> Users in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Users()
                return instance
            }
        }
    }
}
