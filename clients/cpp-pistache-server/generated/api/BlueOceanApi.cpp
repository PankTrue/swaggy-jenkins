/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.0.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "BlueOceanApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

BlueOceanApi::BlueOceanApi(Pistache::Address addr)
    : httpEndpoint(addr)
{ };

void BlueOceanApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr)
        .flags(Pistache::Tcp::Options::InstallSignalHandler);
    httpEndpoint.init(opts);
    setupRoutes();
}

void BlueOceanApi::start() {
    httpEndpoint.setHandler(router.handler());
    httpEndpoint.serve();
}

void BlueOceanApi::shutdown() {
    httpEndpoint.shutdown();
}

void BlueOceanApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Delete(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/queue/:queue", Routes::bind(&BlueOceanApi::delete_pipeline_queue_item_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/user/", Routes::bind(&BlueOceanApi::get_authenticated_user_handler, this));
    Routes::Get(router, base + "/blue/rest/classes/:class", Routes::bind(&BlueOceanApi::get_classes_handler, this));
    Routes::Get(router, base + "/jwt-auth/jwks/:key", Routes::bind(&BlueOceanApi::get_json_web_key_handler, this));
    Routes::Get(router, base + "/jwt-auth/token", Routes::bind(&BlueOceanApi::get_json_web_token_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization", Routes::bind(&BlueOceanApi::get_organisation_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/", Routes::bind(&BlueOceanApi::get_organisations_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline", Routes::bind(&BlueOceanApi::get_pipeline_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/activities", Routes::bind(&BlueOceanApi::get_pipeline_activities_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/branches/:branch/", Routes::bind(&BlueOceanApi::get_pipeline_branch_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/branches/:branch/runs/:run", Routes::bind(&BlueOceanApi::get_pipeline_branch_run_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/branches", Routes::bind(&BlueOceanApi::get_pipeline_branches_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:folder/", Routes::bind(&BlueOceanApi::get_pipeline_folder_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:folder/pipelines/:pipeline", Routes::bind(&BlueOceanApi::get_pipeline_folder_pipeline_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/queue", Routes::bind(&BlueOceanApi::get_pipeline_queue_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run", Routes::bind(&BlueOceanApi::get_pipeline_run_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/log", Routes::bind(&BlueOceanApi::get_pipeline_run_log_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node", Routes::bind(&BlueOceanApi::get_pipeline_run_node_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps/:step", Routes::bind(&BlueOceanApi::get_pipeline_run_node_step_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps/:step/log", Routes::bind(&BlueOceanApi::get_pipeline_run_node_step_log_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps", Routes::bind(&BlueOceanApi::get_pipeline_run_node_steps_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes", Routes::bind(&BlueOceanApi::get_pipeline_run_nodes_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs", Routes::bind(&BlueOceanApi::get_pipeline_runs_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/pipelines/", Routes::bind(&BlueOceanApi::get_pipelines_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/scm/:scm", Routes::bind(&BlueOceanApi::get_scm_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/scm/:scm/organizations/:scmOrganisation/repositories", Routes::bind(&BlueOceanApi::get_scm_organisation_repositories_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/scm/:scm/organizations/:scmOrganisation/repositories/:repository", Routes::bind(&BlueOceanApi::get_scm_organisation_repository_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/scm/:scm/organizations", Routes::bind(&BlueOceanApi::get_scm_organisations_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/users/:user", Routes::bind(&BlueOceanApi::get_user_handler, this));
    Routes::Get(router, base + "/blue/rest/users/:user/favorites", Routes::bind(&BlueOceanApi::get_user_favorites_handler, this));
    Routes::Get(router, base + "/blue/rest/organizations/:organization/users/", Routes::bind(&BlueOceanApi::get_users_handler, this));
    Routes::Post(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/replay", Routes::bind(&BlueOceanApi::post_pipeline_run_handler, this));
    Routes::Post(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs", Routes::bind(&BlueOceanApi::post_pipeline_runs_handler, this));
    Routes::Put(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/favorite", Routes::bind(&BlueOceanApi::put_pipeline_favorite_handler, this));
    Routes::Put(router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/stop", Routes::bind(&BlueOceanApi::put_pipeline_run_handler, this));
    Routes::Get(router, base + "/blue/rest/search/", Routes::bind(&BlueOceanApi::search_handler, this));
    Routes::Get(router, base + "/blue/rest/classes/", Routes::bind(&BlueOceanApi::search_classes_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&BlueOceanApi::blue_ocean_api_default_handler, this));
}

void BlueOceanApi::delete_pipeline_queue_item_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto queue = request.param(":queue").as<std::string>();
    
    try {
      this->delete_pipeline_queue_item(organization, pipeline, queue, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_authenticated_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    
    try {
      this->get_authenticated_user(organization, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_classes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto class = request.param(":class").as<std::string>();
    
    try {
      this->get_classes(class, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_json_web_key_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto key = request.param(":key").as<int32_t>();
    
    try {
      this->get_json_web_key(key, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_json_web_token_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto expiryTimeInMins = request.query().get("expiryTimeInMins");
    auto maxExpiryTimeInMins = request.query().get("maxExpiryTimeInMins");
    
    try {
      this->get_json_web_token(expiryTimeInMins, maxExpiryTimeInMins, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_organisation_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    
    try {
      this->get_organisation(organization, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_organisations_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_organisations(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
      this->get_pipeline(organization, pipeline, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_activities_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
      this->get_pipeline_activities(organization, pipeline, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_branch_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto branch = request.param(":branch").as<std::string>();
    
    try {
      this->get_pipeline_branch(organization, pipeline, branch, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_branch_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto branch = request.param(":branch").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    try {
      this->get_pipeline_branch_run(organization, pipeline, branch, run, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_branches_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
      this->get_pipeline_branches(organization, pipeline, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_folder_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto folder = request.param(":folder").as<std::string>();
    
    try {
      this->get_pipeline_folder(organization, folder, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_folder_pipeline_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto folder = request.param(":folder").as<std::string>();
    
    try {
      this->get_pipeline_folder_pipeline(organization, pipeline, folder, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_queue_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
      this->get_pipeline_queue(organization, pipeline, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    try {
      this->get_pipeline_run(organization, pipeline, run, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_run_log_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    // Getting the query params
    auto start = request.query().get("start");
    auto download = request.query().get("download");
    
    try {
      this->get_pipeline_run_log(organization, pipeline, run, start, download, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_run_node_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    auto node = request.param(":node").as<std::string>();
    
    try {
      this->get_pipeline_run_node(organization, pipeline, run, node, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_run_node_step_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    auto node = request.param(":node").as<std::string>();
    auto step = request.param(":step").as<std::string>();
    
    try {
      this->get_pipeline_run_node_step(organization, pipeline, run, node, step, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_run_node_step_log_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    auto node = request.param(":node").as<std::string>();
    auto step = request.param(":step").as<std::string>();
    
    try {
      this->get_pipeline_run_node_step_log(organization, pipeline, run, node, step, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_run_node_steps_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    auto node = request.param(":node").as<std::string>();
    
    try {
      this->get_pipeline_run_node_steps(organization, pipeline, run, node, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_run_nodes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    try {
      this->get_pipeline_run_nodes(organization, pipeline, run, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipeline_runs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
      this->get_pipeline_runs(organization, pipeline, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_pipelines_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    
    try {
      this->get_pipelines(organization, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_scm_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto scm = request.param(":scm").as<std::string>();
    
    try {
      this->get_scm(organization, scm, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_scm_organisation_repositories_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto scm = request.param(":scm").as<std::string>();
    auto scmOrganisation = request.param(":scmOrganisation").as<std::string>();
    
    // Getting the query params
    auto credentialId = request.query().get("credentialId");
    auto pageSize = request.query().get("pageSize");
    auto pageNumber = request.query().get("pageNumber");
    
    try {
      this->get_scm_organisation_repositories(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_scm_organisation_repository_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto scm = request.param(":scm").as<std::string>();
    auto scmOrganisation = request.param(":scmOrganisation").as<std::string>();
    auto repository = request.param(":repository").as<std::string>();
    
    // Getting the query params
    auto credentialId = request.query().get("credentialId");
    
    try {
      this->get_scm_organisation_repository(organization, scm, scmOrganisation, repository, credentialId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_scm_organisations_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto scm = request.param(":scm").as<std::string>();
    
    // Getting the query params
    auto credentialId = request.query().get("credentialId");
    
    try {
      this->get_scm_organisations(organization, scm, credentialId, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto user = request.param(":user").as<std::string>();
    
    try {
      this->get_user(organization, user, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_user_favorites_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto user = request.param(":user").as<std::string>();
    
    try {
      this->get_user_favorites(user, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::get_users_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    
    try {
      this->get_users(organization, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::post_pipeline_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    try {
      this->post_pipeline_run(organization, pipeline, run, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::post_pipeline_runs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
      this->post_pipeline_runs(organization, pipeline, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::put_pipeline_favorite_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    // Getting the body param
    
    Body body;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      body.fromJson(request_body);
    
      this->put_pipeline_favorite(organization, pipeline, body, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::put_pipeline_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    // Getting the query params
    auto blocking = request.query().get("blocking");
    auto timeOutInSecs = request.query().get("timeOutInSecs");
    
    try {
      this->put_pipeline_run(organization, pipeline, run, blocking, timeOutInSecs, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::search_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto q = request.query().get("q");
    
    try {
      this->search(q, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void BlueOceanApi::search_classes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto q = request.query().get("q");
    
    try {
      this->search_classes(q, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void BlueOceanApi::blue_ocean_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

