/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "InputStepImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

InputStepImpl::InputStepImpl()
{
    m__class = "";
    m__classIsSet = false;
    m__linksIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Message = "";
    m_MessageIsSet = false;
    m_Ok = "";
    m_OkIsSet = false;
    m_ParametersIsSet = false;
    m_Submitter = "";
    m_SubmitterIsSet = false;
    
}

InputStepImpl::~InputStepImpl()
{
}

void InputStepImpl::validate()
{
    // TODO: implement validation
}

nlohmann::json InputStepImpl::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val["_links"] = ModelBase::toJson(m__links);
    }
    if(m_IdIsSet)
    {
        val["id"] = ModelBase::toJson(m_Id);
    }
    if(m_MessageIsSet)
    {
        val["message"] = ModelBase::toJson(m_Message);
    }
    if(m_OkIsSet)
    {
        val["ok"] = ModelBase::toJson(m_Ok);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Parameters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["parameters"] = jsonArray;
        }
    }
    if(m_SubmitterIsSet)
    {
        val["submitter"] = ModelBase::toJson(m_Submitter);
    }
    

    return val;
}

void InputStepImpl::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    if(val.find("_links") != val.end())
    {
        if(!val["_links"].is_null())
        {
            InputStepImpllinks newItem;
            newItem.fromJson(val["_links"]);
            setLinks( newItem );
        }
        
    }
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("message") != val.end())
    {
        setMessage(val.at("message"));
    }
    if(val.find("ok") != val.end())
    {
        setOk(val.at("ok"));
    }
    {
        m_Parameters.clear();
        nlohmann::json jsonArray;
        if(val.find("parameters") != val.end())
        {
        for( auto& item : val["parameters"] )
        {
            
            if(item.is_null())
            {
                m_Parameters.push_back( StringParameterDefinition() );
            }
            else
            {
                StringParameterDefinition newItem;
                newItem.fromJson(item);
                m_Parameters.push_back( newItem );
            }
            
        }
        }
    }
    if(val.find("submitter") != val.end())
    {
        setSubmitter(val.at("submitter"));
    }
    
}


std::string InputStepImpl::getClass() const
{
    return m__class;
}
void InputStepImpl::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool InputStepImpl::classIsSet() const
{
    return m__classIsSet;
}
void InputStepImpl::unset_class()
{
    m__classIsSet = false;
}
InputStepImpllinks InputStepImpl::getLinks() const
{
    return m__links;
}
void InputStepImpl::setLinks(InputStepImpllinks const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool InputStepImpl::linksIsSet() const
{
    return m__linksIsSet;
}
void InputStepImpl::unset_links()
{
    m__linksIsSet = false;
}
std::string InputStepImpl::getId() const
{
    return m_Id;
}
void InputStepImpl::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool InputStepImpl::idIsSet() const
{
    return m_IdIsSet;
}
void InputStepImpl::unsetId()
{
    m_IdIsSet = false;
}
std::string InputStepImpl::getMessage() const
{
    return m_Message;
}
void InputStepImpl::setMessage(std::string const& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool InputStepImpl::messageIsSet() const
{
    return m_MessageIsSet;
}
void InputStepImpl::unsetMessage()
{
    m_MessageIsSet = false;
}
std::string InputStepImpl::getOk() const
{
    return m_Ok;
}
void InputStepImpl::setOk(std::string const& value)
{
    m_Ok = value;
    m_OkIsSet = true;
}
bool InputStepImpl::okIsSet() const
{
    return m_OkIsSet;
}
void InputStepImpl::unsetOk()
{
    m_OkIsSet = false;
}
std::vector<StringParameterDefinition>& InputStepImpl::getParameters()
{
    return m_Parameters;
}
bool InputStepImpl::parametersIsSet() const
{
    return m_ParametersIsSet;
}
void InputStepImpl::unsetParameters()
{
    m_ParametersIsSet = false;
}
std::string InputStepImpl::getSubmitter() const
{
    return m_Submitter;
}
void InputStepImpl::setSubmitter(std::string const& value)
{
    m_Submitter = value;
    m_SubmitterIsSet = true;
}
bool InputStepImpl::submitterIsSet() const
{
    return m_SubmitterIsSet;
}
void InputStepImpl::unsetSubmitter()
{
    m_SubmitterIsSet = false;
}

}
}
}
}

