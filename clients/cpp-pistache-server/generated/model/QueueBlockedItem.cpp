/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.0.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "QueueBlockedItem.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

QueueBlockedItem::QueueBlockedItem()
{
    m__class = "";
    m__classIsSet = false;
    m_ActionsIsSet = false;
    m_Blocked = false;
    m_BlockedIsSet = false;
    m_Buildable = false;
    m_BuildableIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_InQueueSince = 0;
    m_InQueueSinceIsSet = false;
    m_Params = "";
    m_ParamsIsSet = false;
    m_Stuck = false;
    m_StuckIsSet = false;
    m_TaskIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    m_Why = "";
    m_WhyIsSet = false;
    m_BuildableStartMilliseconds = 0;
    m_BuildableStartMillisecondsIsSet = false;
    
}

QueueBlockedItem::~QueueBlockedItem()
{
}

void QueueBlockedItem::validate()
{
    // TODO: implement validation
}

nlohmann::json QueueBlockedItem::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Actions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["actions"] = jsonArray;
        }
    }
    if(m_BlockedIsSet)
    {
        val["blocked"] = m_Blocked;
    }
    if(m_BuildableIsSet)
    {
        val["buildable"] = m_Buildable;
    }
    if(m_IdIsSet)
    {
        val["id"] = m_Id;
    }
    if(m_InQueueSinceIsSet)
    {
        val["inQueueSince"] = m_InQueueSince;
    }
    if(m_ParamsIsSet)
    {
        val["params"] = ModelBase::toJson(m_Params);
    }
    if(m_StuckIsSet)
    {
        val["stuck"] = m_Stuck;
    }
    if(m_TaskIsSet)
    {
        val["task"] = ModelBase::toJson(m_Task);
    }
    if(m_UrlIsSet)
    {
        val["url"] = ModelBase::toJson(m_Url);
    }
    if(m_WhyIsSet)
    {
        val["why"] = ModelBase::toJson(m_Why);
    }
    if(m_BuildableStartMillisecondsIsSet)
    {
        val["buildableStartMilliseconds"] = m_BuildableStartMilliseconds;
    }
    

    return val;
}

void QueueBlockedItem::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    {
        m_Actions.clear();
        nlohmann::json jsonArray;
        if(val.find("actions") != val.end())
        {
        for( auto& item : val["actions"] )
        {
            
            if(item.is_null())
            {
                m_Actions.push_back( CauseAction() );
            }
            else
            {
                CauseAction newItem;
                newItem.fromJson(item);
                m_Actions.push_back( newItem );
            }
            
        }
        }
    }
    if(val.find("blocked") != val.end())
    {
        setBlocked(val.at("blocked"));
    }
    if(val.find("buildable") != val.end())
    {
        setBuildable(val.at("buildable"));
    }
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("inQueueSince") != val.end())
    {
        setInQueueSince(val.at("inQueueSince"));
    }
    if(val.find("params") != val.end())
    {
        setParams(val.at("params"));
    }
    if(val.find("stuck") != val.end())
    {
        setStuck(val.at("stuck"));
    }
    if(val.find("task") != val.end())
    {
        if(!val["task"].is_null())
        {
            FreeStyleProject newItem;
            newItem.fromJson(val["task"]);
            setTask( newItem );
        }
        
    }
    if(val.find("url") != val.end())
    {
        setUrl(val.at("url"));
    }
    if(val.find("why") != val.end())
    {
        setWhy(val.at("why"));
    }
    if(val.find("buildableStartMilliseconds") != val.end())
    {
        setBuildableStartMilliseconds(val.at("buildableStartMilliseconds"));
    }
    
}


std::string QueueBlockedItem::getClass() const
{
    return m__class;
}
void QueueBlockedItem::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool QueueBlockedItem::classIsSet() const
{
    return m__classIsSet;
}
void QueueBlockedItem::unset_class()
{
    m__classIsSet = false;
}
std::vector<CauseAction>& QueueBlockedItem::getActions()
{
    return m_Actions;
}
bool QueueBlockedItem::actionsIsSet() const
{
    return m_ActionsIsSet;
}
void QueueBlockedItem::unsetActions()
{
    m_ActionsIsSet = false;
}
bool QueueBlockedItem::isBlocked() const
{
    return m_Blocked;
}
void QueueBlockedItem::setBlocked(bool const value)
{
    m_Blocked = value;
    m_BlockedIsSet = true;
}
bool QueueBlockedItem::blockedIsSet() const
{
    return m_BlockedIsSet;
}
void QueueBlockedItem::unsetBlocked()
{
    m_BlockedIsSet = false;
}
bool QueueBlockedItem::isBuildable() const
{
    return m_Buildable;
}
void QueueBlockedItem::setBuildable(bool const value)
{
    m_Buildable = value;
    m_BuildableIsSet = true;
}
bool QueueBlockedItem::buildableIsSet() const
{
    return m_BuildableIsSet;
}
void QueueBlockedItem::unsetBuildable()
{
    m_BuildableIsSet = false;
}
int32_t QueueBlockedItem::getId() const
{
    return m_Id;
}
void QueueBlockedItem::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool QueueBlockedItem::idIsSet() const
{
    return m_IdIsSet;
}
void QueueBlockedItem::unsetId()
{
    m_IdIsSet = false;
}
int32_t QueueBlockedItem::getInQueueSince() const
{
    return m_InQueueSince;
}
void QueueBlockedItem::setInQueueSince(int32_t const value)
{
    m_InQueueSince = value;
    m_InQueueSinceIsSet = true;
}
bool QueueBlockedItem::inQueueSinceIsSet() const
{
    return m_InQueueSinceIsSet;
}
void QueueBlockedItem::unsetInQueueSince()
{
    m_InQueueSinceIsSet = false;
}
std::string QueueBlockedItem::getParams() const
{
    return m_Params;
}
void QueueBlockedItem::setParams(std::string const& value)
{
    m_Params = value;
    m_ParamsIsSet = true;
}
bool QueueBlockedItem::paramsIsSet() const
{
    return m_ParamsIsSet;
}
void QueueBlockedItem::unsetParams()
{
    m_ParamsIsSet = false;
}
bool QueueBlockedItem::isStuck() const
{
    return m_Stuck;
}
void QueueBlockedItem::setStuck(bool const value)
{
    m_Stuck = value;
    m_StuckIsSet = true;
}
bool QueueBlockedItem::stuckIsSet() const
{
    return m_StuckIsSet;
}
void QueueBlockedItem::unsetStuck()
{
    m_StuckIsSet = false;
}
FreeStyleProject QueueBlockedItem::getTask() const
{
    return m_Task;
}
void QueueBlockedItem::setTask(FreeStyleProject const& value)
{
    m_Task = value;
    m_TaskIsSet = true;
}
bool QueueBlockedItem::taskIsSet() const
{
    return m_TaskIsSet;
}
void QueueBlockedItem::unsetTask()
{
    m_TaskIsSet = false;
}
std::string QueueBlockedItem::getUrl() const
{
    return m_Url;
}
void QueueBlockedItem::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool QueueBlockedItem::urlIsSet() const
{
    return m_UrlIsSet;
}
void QueueBlockedItem::unsetUrl()
{
    m_UrlIsSet = false;
}
std::string QueueBlockedItem::getWhy() const
{
    return m_Why;
}
void QueueBlockedItem::setWhy(std::string const& value)
{
    m_Why = value;
    m_WhyIsSet = true;
}
bool QueueBlockedItem::whyIsSet() const
{
    return m_WhyIsSet;
}
void QueueBlockedItem::unsetWhy()
{
    m_WhyIsSet = false;
}
int32_t QueueBlockedItem::getBuildableStartMilliseconds() const
{
    return m_BuildableStartMilliseconds;
}
void QueueBlockedItem::setBuildableStartMilliseconds(int32_t const value)
{
    m_BuildableStartMilliseconds = value;
    m_BuildableStartMillisecondsIsSet = true;
}
bool QueueBlockedItem::buildableStartMillisecondsIsSet() const
{
    return m_BuildableStartMillisecondsIsSet;
}
void QueueBlockedItem::unsetBuildableStartMilliseconds()
{
    m_BuildableStartMillisecondsIsSet = false;
}

}
}
}
}

