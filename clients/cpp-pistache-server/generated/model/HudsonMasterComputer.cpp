/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "HudsonMasterComputer.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

HudsonMasterComputer::HudsonMasterComputer()
{
    m__class = "";
    m__classIsSet = false;
    m_DisplayName = "";
    m_DisplayNameIsSet = false;
    m_ExecutorsIsSet = false;
    m_Icon = "";
    m_IconIsSet = false;
    m_IconClassName = "";
    m_IconClassNameIsSet = false;
    m_Idle = false;
    m_IdleIsSet = false;
    m_JnlpAgent = false;
    m_JnlpAgentIsSet = false;
    m_LaunchSupported = false;
    m_LaunchSupportedIsSet = false;
    m_LoadStatisticsIsSet = false;
    m_ManualLaunchAllowed = false;
    m_ManualLaunchAllowedIsSet = false;
    m_MonitorDataIsSet = false;
    m_NumExecutors = 0;
    m_NumExecutorsIsSet = false;
    m_Offline = false;
    m_OfflineIsSet = false;
    m_OfflineCause = "";
    m_OfflineCauseIsSet = false;
    m_OfflineCauseReason = "";
    m_OfflineCauseReasonIsSet = false;
    m_TemporarilyOffline = false;
    m_TemporarilyOfflineIsSet = false;
    
}

HudsonMasterComputer::~HudsonMasterComputer()
{
}

void HudsonMasterComputer::validate()
{
    // TODO: implement validation
}

nlohmann::json HudsonMasterComputer::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m_DisplayNameIsSet)
    {
        val["displayName"] = ModelBase::toJson(m_DisplayName);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Executors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["executors"] = jsonArray;
        }
    }
    if(m_IconIsSet)
    {
        val["icon"] = ModelBase::toJson(m_Icon);
    }
    if(m_IconClassNameIsSet)
    {
        val["iconClassName"] = ModelBase::toJson(m_IconClassName);
    }
    if(m_IdleIsSet)
    {
        val["idle"] = m_Idle;
    }
    if(m_JnlpAgentIsSet)
    {
        val["jnlpAgent"] = m_JnlpAgent;
    }
    if(m_LaunchSupportedIsSet)
    {
        val["launchSupported"] = m_LaunchSupported;
    }
    if(m_LoadStatisticsIsSet)
    {
        val["loadStatistics"] = ModelBase::toJson(m_LoadStatistics);
    }
    if(m_ManualLaunchAllowedIsSet)
    {
        val["manualLaunchAllowed"] = m_ManualLaunchAllowed;
    }
    if(m_MonitorDataIsSet)
    {
        val["monitorData"] = ModelBase::toJson(m_MonitorData);
    }
    if(m_NumExecutorsIsSet)
    {
        val["numExecutors"] = m_NumExecutors;
    }
    if(m_OfflineIsSet)
    {
        val["offline"] = m_Offline;
    }
    if(m_OfflineCauseIsSet)
    {
        val["offlineCause"] = ModelBase::toJson(m_OfflineCause);
    }
    if(m_OfflineCauseReasonIsSet)
    {
        val["offlineCauseReason"] = ModelBase::toJson(m_OfflineCauseReason);
    }
    if(m_TemporarilyOfflineIsSet)
    {
        val["temporarilyOffline"] = m_TemporarilyOffline;
    }
    

    return val;
}

void HudsonMasterComputer::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    if(val.find("displayName") != val.end())
    {
        setDisplayName(val.at("displayName"));
    }
    {
        m_Executors.clear();
        nlohmann::json jsonArray;
        if(val.find("executors") != val.end())
        {
        for( auto& item : val["executors"] )
        {
            
            if(item.is_null())
            {
                m_Executors.push_back( HudsonMasterComputerexecutors() );
            }
            else
            {
                HudsonMasterComputerexecutors newItem;
                newItem.fromJson(item);
                m_Executors.push_back( newItem );
            }
            
        }
        }
    }
    if(val.find("icon") != val.end())
    {
        setIcon(val.at("icon"));
    }
    if(val.find("iconClassName") != val.end())
    {
        setIconClassName(val.at("iconClassName"));
    }
    if(val.find("idle") != val.end())
    {
        setIdle(val.at("idle"));
    }
    if(val.find("jnlpAgent") != val.end())
    {
        setJnlpAgent(val.at("jnlpAgent"));
    }
    if(val.find("launchSupported") != val.end())
    {
        setLaunchSupported(val.at("launchSupported"));
    }
    if(val.find("loadStatistics") != val.end())
    {
        if(!val["loadStatistics"].is_null())
        {
            Label1 newItem;
            newItem.fromJson(val["loadStatistics"]);
            setLoadStatistics( newItem );
        }
        
    }
    if(val.find("manualLaunchAllowed") != val.end())
    {
        setManualLaunchAllowed(val.at("manualLaunchAllowed"));
    }
    if(val.find("monitorData") != val.end())
    {
        if(!val["monitorData"].is_null())
        {
            HudsonMasterComputermonitorData newItem;
            newItem.fromJson(val["monitorData"]);
            setMonitorData( newItem );
        }
        
    }
    if(val.find("numExecutors") != val.end())
    {
        setNumExecutors(val.at("numExecutors"));
    }
    if(val.find("offline") != val.end())
    {
        setOffline(val.at("offline"));
    }
    if(val.find("offlineCause") != val.end())
    {
        setOfflineCause(val.at("offlineCause"));
    }
    if(val.find("offlineCauseReason") != val.end())
    {
        setOfflineCauseReason(val.at("offlineCauseReason"));
    }
    if(val.find("temporarilyOffline") != val.end())
    {
        setTemporarilyOffline(val.at("temporarilyOffline"));
    }
    
}


std::string HudsonMasterComputer::getClass() const
{
    return m__class;
}
void HudsonMasterComputer::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool HudsonMasterComputer::classIsSet() const
{
    return m__classIsSet;
}
void HudsonMasterComputer::unset_class()
{
    m__classIsSet = false;
}
std::string HudsonMasterComputer::getDisplayName() const
{
    return m_DisplayName;
}
void HudsonMasterComputer::setDisplayName(std::string const& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool HudsonMasterComputer::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}
void HudsonMasterComputer::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
std::vector<HudsonMasterComputerexecutors>& HudsonMasterComputer::getExecutors()
{
    return m_Executors;
}
bool HudsonMasterComputer::executorsIsSet() const
{
    return m_ExecutorsIsSet;
}
void HudsonMasterComputer::unsetExecutors()
{
    m_ExecutorsIsSet = false;
}
std::string HudsonMasterComputer::getIcon() const
{
    return m_Icon;
}
void HudsonMasterComputer::setIcon(std::string const& value)
{
    m_Icon = value;
    m_IconIsSet = true;
}
bool HudsonMasterComputer::iconIsSet() const
{
    return m_IconIsSet;
}
void HudsonMasterComputer::unsetIcon()
{
    m_IconIsSet = false;
}
std::string HudsonMasterComputer::getIconClassName() const
{
    return m_IconClassName;
}
void HudsonMasterComputer::setIconClassName(std::string const& value)
{
    m_IconClassName = value;
    m_IconClassNameIsSet = true;
}
bool HudsonMasterComputer::iconClassNameIsSet() const
{
    return m_IconClassNameIsSet;
}
void HudsonMasterComputer::unsetIconClassName()
{
    m_IconClassNameIsSet = false;
}
bool HudsonMasterComputer::isIdle() const
{
    return m_Idle;
}
void HudsonMasterComputer::setIdle(bool const value)
{
    m_Idle = value;
    m_IdleIsSet = true;
}
bool HudsonMasterComputer::idleIsSet() const
{
    return m_IdleIsSet;
}
void HudsonMasterComputer::unsetIdle()
{
    m_IdleIsSet = false;
}
bool HudsonMasterComputer::isJnlpAgent() const
{
    return m_JnlpAgent;
}
void HudsonMasterComputer::setJnlpAgent(bool const value)
{
    m_JnlpAgent = value;
    m_JnlpAgentIsSet = true;
}
bool HudsonMasterComputer::jnlpAgentIsSet() const
{
    return m_JnlpAgentIsSet;
}
void HudsonMasterComputer::unsetJnlpAgent()
{
    m_JnlpAgentIsSet = false;
}
bool HudsonMasterComputer::isLaunchSupported() const
{
    return m_LaunchSupported;
}
void HudsonMasterComputer::setLaunchSupported(bool const value)
{
    m_LaunchSupported = value;
    m_LaunchSupportedIsSet = true;
}
bool HudsonMasterComputer::launchSupportedIsSet() const
{
    return m_LaunchSupportedIsSet;
}
void HudsonMasterComputer::unsetLaunchSupported()
{
    m_LaunchSupportedIsSet = false;
}
Label1 HudsonMasterComputer::getLoadStatistics() const
{
    return m_LoadStatistics;
}
void HudsonMasterComputer::setLoadStatistics(Label1 const& value)
{
    m_LoadStatistics = value;
    m_LoadStatisticsIsSet = true;
}
bool HudsonMasterComputer::loadStatisticsIsSet() const
{
    return m_LoadStatisticsIsSet;
}
void HudsonMasterComputer::unsetLoadStatistics()
{
    m_LoadStatisticsIsSet = false;
}
bool HudsonMasterComputer::isManualLaunchAllowed() const
{
    return m_ManualLaunchAllowed;
}
void HudsonMasterComputer::setManualLaunchAllowed(bool const value)
{
    m_ManualLaunchAllowed = value;
    m_ManualLaunchAllowedIsSet = true;
}
bool HudsonMasterComputer::manualLaunchAllowedIsSet() const
{
    return m_ManualLaunchAllowedIsSet;
}
void HudsonMasterComputer::unsetManualLaunchAllowed()
{
    m_ManualLaunchAllowedIsSet = false;
}
HudsonMasterComputermonitorData HudsonMasterComputer::getMonitorData() const
{
    return m_MonitorData;
}
void HudsonMasterComputer::setMonitorData(HudsonMasterComputermonitorData const& value)
{
    m_MonitorData = value;
    m_MonitorDataIsSet = true;
}
bool HudsonMasterComputer::monitorDataIsSet() const
{
    return m_MonitorDataIsSet;
}
void HudsonMasterComputer::unsetMonitorData()
{
    m_MonitorDataIsSet = false;
}
int32_t HudsonMasterComputer::getNumExecutors() const
{
    return m_NumExecutors;
}
void HudsonMasterComputer::setNumExecutors(int32_t const value)
{
    m_NumExecutors = value;
    m_NumExecutorsIsSet = true;
}
bool HudsonMasterComputer::numExecutorsIsSet() const
{
    return m_NumExecutorsIsSet;
}
void HudsonMasterComputer::unsetNumExecutors()
{
    m_NumExecutorsIsSet = false;
}
bool HudsonMasterComputer::isOffline() const
{
    return m_Offline;
}
void HudsonMasterComputer::setOffline(bool const value)
{
    m_Offline = value;
    m_OfflineIsSet = true;
}
bool HudsonMasterComputer::offlineIsSet() const
{
    return m_OfflineIsSet;
}
void HudsonMasterComputer::unsetOffline()
{
    m_OfflineIsSet = false;
}
std::string HudsonMasterComputer::getOfflineCause() const
{
    return m_OfflineCause;
}
void HudsonMasterComputer::setOfflineCause(std::string const& value)
{
    m_OfflineCause = value;
    m_OfflineCauseIsSet = true;
}
bool HudsonMasterComputer::offlineCauseIsSet() const
{
    return m_OfflineCauseIsSet;
}
void HudsonMasterComputer::unsetOfflineCause()
{
    m_OfflineCauseIsSet = false;
}
std::string HudsonMasterComputer::getOfflineCauseReason() const
{
    return m_OfflineCauseReason;
}
void HudsonMasterComputer::setOfflineCauseReason(std::string const& value)
{
    m_OfflineCauseReason = value;
    m_OfflineCauseReasonIsSet = true;
}
bool HudsonMasterComputer::offlineCauseReasonIsSet() const
{
    return m_OfflineCauseReasonIsSet;
}
void HudsonMasterComputer::unsetOfflineCauseReason()
{
    m_OfflineCauseReasonIsSet = false;
}
bool HudsonMasterComputer::isTemporarilyOffline() const
{
    return m_TemporarilyOffline;
}
void HudsonMasterComputer::setTemporarilyOffline(bool const value)
{
    m_TemporarilyOffline = value;
    m_TemporarilyOfflineIsSet = true;
}
bool HudsonMasterComputer::temporarilyOfflineIsSet() const
{
    return m_TemporarilyOfflineIsSet;
}
void HudsonMasterComputer::unsetTemporarilyOffline()
{
    m_TemporarilyOfflineIsSet = false;
}

}
}
}
}

