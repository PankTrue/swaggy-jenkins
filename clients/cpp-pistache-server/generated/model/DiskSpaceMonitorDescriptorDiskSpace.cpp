/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DiskSpaceMonitorDescriptorDiskSpace.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

DiskSpaceMonitorDescriptorDiskSpace::DiskSpaceMonitorDescriptorDiskSpace()
{
    m__class = "";
    m__classIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Path = "";
    m_PathIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    
}

DiskSpaceMonitorDescriptorDiskSpace::~DiskSpaceMonitorDescriptorDiskSpace()
{
}

void DiskSpaceMonitorDescriptorDiskSpace::validate()
{
    // TODO: implement validation
}

nlohmann::json DiskSpaceMonitorDescriptorDiskSpace::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m_TimestampIsSet)
    {
        val["timestamp"] = m_Timestamp;
    }
    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_SizeIsSet)
    {
        val["size"] = m_Size;
    }
    

    return val;
}

void DiskSpaceMonitorDescriptorDiskSpace::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    if(val.find("timestamp") != val.end())
    {
        setTimestamp(val.at("timestamp"));
    }
    if(val.find("path") != val.end())
    {
        setPath(val.at("path"));
    }
    if(val.find("size") != val.end())
    {
        setSize(val.at("size"));
    }
    
}


std::string DiskSpaceMonitorDescriptorDiskSpace::getClass() const
{
    return m__class;
}
void DiskSpaceMonitorDescriptorDiskSpace::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::classIsSet() const
{
    return m__classIsSet;
}
void DiskSpaceMonitorDescriptorDiskSpace::unset_class()
{
    m__classIsSet = false;
}
int32_t DiskSpaceMonitorDescriptorDiskSpace::getTimestamp() const
{
    return m_Timestamp;
}
void DiskSpaceMonitorDescriptorDiskSpace::setTimestamp(int32_t const value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void DiskSpaceMonitorDescriptorDiskSpace::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::string DiskSpaceMonitorDescriptorDiskSpace::getPath() const
{
    return m_Path;
}
void DiskSpaceMonitorDescriptorDiskSpace::setPath(std::string const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::pathIsSet() const
{
    return m_PathIsSet;
}
void DiskSpaceMonitorDescriptorDiskSpace::unsetPath()
{
    m_PathIsSet = false;
}
int32_t DiskSpaceMonitorDescriptorDiskSpace::getSize() const
{
    return m_Size;
}
void DiskSpaceMonitorDescriptorDiskSpace::setSize(int32_t const value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::sizeIsSet() const
{
    return m_SizeIsSet;
}
void DiskSpaceMonitorDescriptorDiskSpace::unsetSize()
{
    m_SizeIsSet = false;
}

}
}
}
}

