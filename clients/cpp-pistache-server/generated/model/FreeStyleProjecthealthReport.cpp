/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.0.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FreeStyleProjecthealthReport.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

FreeStyleProjecthealthReport::FreeStyleProjecthealthReport()
{
    m_Description = "";
    m_DescriptionIsSet = false;
    m_IconClassName = "";
    m_IconClassNameIsSet = false;
    m_IconUrl = "";
    m_IconUrlIsSet = false;
    m_Score = 0;
    m_ScoreIsSet = false;
    m__class = "";
    m__classIsSet = false;
    
}

FreeStyleProjecthealthReport::~FreeStyleProjecthealthReport()
{
}

void FreeStyleProjecthealthReport::validate()
{
    // TODO: implement validation
}

nlohmann::json FreeStyleProjecthealthReport::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_DescriptionIsSet)
    {
        val["description"] = ModelBase::toJson(m_Description);
    }
    if(m_IconClassNameIsSet)
    {
        val["iconClassName"] = ModelBase::toJson(m_IconClassName);
    }
    if(m_IconUrlIsSet)
    {
        val["iconUrl"] = ModelBase::toJson(m_IconUrl);
    }
    if(m_ScoreIsSet)
    {
        val["score"] = m_Score;
    }
    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    

    return val;
}

void FreeStyleProjecthealthReport::fromJson(nlohmann::json& val)
{
    if(val.find("description") != val.end())
    {
        setDescription(val.at("description"));
    }
    if(val.find("iconClassName") != val.end())
    {
        setIconClassName(val.at("iconClassName"));
    }
    if(val.find("iconUrl") != val.end())
    {
        setIconUrl(val.at("iconUrl"));
    }
    if(val.find("score") != val.end())
    {
        setScore(val.at("score"));
    }
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    
}


std::string FreeStyleProjecthealthReport::getDescription() const
{
    return m_Description;
}
void FreeStyleProjecthealthReport::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool FreeStyleProjecthealthReport::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void FreeStyleProjecthealthReport::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string FreeStyleProjecthealthReport::getIconClassName() const
{
    return m_IconClassName;
}
void FreeStyleProjecthealthReport::setIconClassName(std::string const& value)
{
    m_IconClassName = value;
    m_IconClassNameIsSet = true;
}
bool FreeStyleProjecthealthReport::iconClassNameIsSet() const
{
    return m_IconClassNameIsSet;
}
void FreeStyleProjecthealthReport::unsetIconClassName()
{
    m_IconClassNameIsSet = false;
}
std::string FreeStyleProjecthealthReport::getIconUrl() const
{
    return m_IconUrl;
}
void FreeStyleProjecthealthReport::setIconUrl(std::string const& value)
{
    m_IconUrl = value;
    m_IconUrlIsSet = true;
}
bool FreeStyleProjecthealthReport::iconUrlIsSet() const
{
    return m_IconUrlIsSet;
}
void FreeStyleProjecthealthReport::unsetIconUrl()
{
    m_IconUrlIsSet = false;
}
int32_t FreeStyleProjecthealthReport::getScore() const
{
    return m_Score;
}
void FreeStyleProjecthealthReport::setScore(int32_t const value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}
bool FreeStyleProjecthealthReport::scoreIsSet() const
{
    return m_ScoreIsSet;
}
void FreeStyleProjecthealthReport::unsetScore()
{
    m_ScoreIsSet = false;
}
std::string FreeStyleProjecthealthReport::getClass() const
{
    return m__class;
}
void FreeStyleProjecthealthReport::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool FreeStyleProjecthealthReport::classIsSet() const
{
    return m__classIsSet;
}
void FreeStyleProjecthealthReport::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

