/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ListView.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ListView::ListView()
{
    m__class = "";
    m__classIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_JobsIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    
}

ListView::~ListView()
{
}

void ListView::validate()
{
    // TODO: implement validation
}

nlohmann::json ListView::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m_DescriptionIsSet)
    {
        val["description"] = ModelBase::toJson(m_Description);
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Jobs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["jobs"] = jsonArray;
        }
    }
    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_UrlIsSet)
    {
        val["url"] = ModelBase::toJson(m_Url);
    }
    

    return val;
}

void ListView::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    if(val.find("description") != val.end())
    {
        setDescription(val.at("description"));
    }
    {
        m_Jobs.clear();
        nlohmann::json jsonArray;
        if(val.find("jobs") != val.end())
        {
        for( auto& item : val["jobs"] )
        {
            
            if(item.is_null())
            {
                m_Jobs.push_back( FreeStyleProject() );
            }
            else
            {
                FreeStyleProject newItem;
                newItem.fromJson(item);
                m_Jobs.push_back( newItem );
            }
            
        }
        }
    }
    if(val.find("name") != val.end())
    {
        setName(val.at("name"));
    }
    if(val.find("url") != val.end())
    {
        setUrl(val.at("url"));
    }
    
}


std::string ListView::getClass() const
{
    return m__class;
}
void ListView::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool ListView::classIsSet() const
{
    return m__classIsSet;
}
void ListView::unset_class()
{
    m__classIsSet = false;
}
std::string ListView::getDescription() const
{
    return m_Description;
}
void ListView::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ListView::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void ListView::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<FreeStyleProject>& ListView::getJobs()
{
    return m_Jobs;
}
bool ListView::jobsIsSet() const
{
    return m_JobsIsSet;
}
void ListView::unsetJobs()
{
    m_JobsIsSet = false;
}
std::string ListView::getName() const
{
    return m_Name;
}
void ListView::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ListView::nameIsSet() const
{
    return m_NameIsSet;
}
void ListView::unsetName()
{
    m_NameIsSet = false;
}
std::string ListView::getUrl() const
{
    return m_Url;
}
void ListView::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool ListView::urlIsSet() const
{
    return m_UrlIsSet;
}
void ListView::unsetUrl()
{
    m_UrlIsSet = false;
}

}
}
}
}

