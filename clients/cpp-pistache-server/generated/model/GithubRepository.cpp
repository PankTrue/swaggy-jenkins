/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GithubRepository.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

GithubRepository::GithubRepository()
{
    m__class = "";
    m__classIsSet = false;
    m__linksIsSet = false;
    m_DefaultBranch = "";
    m_DefaultBranchIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_PermissionsIsSet = false;
    m_Private = false;
    m_PrivateIsSet = false;
    m_FullName = "";
    m_FullNameIsSet = false;
    
}

GithubRepository::~GithubRepository()
{
}

void GithubRepository::validate()
{
    // TODO: implement validation
}

nlohmann::json GithubRepository::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val["_links"] = ModelBase::toJson(m__links);
    }
    if(m_DefaultBranchIsSet)
    {
        val["defaultBranch"] = ModelBase::toJson(m_DefaultBranch);
    }
    if(m_DescriptionIsSet)
    {
        val["description"] = ModelBase::toJson(m_Description);
    }
    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_PermissionsIsSet)
    {
        val["permissions"] = ModelBase::toJson(m_Permissions);
    }
    if(m_PrivateIsSet)
    {
        val["private"] = m_Private;
    }
    if(m_FullNameIsSet)
    {
        val["fullName"] = ModelBase::toJson(m_FullName);
    }
    

    return val;
}

void GithubRepository::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    if(val.find("_links") != val.end())
    {
        if(!val["_links"].is_null())
        {
            GithubRepositorylinks newItem;
            newItem.fromJson(val["_links"]);
            setLinks( newItem );
        }
        
    }
    if(val.find("defaultBranch") != val.end())
    {
        setDefaultBranch(val.at("defaultBranch"));
    }
    if(val.find("description") != val.end())
    {
        setDescription(val.at("description"));
    }
    if(val.find("name") != val.end())
    {
        setName(val.at("name"));
    }
    if(val.find("permissions") != val.end())
    {
        if(!val["permissions"].is_null())
        {
            GithubRepositorypermissions newItem;
            newItem.fromJson(val["permissions"]);
            setPermissions( newItem );
        }
        
    }
    if(val.find("private") != val.end())
    {
        setPrivate(val.at("private"));
    }
    if(val.find("fullName") != val.end())
    {
        setFullName(val.at("fullName"));
    }
    
}


std::string GithubRepository::getClass() const
{
    return m__class;
}
void GithubRepository::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubRepository::classIsSet() const
{
    return m__classIsSet;
}
void GithubRepository::unset_class()
{
    m__classIsSet = false;
}
GithubRepositorylinks GithubRepository::getLinks() const
{
    return m__links;
}
void GithubRepository::setLinks(GithubRepositorylinks const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool GithubRepository::linksIsSet() const
{
    return m__linksIsSet;
}
void GithubRepository::unset_links()
{
    m__linksIsSet = false;
}
std::string GithubRepository::getDefaultBranch() const
{
    return m_DefaultBranch;
}
void GithubRepository::setDefaultBranch(std::string const& value)
{
    m_DefaultBranch = value;
    m_DefaultBranchIsSet = true;
}
bool GithubRepository::defaultBranchIsSet() const
{
    return m_DefaultBranchIsSet;
}
void GithubRepository::unsetDefaultBranch()
{
    m_DefaultBranchIsSet = false;
}
std::string GithubRepository::getDescription() const
{
    return m_Description;
}
void GithubRepository::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool GithubRepository::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void GithubRepository::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string GithubRepository::getName() const
{
    return m_Name;
}
void GithubRepository::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool GithubRepository::nameIsSet() const
{
    return m_NameIsSet;
}
void GithubRepository::unsetName()
{
    m_NameIsSet = false;
}
GithubRepositorypermissions GithubRepository::getPermissions() const
{
    return m_Permissions;
}
void GithubRepository::setPermissions(GithubRepositorypermissions const& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool GithubRepository::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}
void GithubRepository::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
bool GithubRepository::isPrivate() const
{
    return m_Private;
}
void GithubRepository::setPrivate(bool const value)
{
    m_Private = value;
    m_PrivateIsSet = true;
}
bool GithubRepository::privateIsSet() const
{
    return m_PrivateIsSet;
}
void GithubRepository::unsetPrivate()
{
    m_PrivateIsSet = false;
}
std::string GithubRepository::getFullName() const
{
    return m_FullName;
}
void GithubRepository::setFullName(std::string const& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool GithubRepository::fullNameIsSet() const
{
    return m_FullNameIsSet;
}
void GithubRepository::unsetFullName()
{
    m_FullNameIsSet = false;
}

}
}
}
}

