/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.0.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "HudsonMasterComputermonitorData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

HudsonMasterComputermonitorData::HudsonMasterComputermonitorData()
{
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = false;
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = false;
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = false;
    m_Hudson_node_monitors_ArchitectureMonitor = "";
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = false;
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = false;
    m_Hudson_node_monitors_ClockMonitorIsSet = false;
    m__class = "";
    m__classIsSet = false;
    
}

HudsonMasterComputermonitorData::~HudsonMasterComputermonitorData()
{
}

void HudsonMasterComputermonitorData::validate()
{
    // TODO: implement validation
}

nlohmann::json HudsonMasterComputermonitorData::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Hudson_node_monitors_SwapSpaceMonitorIsSet)
    {
        val["hudson.node_monitors.SwapSpaceMonitor"] = ModelBase::toJson(m_Hudson_node_monitors_SwapSpaceMonitor);
    }
    if(m_Hudson_node_monitors_TemporarySpaceMonitorIsSet)
    {
        val["hudson.node_monitors.TemporarySpaceMonitor"] = ModelBase::toJson(m_Hudson_node_monitors_TemporarySpaceMonitor);
    }
    if(m_Hudson_node_monitors_DiskSpaceMonitorIsSet)
    {
        val["hudson.node_monitors.DiskSpaceMonitor"] = ModelBase::toJson(m_Hudson_node_monitors_DiskSpaceMonitor);
    }
    if(m_Hudson_node_monitors_ArchitectureMonitorIsSet)
    {
        val["hudson.node_monitors.ArchitectureMonitor"] = ModelBase::toJson(m_Hudson_node_monitors_ArchitectureMonitor);
    }
    if(m_Hudson_node_monitors_ResponseTimeMonitorIsSet)
    {
        val["hudson.node_monitors.ResponseTimeMonitor"] = ModelBase::toJson(m_Hudson_node_monitors_ResponseTimeMonitor);
    }
    if(m_Hudson_node_monitors_ClockMonitorIsSet)
    {
        val["hudson.node_monitors.ClockMonitor"] = ModelBase::toJson(m_Hudson_node_monitors_ClockMonitor);
    }
    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    

    return val;
}

void HudsonMasterComputermonitorData::fromJson(nlohmann::json& val)
{
    if(val.find("hudson.node_monitors.SwapSpaceMonitor") != val.end())
    {
        if(!val["hudson.node_monitors.SwapSpaceMonitor"].is_null())
        {
            SwapSpaceMonitorMemoryUsage2 newItem;
            newItem.fromJson(val["hudson.node_monitors.SwapSpaceMonitor"]);
            setHudsonNodeMonitorsSwapSpaceMonitor( newItem );
        }
        
    }
    if(val.find("hudson.node_monitors.TemporarySpaceMonitor") != val.end())
    {
        if(!val["hudson.node_monitors.TemporarySpaceMonitor"].is_null())
        {
            DiskSpaceMonitorDescriptorDiskSpace newItem;
            newItem.fromJson(val["hudson.node_monitors.TemporarySpaceMonitor"]);
            setHudsonNodeMonitorsTemporarySpaceMonitor( newItem );
        }
        
    }
    if(val.find("hudson.node_monitors.DiskSpaceMonitor") != val.end())
    {
        if(!val["hudson.node_monitors.DiskSpaceMonitor"].is_null())
        {
            DiskSpaceMonitorDescriptorDiskSpace newItem;
            newItem.fromJson(val["hudson.node_monitors.DiskSpaceMonitor"]);
            setHudsonNodeMonitorsDiskSpaceMonitor( newItem );
        }
        
    }
    if(val.find("hudson.node_monitors.ArchitectureMonitor") != val.end())
    {
        setHudsonNodeMonitorsArchitectureMonitor(val.at("hudson.node_monitors.ArchitectureMonitor"));
    }
    if(val.find("hudson.node_monitors.ResponseTimeMonitor") != val.end())
    {
        if(!val["hudson.node_monitors.ResponseTimeMonitor"].is_null())
        {
            ResponseTimeMonitorData newItem;
            newItem.fromJson(val["hudson.node_monitors.ResponseTimeMonitor"]);
            setHudsonNodeMonitorsResponseTimeMonitor( newItem );
        }
        
    }
    if(val.find("hudson.node_monitors.ClockMonitor") != val.end())
    {
        if(!val["hudson.node_monitors.ClockMonitor"].is_null())
        {
            ClockDifference newItem;
            newItem.fromJson(val["hudson.node_monitors.ClockMonitor"]);
            setHudsonNodeMonitorsClockMonitor( newItem );
        }
        
    }
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    
}


SwapSpaceMonitorMemoryUsage2 HudsonMasterComputermonitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsSwapSpaceMonitor(SwapSpaceMonitorMemoryUsage2 const& value)
{
    m_Hudson_node_monitors_SwapSpaceMonitor = value;
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsSwapSpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitorIsSet;
}
void HudsonMasterComputermonitorData::unsetHudson_node_monitors_SwapSpaceMonitor()
{
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = false;
}
DiskSpaceMonitorDescriptorDiskSpace HudsonMasterComputermonitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(DiskSpaceMonitorDescriptorDiskSpace const& value)
{
    m_Hudson_node_monitors_TemporarySpaceMonitor = value;
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsTemporarySpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitorIsSet;
}
void HudsonMasterComputermonitorData::unsetHudson_node_monitors_TemporarySpaceMonitor()
{
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = false;
}
DiskSpaceMonitorDescriptorDiskSpace HudsonMasterComputermonitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsDiskSpaceMonitor(DiskSpaceMonitorDescriptorDiskSpace const& value)
{
    m_Hudson_node_monitors_DiskSpaceMonitor = value;
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsDiskSpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitorIsSet;
}
void HudsonMasterComputermonitorData::unsetHudson_node_monitors_DiskSpaceMonitor()
{
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = false;
}
std::string HudsonMasterComputermonitorData::getHudsonNodeMonitorsArchitectureMonitor() const
{
    return m_Hudson_node_monitors_ArchitectureMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsArchitectureMonitor(std::string const& value)
{
    m_Hudson_node_monitors_ArchitectureMonitor = value;
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsArchitectureMonitorIsSet() const
{
    return m_Hudson_node_monitors_ArchitectureMonitorIsSet;
}
void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ArchitectureMonitor()
{
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = false;
}
ResponseTimeMonitorData HudsonMasterComputermonitorData::getHudsonNodeMonitorsResponseTimeMonitor() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsResponseTimeMonitor(ResponseTimeMonitorData const& value)
{
    m_Hudson_node_monitors_ResponseTimeMonitor = value;
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsResponseTimeMonitorIsSet() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitorIsSet;
}
void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ResponseTimeMonitor()
{
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = false;
}
ClockDifference HudsonMasterComputermonitorData::getHudsonNodeMonitorsClockMonitor() const
{
    return m_Hudson_node_monitors_ClockMonitor;
}
void HudsonMasterComputermonitorData::setHudsonNodeMonitorsClockMonitor(ClockDifference const& value)
{
    m_Hudson_node_monitors_ClockMonitor = value;
    m_Hudson_node_monitors_ClockMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsClockMonitorIsSet() const
{
    return m_Hudson_node_monitors_ClockMonitorIsSet;
}
void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ClockMonitor()
{
    m_Hudson_node_monitors_ClockMonitorIsSet = false;
}
std::string HudsonMasterComputermonitorData::getClass() const
{
    return m__class;
}
void HudsonMasterComputermonitorData::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool HudsonMasterComputermonitorData::classIsSet() const
{
    return m__classIsSet;
}
void HudsonMasterComputermonitorData::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

