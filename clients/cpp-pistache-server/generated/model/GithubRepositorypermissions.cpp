/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.0.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GithubRepositorypermissions.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

GithubRepositorypermissions::GithubRepositorypermissions()
{
    m_Admin = false;
    m_AdminIsSet = false;
    m_Push = false;
    m_PushIsSet = false;
    m_Pull = false;
    m_PullIsSet = false;
    m__class = "";
    m__classIsSet = false;
    
}

GithubRepositorypermissions::~GithubRepositorypermissions()
{
}

void GithubRepositorypermissions::validate()
{
    // TODO: implement validation
}

nlohmann::json GithubRepositorypermissions::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_AdminIsSet)
    {
        val["admin"] = m_Admin;
    }
    if(m_PushIsSet)
    {
        val["push"] = m_Push;
    }
    if(m_PullIsSet)
    {
        val["pull"] = m_Pull;
    }
    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    

    return val;
}

void GithubRepositorypermissions::fromJson(nlohmann::json& val)
{
    if(val.find("admin") != val.end())
    {
        setAdmin(val.at("admin"));
    }
    if(val.find("push") != val.end())
    {
        setPush(val.at("push"));
    }
    if(val.find("pull") != val.end())
    {
        setPull(val.at("pull"));
    }
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    
}


bool GithubRepositorypermissions::isAdmin() const
{
    return m_Admin;
}
void GithubRepositorypermissions::setAdmin(bool const value)
{
    m_Admin = value;
    m_AdminIsSet = true;
}
bool GithubRepositorypermissions::adminIsSet() const
{
    return m_AdminIsSet;
}
void GithubRepositorypermissions::unsetAdmin()
{
    m_AdminIsSet = false;
}
bool GithubRepositorypermissions::isPush() const
{
    return m_Push;
}
void GithubRepositorypermissions::setPush(bool const value)
{
    m_Push = value;
    m_PushIsSet = true;
}
bool GithubRepositorypermissions::pushIsSet() const
{
    return m_PushIsSet;
}
void GithubRepositorypermissions::unsetPush()
{
    m_PushIsSet = false;
}
bool GithubRepositorypermissions::isPull() const
{
    return m_Pull;
}
void GithubRepositorypermissions::setPull(bool const value)
{
    m_Pull = value;
    m_PullIsSet = true;
}
bool GithubRepositorypermissions::pullIsSet() const
{
    return m_PullIsSet;
}
void GithubRepositorypermissions::unsetPull()
{
    m_PullIsSet = false;
}
std::string GithubRepositorypermissions::getClass() const
{
    return m__class;
}
void GithubRepositorypermissions::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubRepositorypermissions::classIsSet() const
{
    return m__classIsSet;
}
void GithubRepositorypermissions::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

