/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.0.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MultibranchPipeline.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

MultibranchPipeline::MultibranchPipeline()
{
    m_DisplayName = "";
    m_DisplayNameIsSet = false;
    m_EstimatedDurationInMillis = 0;
    m_EstimatedDurationInMillisIsSet = false;
    m_LatestRun = "";
    m_LatestRunIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Organization = "";
    m_OrganizationIsSet = false;
    m_WeatherScore = 0;
    m_WeatherScoreIsSet = false;
    m_BranchNamesIsSet = false;
    m_NumberOfFailingBranches = 0;
    m_NumberOfFailingBranchesIsSet = false;
    m_NumberOfFailingPullRequests = 0;
    m_NumberOfFailingPullRequestsIsSet = false;
    m_NumberOfSuccessfulBranches = 0;
    m_NumberOfSuccessfulBranchesIsSet = false;
    m_NumberOfSuccessfulPullRequests = 0;
    m_NumberOfSuccessfulPullRequestsIsSet = false;
    m_TotalNumberOfBranches = 0;
    m_TotalNumberOfBranchesIsSet = false;
    m_TotalNumberOfPullRequests = 0;
    m_TotalNumberOfPullRequestsIsSet = false;
    m__class = "";
    m__classIsSet = false;
    
}

MultibranchPipeline::~MultibranchPipeline()
{
}

void MultibranchPipeline::validate()
{
    // TODO: implement validation
}

nlohmann::json MultibranchPipeline::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_DisplayNameIsSet)
    {
        val["displayName"] = ModelBase::toJson(m_DisplayName);
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        val["estimatedDurationInMillis"] = m_EstimatedDurationInMillis;
    }
    if(m_LatestRunIsSet)
    {
        val["latestRun"] = ModelBase::toJson(m_LatestRun);
    }
    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_OrganizationIsSet)
    {
        val["organization"] = ModelBase::toJson(m_Organization);
    }
    if(m_WeatherScoreIsSet)
    {
        val["weatherScore"] = m_WeatherScore;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_BranchNames )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["branchNames"] = jsonArray;
        }
    }
    if(m_NumberOfFailingBranchesIsSet)
    {
        val["numberOfFailingBranches"] = m_NumberOfFailingBranches;
    }
    if(m_NumberOfFailingPullRequestsIsSet)
    {
        val["numberOfFailingPullRequests"] = m_NumberOfFailingPullRequests;
    }
    if(m_NumberOfSuccessfulBranchesIsSet)
    {
        val["numberOfSuccessfulBranches"] = m_NumberOfSuccessfulBranches;
    }
    if(m_NumberOfSuccessfulPullRequestsIsSet)
    {
        val["numberOfSuccessfulPullRequests"] = m_NumberOfSuccessfulPullRequests;
    }
    if(m_TotalNumberOfBranchesIsSet)
    {
        val["totalNumberOfBranches"] = m_TotalNumberOfBranches;
    }
    if(m_TotalNumberOfPullRequestsIsSet)
    {
        val["totalNumberOfPullRequests"] = m_TotalNumberOfPullRequests;
    }
    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    

    return val;
}

void MultibranchPipeline::fromJson(nlohmann::json& val)
{
    if(val.find("displayName") != val.end())
    {
        setDisplayName(val.at("displayName"));
    }
    if(val.find("estimatedDurationInMillis") != val.end())
    {
        setEstimatedDurationInMillis(val.at("estimatedDurationInMillis"));
    }
    if(val.find("latestRun") != val.end())
    {
        setLatestRun(val.at("latestRun"));
    }
    if(val.find("name") != val.end())
    {
        setName(val.at("name"));
    }
    if(val.find("organization") != val.end())
    {
        setOrganization(val.at("organization"));
    }
    if(val.find("weatherScore") != val.end())
    {
        setWeatherScore(val.at("weatherScore"));
    }
    {
        m_BranchNames.clear();
        nlohmann::json jsonArray;
        if(val.find("branchNames") != val.end())
        {
        for( auto& item : val["branchNames"] )
        {
            m_BranchNames.push_back(item);
            
        }
        }
    }
    if(val.find("numberOfFailingBranches") != val.end())
    {
        setNumberOfFailingBranches(val.at("numberOfFailingBranches"));
    }
    if(val.find("numberOfFailingPullRequests") != val.end())
    {
        setNumberOfFailingPullRequests(val.at("numberOfFailingPullRequests"));
    }
    if(val.find("numberOfSuccessfulBranches") != val.end())
    {
        setNumberOfSuccessfulBranches(val.at("numberOfSuccessfulBranches"));
    }
    if(val.find("numberOfSuccessfulPullRequests") != val.end())
    {
        setNumberOfSuccessfulPullRequests(val.at("numberOfSuccessfulPullRequests"));
    }
    if(val.find("totalNumberOfBranches") != val.end())
    {
        setTotalNumberOfBranches(val.at("totalNumberOfBranches"));
    }
    if(val.find("totalNumberOfPullRequests") != val.end())
    {
        setTotalNumberOfPullRequests(val.at("totalNumberOfPullRequests"));
    }
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    
}


std::string MultibranchPipeline::getDisplayName() const
{
    return m_DisplayName;
}
void MultibranchPipeline::setDisplayName(std::string const& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool MultibranchPipeline::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}
void MultibranchPipeline::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
int32_t MultibranchPipeline::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}
void MultibranchPipeline::setEstimatedDurationInMillis(int32_t const value)
{
    m_EstimatedDurationInMillis = value;
    m_EstimatedDurationInMillisIsSet = true;
}
bool MultibranchPipeline::estimatedDurationInMillisIsSet() const
{
    return m_EstimatedDurationInMillisIsSet;
}
void MultibranchPipeline::unsetEstimatedDurationInMillis()
{
    m_EstimatedDurationInMillisIsSet = false;
}
std::string MultibranchPipeline::getLatestRun() const
{
    return m_LatestRun;
}
void MultibranchPipeline::setLatestRun(std::string const& value)
{
    m_LatestRun = value;
    m_LatestRunIsSet = true;
}
bool MultibranchPipeline::latestRunIsSet() const
{
    return m_LatestRunIsSet;
}
void MultibranchPipeline::unsetLatestRun()
{
    m_LatestRunIsSet = false;
}
std::string MultibranchPipeline::getName() const
{
    return m_Name;
}
void MultibranchPipeline::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool MultibranchPipeline::nameIsSet() const
{
    return m_NameIsSet;
}
void MultibranchPipeline::unsetName()
{
    m_NameIsSet = false;
}
std::string MultibranchPipeline::getOrganization() const
{
    return m_Organization;
}
void MultibranchPipeline::setOrganization(std::string const& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}
bool MultibranchPipeline::organizationIsSet() const
{
    return m_OrganizationIsSet;
}
void MultibranchPipeline::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
int32_t MultibranchPipeline::getWeatherScore() const
{
    return m_WeatherScore;
}
void MultibranchPipeline::setWeatherScore(int32_t const value)
{
    m_WeatherScore = value;
    m_WeatherScoreIsSet = true;
}
bool MultibranchPipeline::weatherScoreIsSet() const
{
    return m_WeatherScoreIsSet;
}
void MultibranchPipeline::unsetWeatherScore()
{
    m_WeatherScoreIsSet = false;
}
std::vector<std::string>& MultibranchPipeline::getBranchNames()
{
    return m_BranchNames;
}
bool MultibranchPipeline::branchNamesIsSet() const
{
    return m_BranchNamesIsSet;
}
void MultibranchPipeline::unsetBranchNames()
{
    m_BranchNamesIsSet = false;
}
int32_t MultibranchPipeline::getNumberOfFailingBranches() const
{
    return m_NumberOfFailingBranches;
}
void MultibranchPipeline::setNumberOfFailingBranches(int32_t const value)
{
    m_NumberOfFailingBranches = value;
    m_NumberOfFailingBranchesIsSet = true;
}
bool MultibranchPipeline::numberOfFailingBranchesIsSet() const
{
    return m_NumberOfFailingBranchesIsSet;
}
void MultibranchPipeline::unsetNumberOfFailingBranches()
{
    m_NumberOfFailingBranchesIsSet = false;
}
int32_t MultibranchPipeline::getNumberOfFailingPullRequests() const
{
    return m_NumberOfFailingPullRequests;
}
void MultibranchPipeline::setNumberOfFailingPullRequests(int32_t const value)
{
    m_NumberOfFailingPullRequests = value;
    m_NumberOfFailingPullRequestsIsSet = true;
}
bool MultibranchPipeline::numberOfFailingPullRequestsIsSet() const
{
    return m_NumberOfFailingPullRequestsIsSet;
}
void MultibranchPipeline::unsetNumberOfFailingPullRequests()
{
    m_NumberOfFailingPullRequestsIsSet = false;
}
int32_t MultibranchPipeline::getNumberOfSuccessfulBranches() const
{
    return m_NumberOfSuccessfulBranches;
}
void MultibranchPipeline::setNumberOfSuccessfulBranches(int32_t const value)
{
    m_NumberOfSuccessfulBranches = value;
    m_NumberOfSuccessfulBranchesIsSet = true;
}
bool MultibranchPipeline::numberOfSuccessfulBranchesIsSet() const
{
    return m_NumberOfSuccessfulBranchesIsSet;
}
void MultibranchPipeline::unsetNumberOfSuccessfulBranches()
{
    m_NumberOfSuccessfulBranchesIsSet = false;
}
int32_t MultibranchPipeline::getNumberOfSuccessfulPullRequests() const
{
    return m_NumberOfSuccessfulPullRequests;
}
void MultibranchPipeline::setNumberOfSuccessfulPullRequests(int32_t const value)
{
    m_NumberOfSuccessfulPullRequests = value;
    m_NumberOfSuccessfulPullRequestsIsSet = true;
}
bool MultibranchPipeline::numberOfSuccessfulPullRequestsIsSet() const
{
    return m_NumberOfSuccessfulPullRequestsIsSet;
}
void MultibranchPipeline::unsetNumberOfSuccessfulPullRequests()
{
    m_NumberOfSuccessfulPullRequestsIsSet = false;
}
int32_t MultibranchPipeline::getTotalNumberOfBranches() const
{
    return m_TotalNumberOfBranches;
}
void MultibranchPipeline::setTotalNumberOfBranches(int32_t const value)
{
    m_TotalNumberOfBranches = value;
    m_TotalNumberOfBranchesIsSet = true;
}
bool MultibranchPipeline::totalNumberOfBranchesIsSet() const
{
    return m_TotalNumberOfBranchesIsSet;
}
void MultibranchPipeline::unsetTotalNumberOfBranches()
{
    m_TotalNumberOfBranchesIsSet = false;
}
int32_t MultibranchPipeline::getTotalNumberOfPullRequests() const
{
    return m_TotalNumberOfPullRequests;
}
void MultibranchPipeline::setTotalNumberOfPullRequests(int32_t const value)
{
    m_TotalNumberOfPullRequests = value;
    m_TotalNumberOfPullRequestsIsSet = true;
}
bool MultibranchPipeline::totalNumberOfPullRequestsIsSet() const
{
    return m_TotalNumberOfPullRequestsIsSet;
}
void MultibranchPipeline::unsetTotalNumberOfPullRequests()
{
    m_TotalNumberOfPullRequestsIsSet = false;
}
std::string MultibranchPipeline::getClass() const
{
    return m__class;
}
void MultibranchPipeline::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool MultibranchPipeline::classIsSet() const
{
    return m__classIsSet;
}
void MultibranchPipeline::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

