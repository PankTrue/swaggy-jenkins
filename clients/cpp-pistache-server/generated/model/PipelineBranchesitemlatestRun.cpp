/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PipelineBranchesitemlatestRun.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineBranchesitemlatestRun::PipelineBranchesitemlatestRun()
{
    m_DurationInMillis = 0;
    m_DurationInMillisIsSet = false;
    m_EstimatedDurationInMillis = 0;
    m_EstimatedDurationInMillisIsSet = false;
    m_EnQueueTime = "";
    m_EnQueueTimeIsSet = false;
    m_EndTime = "";
    m_EndTimeIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Organization = "";
    m_OrganizationIsSet = false;
    m_Pipeline = "";
    m_PipelineIsSet = false;
    m_Result = "";
    m_ResultIsSet = false;
    m_RunSummary = "";
    m_RunSummaryIsSet = false;
    m_StartTime = "";
    m_StartTimeIsSet = false;
    m_State = "";
    m_StateIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_CommitId = "";
    m_CommitIdIsSet = false;
    m__class = "";
    m__classIsSet = false;
    
}

PipelineBranchesitemlatestRun::~PipelineBranchesitemlatestRun()
{
}

void PipelineBranchesitemlatestRun::validate()
{
    // TODO: implement validation
}

nlohmann::json PipelineBranchesitemlatestRun::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_DurationInMillisIsSet)
    {
        val["durationInMillis"] = m_DurationInMillis;
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        val["estimatedDurationInMillis"] = m_EstimatedDurationInMillis;
    }
    if(m_EnQueueTimeIsSet)
    {
        val["enQueueTime"] = ModelBase::toJson(m_EnQueueTime);
    }
    if(m_EndTimeIsSet)
    {
        val["endTime"] = ModelBase::toJson(m_EndTime);
    }
    if(m_IdIsSet)
    {
        val["id"] = ModelBase::toJson(m_Id);
    }
    if(m_OrganizationIsSet)
    {
        val["organization"] = ModelBase::toJson(m_Organization);
    }
    if(m_PipelineIsSet)
    {
        val["pipeline"] = ModelBase::toJson(m_Pipeline);
    }
    if(m_ResultIsSet)
    {
        val["result"] = ModelBase::toJson(m_Result);
    }
    if(m_RunSummaryIsSet)
    {
        val["runSummary"] = ModelBase::toJson(m_RunSummary);
    }
    if(m_StartTimeIsSet)
    {
        val["startTime"] = ModelBase::toJson(m_StartTime);
    }
    if(m_StateIsSet)
    {
        val["state"] = ModelBase::toJson(m_State);
    }
    if(m_TypeIsSet)
    {
        val["type"] = ModelBase::toJson(m_Type);
    }
    if(m_CommitIdIsSet)
    {
        val["commitId"] = ModelBase::toJson(m_CommitId);
    }
    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    

    return val;
}

void PipelineBranchesitemlatestRun::fromJson(nlohmann::json& val)
{
    if(val.find("durationInMillis") != val.end())
    {
        setDurationInMillis(val.at("durationInMillis"));
    }
    if(val.find("estimatedDurationInMillis") != val.end())
    {
        setEstimatedDurationInMillis(val.at("estimatedDurationInMillis"));
    }
    if(val.find("enQueueTime") != val.end())
    {
        setEnQueueTime(val.at("enQueueTime"));
    }
    if(val.find("endTime") != val.end())
    {
        setEndTime(val.at("endTime"));
    }
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("organization") != val.end())
    {
        setOrganization(val.at("organization"));
    }
    if(val.find("pipeline") != val.end())
    {
        setPipeline(val.at("pipeline"));
    }
    if(val.find("result") != val.end())
    {
        setResult(val.at("result"));
    }
    if(val.find("runSummary") != val.end())
    {
        setRunSummary(val.at("runSummary"));
    }
    if(val.find("startTime") != val.end())
    {
        setStartTime(val.at("startTime"));
    }
    if(val.find("state") != val.end())
    {
        setState(val.at("state"));
    }
    if(val.find("type") != val.end())
    {
        setType(val.at("type"));
    }
    if(val.find("commitId") != val.end())
    {
        setCommitId(val.at("commitId"));
    }
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    
}


int32_t PipelineBranchesitemlatestRun::getDurationInMillis() const
{
    return m_DurationInMillis;
}
void PipelineBranchesitemlatestRun::setDurationInMillis(int32_t const value)
{
    m_DurationInMillis = value;
    m_DurationInMillisIsSet = true;
}
bool PipelineBranchesitemlatestRun::durationInMillisIsSet() const
{
    return m_DurationInMillisIsSet;
}
void PipelineBranchesitemlatestRun::unsetDurationInMillis()
{
    m_DurationInMillisIsSet = false;
}
int32_t PipelineBranchesitemlatestRun::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}
void PipelineBranchesitemlatestRun::setEstimatedDurationInMillis(int32_t const value)
{
    m_EstimatedDurationInMillis = value;
    m_EstimatedDurationInMillisIsSet = true;
}
bool PipelineBranchesitemlatestRun::estimatedDurationInMillisIsSet() const
{
    return m_EstimatedDurationInMillisIsSet;
}
void PipelineBranchesitemlatestRun::unsetEstimatedDurationInMillis()
{
    m_EstimatedDurationInMillisIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getEnQueueTime() const
{
    return m_EnQueueTime;
}
void PipelineBranchesitemlatestRun::setEnQueueTime(std::string const& value)
{
    m_EnQueueTime = value;
    m_EnQueueTimeIsSet = true;
}
bool PipelineBranchesitemlatestRun::enQueueTimeIsSet() const
{
    return m_EnQueueTimeIsSet;
}
void PipelineBranchesitemlatestRun::unsetEnQueueTime()
{
    m_EnQueueTimeIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getEndTime() const
{
    return m_EndTime;
}
void PipelineBranchesitemlatestRun::setEndTime(std::string const& value)
{
    m_EndTime = value;
    m_EndTimeIsSet = true;
}
bool PipelineBranchesitemlatestRun::endTimeIsSet() const
{
    return m_EndTimeIsSet;
}
void PipelineBranchesitemlatestRun::unsetEndTime()
{
    m_EndTimeIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getId() const
{
    return m_Id;
}
void PipelineBranchesitemlatestRun::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PipelineBranchesitemlatestRun::idIsSet() const
{
    return m_IdIsSet;
}
void PipelineBranchesitemlatestRun::unsetId()
{
    m_IdIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getOrganization() const
{
    return m_Organization;
}
void PipelineBranchesitemlatestRun::setOrganization(std::string const& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}
bool PipelineBranchesitemlatestRun::organizationIsSet() const
{
    return m_OrganizationIsSet;
}
void PipelineBranchesitemlatestRun::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getPipeline() const
{
    return m_Pipeline;
}
void PipelineBranchesitemlatestRun::setPipeline(std::string const& value)
{
    m_Pipeline = value;
    m_PipelineIsSet = true;
}
bool PipelineBranchesitemlatestRun::pipelineIsSet() const
{
    return m_PipelineIsSet;
}
void PipelineBranchesitemlatestRun::unsetPipeline()
{
    m_PipelineIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getResult() const
{
    return m_Result;
}
void PipelineBranchesitemlatestRun::setResult(std::string const& value)
{
    m_Result = value;
    m_ResultIsSet = true;
}
bool PipelineBranchesitemlatestRun::resultIsSet() const
{
    return m_ResultIsSet;
}
void PipelineBranchesitemlatestRun::unsetResult()
{
    m_ResultIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getRunSummary() const
{
    return m_RunSummary;
}
void PipelineBranchesitemlatestRun::setRunSummary(std::string const& value)
{
    m_RunSummary = value;
    m_RunSummaryIsSet = true;
}
bool PipelineBranchesitemlatestRun::runSummaryIsSet() const
{
    return m_RunSummaryIsSet;
}
void PipelineBranchesitemlatestRun::unsetRunSummary()
{
    m_RunSummaryIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getStartTime() const
{
    return m_StartTime;
}
void PipelineBranchesitemlatestRun::setStartTime(std::string const& value)
{
    m_StartTime = value;
    m_StartTimeIsSet = true;
}
bool PipelineBranchesitemlatestRun::startTimeIsSet() const
{
    return m_StartTimeIsSet;
}
void PipelineBranchesitemlatestRun::unsetStartTime()
{
    m_StartTimeIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getState() const
{
    return m_State;
}
void PipelineBranchesitemlatestRun::setState(std::string const& value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool PipelineBranchesitemlatestRun::stateIsSet() const
{
    return m_StateIsSet;
}
void PipelineBranchesitemlatestRun::unsetState()
{
    m_StateIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getType() const
{
    return m_Type;
}
void PipelineBranchesitemlatestRun::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool PipelineBranchesitemlatestRun::typeIsSet() const
{
    return m_TypeIsSet;
}
void PipelineBranchesitemlatestRun::unsetType()
{
    m_TypeIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getCommitId() const
{
    return m_CommitId;
}
void PipelineBranchesitemlatestRun::setCommitId(std::string const& value)
{
    m_CommitId = value;
    m_CommitIdIsSet = true;
}
bool PipelineBranchesitemlatestRun::commitIdIsSet() const
{
    return m_CommitIdIsSet;
}
void PipelineBranchesitemlatestRun::unsetCommitId()
{
    m_CommitIdIsSet = false;
}
std::string PipelineBranchesitemlatestRun::getClass() const
{
    return m__class;
}
void PipelineBranchesitemlatestRun::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool PipelineBranchesitemlatestRun::classIsSet() const
{
    return m__classIsSet;
}
void PipelineBranchesitemlatestRun::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

