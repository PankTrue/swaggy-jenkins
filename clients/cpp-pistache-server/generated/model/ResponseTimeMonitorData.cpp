/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseTimeMonitorData.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseTimeMonitorData::ResponseTimeMonitorData()
{
    m__class = "";
    m__classIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Average = 0;
    m_AverageIsSet = false;
    
}

ResponseTimeMonitorData::~ResponseTimeMonitorData()
{
}

void ResponseTimeMonitorData::validate()
{
    // TODO: implement validation
}

nlohmann::json ResponseTimeMonitorData::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m_TimestampIsSet)
    {
        val["timestamp"] = m_Timestamp;
    }
    if(m_AverageIsSet)
    {
        val["average"] = m_Average;
    }
    

    return val;
}

void ResponseTimeMonitorData::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    if(val.find("timestamp") != val.end())
    {
        setTimestamp(val.at("timestamp"));
    }
    if(val.find("average") != val.end())
    {
        setAverage(val.at("average"));
    }
    
}


std::string ResponseTimeMonitorData::getClass() const
{
    return m__class;
}
void ResponseTimeMonitorData::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool ResponseTimeMonitorData::classIsSet() const
{
    return m__classIsSet;
}
void ResponseTimeMonitorData::unset_class()
{
    m__classIsSet = false;
}
int32_t ResponseTimeMonitorData::getTimestamp() const
{
    return m_Timestamp;
}
void ResponseTimeMonitorData::setTimestamp(int32_t const value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool ResponseTimeMonitorData::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void ResponseTimeMonitorData::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int32_t ResponseTimeMonitorData::getAverage() const
{
    return m_Average;
}
void ResponseTimeMonitorData::setAverage(int32_t const value)
{
    m_Average = value;
    m_AverageIsSet = true;
}
bool ResponseTimeMonitorData::averageIsSet() const
{
    return m_AverageIsSet;
}
void ResponseTimeMonitorData::unsetAverage()
{
    m_AverageIsSet = false;
}

}
}
}
}

