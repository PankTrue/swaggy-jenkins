/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SwapSpaceMonitorMemoryUsage2.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

SwapSpaceMonitorMemoryUsage2::SwapSpaceMonitorMemoryUsage2()
{
    m__class = "";
    m__classIsSet = false;
    m_AvailablePhysicalMemory = 0;
    m_AvailablePhysicalMemoryIsSet = false;
    m_AvailableSwapSpace = 0;
    m_AvailableSwapSpaceIsSet = false;
    m_TotalPhysicalMemory = 0;
    m_TotalPhysicalMemoryIsSet = false;
    m_TotalSwapSpace = 0;
    m_TotalSwapSpaceIsSet = false;
    
}

SwapSpaceMonitorMemoryUsage2::~SwapSpaceMonitorMemoryUsage2()
{
}

void SwapSpaceMonitorMemoryUsage2::validate()
{
    // TODO: implement validation
}

nlohmann::json SwapSpaceMonitorMemoryUsage2::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m_AvailablePhysicalMemoryIsSet)
    {
        val["availablePhysicalMemory"] = m_AvailablePhysicalMemory;
    }
    if(m_AvailableSwapSpaceIsSet)
    {
        val["availableSwapSpace"] = m_AvailableSwapSpace;
    }
    if(m_TotalPhysicalMemoryIsSet)
    {
        val["totalPhysicalMemory"] = m_TotalPhysicalMemory;
    }
    if(m_TotalSwapSpaceIsSet)
    {
        val["totalSwapSpace"] = m_TotalSwapSpace;
    }
    

    return val;
}

void SwapSpaceMonitorMemoryUsage2::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    if(val.find("availablePhysicalMemory") != val.end())
    {
        setAvailablePhysicalMemory(val.at("availablePhysicalMemory"));
    }
    if(val.find("availableSwapSpace") != val.end())
    {
        setAvailableSwapSpace(val.at("availableSwapSpace"));
    }
    if(val.find("totalPhysicalMemory") != val.end())
    {
        setTotalPhysicalMemory(val.at("totalPhysicalMemory"));
    }
    if(val.find("totalSwapSpace") != val.end())
    {
        setTotalSwapSpace(val.at("totalSwapSpace"));
    }
    
}


std::string SwapSpaceMonitorMemoryUsage2::getClass() const
{
    return m__class;
}
void SwapSpaceMonitorMemoryUsage2::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::classIsSet() const
{
    return m__classIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unset_class()
{
    m__classIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getAvailablePhysicalMemory() const
{
    return m_AvailablePhysicalMemory;
}
void SwapSpaceMonitorMemoryUsage2::setAvailablePhysicalMemory(int32_t const value)
{
    m_AvailablePhysicalMemory = value;
    m_AvailablePhysicalMemoryIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::availablePhysicalMemoryIsSet() const
{
    return m_AvailablePhysicalMemoryIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unsetAvailablePhysicalMemory()
{
    m_AvailablePhysicalMemoryIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getAvailableSwapSpace() const
{
    return m_AvailableSwapSpace;
}
void SwapSpaceMonitorMemoryUsage2::setAvailableSwapSpace(int32_t const value)
{
    m_AvailableSwapSpace = value;
    m_AvailableSwapSpaceIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::availableSwapSpaceIsSet() const
{
    return m_AvailableSwapSpaceIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unsetAvailableSwapSpace()
{
    m_AvailableSwapSpaceIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getTotalPhysicalMemory() const
{
    return m_TotalPhysicalMemory;
}
void SwapSpaceMonitorMemoryUsage2::setTotalPhysicalMemory(int32_t const value)
{
    m_TotalPhysicalMemory = value;
    m_TotalPhysicalMemoryIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::totalPhysicalMemoryIsSet() const
{
    return m_TotalPhysicalMemoryIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unsetTotalPhysicalMemory()
{
    m_TotalPhysicalMemoryIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getTotalSwapSpace() const
{
    return m_TotalSwapSpace;
}
void SwapSpaceMonitorMemoryUsage2::setTotalSwapSpace(int32_t const value)
{
    m_TotalSwapSpace = value;
    m_TotalSwapSpaceIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::totalSwapSpaceIsSet() const
{
    return m_TotalSwapSpaceIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unsetTotalSwapSpace()
{
    m_TotalSwapSpaceIsSet = false;
}

}
}
}
}

