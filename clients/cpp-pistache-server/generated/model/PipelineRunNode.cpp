/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.1
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PipelineRunNode.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

PipelineRunNode::PipelineRunNode()
{
    m__class = "";
    m__classIsSet = false;
    m_DisplayName = "";
    m_DisplayNameIsSet = false;
    m_DurationInMillis = 0;
    m_DurationInMillisIsSet = false;
    m_EdgesIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_Result = "";
    m_ResultIsSet = false;
    m_StartTime = "";
    m_StartTimeIsSet = false;
    m_State = "";
    m_StateIsSet = false;
    
}

PipelineRunNode::~PipelineRunNode()
{
}

void PipelineRunNode::validate()
{
    // TODO: implement validation
}

nlohmann::json PipelineRunNode::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m_DisplayNameIsSet)
    {
        val["displayName"] = ModelBase::toJson(m_DisplayName);
    }
    if(m_DurationInMillisIsSet)
    {
        val["durationInMillis"] = m_DurationInMillis;
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Edges )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["edges"] = jsonArray;
        }
    }
    if(m_IdIsSet)
    {
        val["id"] = ModelBase::toJson(m_Id);
    }
    if(m_ResultIsSet)
    {
        val["result"] = ModelBase::toJson(m_Result);
    }
    if(m_StartTimeIsSet)
    {
        val["startTime"] = ModelBase::toJson(m_StartTime);
    }
    if(m_StateIsSet)
    {
        val["state"] = ModelBase::toJson(m_State);
    }
    

    return val;
}

void PipelineRunNode::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
    }
    if(val.find("displayName") != val.end())
    {
        setDisplayName(val.at("displayName"));
    }
    if(val.find("durationInMillis") != val.end())
    {
        setDurationInMillis(val.at("durationInMillis"));
    }
    {
        m_Edges.clear();
        nlohmann::json jsonArray;
        if(val.find("edges") != val.end())
        {
        for( auto& item : val["edges"] )
        {
            
            if(item.is_null())
            {
                m_Edges.push_back( PipelineRunNodeedges() );
            }
            else
            {
                PipelineRunNodeedges newItem;
                newItem.fromJson(item);
                m_Edges.push_back( newItem );
            }
            
        }
        }
    }
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("result") != val.end())
    {
        setResult(val.at("result"));
    }
    if(val.find("startTime") != val.end())
    {
        setStartTime(val.at("startTime"));
    }
    if(val.find("state") != val.end())
    {
        setState(val.at("state"));
    }
    
}


std::string PipelineRunNode::getClass() const
{
    return m__class;
}
void PipelineRunNode::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool PipelineRunNode::classIsSet() const
{
    return m__classIsSet;
}
void PipelineRunNode::unset_class()
{
    m__classIsSet = false;
}
std::string PipelineRunNode::getDisplayName() const
{
    return m_DisplayName;
}
void PipelineRunNode::setDisplayName(std::string const& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool PipelineRunNode::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}
void PipelineRunNode::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
int32_t PipelineRunNode::getDurationInMillis() const
{
    return m_DurationInMillis;
}
void PipelineRunNode::setDurationInMillis(int32_t const value)
{
    m_DurationInMillis = value;
    m_DurationInMillisIsSet = true;
}
bool PipelineRunNode::durationInMillisIsSet() const
{
    return m_DurationInMillisIsSet;
}
void PipelineRunNode::unsetDurationInMillis()
{
    m_DurationInMillisIsSet = false;
}
std::vector<PipelineRunNodeedges>& PipelineRunNode::getEdges()
{
    return m_Edges;
}
bool PipelineRunNode::edgesIsSet() const
{
    return m_EdgesIsSet;
}
void PipelineRunNode::unsetEdges()
{
    m_EdgesIsSet = false;
}
std::string PipelineRunNode::getId() const
{
    return m_Id;
}
void PipelineRunNode::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool PipelineRunNode::idIsSet() const
{
    return m_IdIsSet;
}
void PipelineRunNode::unsetId()
{
    m_IdIsSet = false;
}
std::string PipelineRunNode::getResult() const
{
    return m_Result;
}
void PipelineRunNode::setResult(std::string const& value)
{
    m_Result = value;
    m_ResultIsSet = true;
}
bool PipelineRunNode::resultIsSet() const
{
    return m_ResultIsSet;
}
void PipelineRunNode::unsetResult()
{
    m_ResultIsSet = false;
}
std::string PipelineRunNode::getStartTime() const
{
    return m_StartTime;
}
void PipelineRunNode::setStartTime(std::string const& value)
{
    m_StartTime = value;
    m_StartTimeIsSet = true;
}
bool PipelineRunNode::startTimeIsSet() const
{
    return m_StartTimeIsSet;
}
void PipelineRunNode::unsetStartTime()
{
    m_StartTimeIsSet = false;
}
std::string PipelineRunNode::getState() const
{
    return m_State;
}
void PipelineRunNode::setState(std::string const& value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool PipelineRunNode::stateIsSet() const
{
    return m_StateIsSet;
}
void PipelineRunNode::unsetState()
{
    m_StateIsSet = false;
}

}
}
}
}

