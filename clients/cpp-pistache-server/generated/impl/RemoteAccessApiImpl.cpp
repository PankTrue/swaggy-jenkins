/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "RemoteAccessApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

RemoteAccessApiImpl::RemoteAccessApiImpl(Pistache::Address addr)
    : RemoteAccessApi(addr)
    { }

void RemoteAccessApiImpl::get_computer(const Pistache::Optional<int32_t> &depth, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_crumb(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_jenkins(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_job(const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_job_config(const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_job_last_build(const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_job_progressive_text(const std::string &name, const std::string &number, const Pistache::Optional<std::string> &start, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_queue(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_queue_item(const std::string &number, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_view(const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::get_view_config(const std::string &name, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::head_jenkins(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_create_item(const Pistache::Optional<std::string> &name, const Pistache::Optional<std::string> &from, const Pistache::Optional<std::string> &mode, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, const Pistache::Optional<Pistache::Http::Header::Raw> &contentType, const std::string &body, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_create_view(const Pistache::Optional<std::string> &name, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, const Pistache::Optional<Pistache::Http::Header::Raw> &contentType, const std::string &body, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_job_build(const std::string &name, const Pistache::Optional<std::string> &json, const Pistache::Optional<std::string> &token, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_job_config(const std::string &name, const std::string &body, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_job_delete(const std::string &name, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_job_disable(const std::string &name, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_job_enable(const std::string &name, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_job_last_build_stop(const std::string &name, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RemoteAccessApiImpl::post_view_config(const std::string &name, const std::string &body, const Pistache::Optional<Pistache::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

