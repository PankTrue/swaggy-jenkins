/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/BranchImpl', 'model/FavoriteImpl', 'model/GithubScm', 'model/MultibranchPipeline', 'model/Organisation', 'model/Organisations', 'model/Pipeline', 'model/PipelineActivities', 'model/PipelineFolderImpl', 'model/PipelineImpl', 'model/PipelineQueue', 'model/PipelineRun', 'model/PipelineRunNode', 'model/PipelineRunNodeSteps', 'model/PipelineRunNodes', 'model/PipelineRuns', 'model/PipelineStepImpl', 'model/Pipelines', 'model/QueueItemImpl', 'model/ScmOrganisations', 'model/User', 'model/UserFavorites'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/BranchImpl'), require('../model/FavoriteImpl'), require('../model/GithubScm'), require('../model/MultibranchPipeline'), require('../model/Organisation'), require('../model/Organisations'), require('../model/Pipeline'), require('../model/PipelineActivities'), require('../model/PipelineFolderImpl'), require('../model/PipelineImpl'), require('../model/PipelineQueue'), require('../model/PipelineRun'), require('../model/PipelineRunNode'), require('../model/PipelineRunNodeSteps'), require('../model/PipelineRunNodes'), require('../model/PipelineRuns'), require('../model/PipelineStepImpl'), require('../model/Pipelines'), require('../model/QueueItemImpl'), require('../model/ScmOrganisations'), require('../model/User'), require('../model/UserFavorites'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggyJenkins) {
      root.SwaggyJenkins = {};
    }
    root.SwaggyJenkins.BlueOceanApi = factory(root.SwaggyJenkins.ApiClient, root.SwaggyJenkins.Body, root.SwaggyJenkins.BranchImpl, root.SwaggyJenkins.FavoriteImpl, root.SwaggyJenkins.GithubScm, root.SwaggyJenkins.MultibranchPipeline, root.SwaggyJenkins.Organisation, root.SwaggyJenkins.Organisations, root.SwaggyJenkins.Pipeline, root.SwaggyJenkins.PipelineActivities, root.SwaggyJenkins.PipelineFolderImpl, root.SwaggyJenkins.PipelineImpl, root.SwaggyJenkins.PipelineQueue, root.SwaggyJenkins.PipelineRun, root.SwaggyJenkins.PipelineRunNode, root.SwaggyJenkins.PipelineRunNodeSteps, root.SwaggyJenkins.PipelineRunNodes, root.SwaggyJenkins.PipelineRuns, root.SwaggyJenkins.PipelineStepImpl, root.SwaggyJenkins.Pipelines, root.SwaggyJenkins.QueueItemImpl, root.SwaggyJenkins.ScmOrganisations, root.SwaggyJenkins.User, root.SwaggyJenkins.UserFavorites);
  }
}(this, function(ApiClient, Body, BranchImpl, FavoriteImpl, GithubScm, MultibranchPipeline, Organisation, Organisations, Pipeline, PipelineActivities, PipelineFolderImpl, PipelineImpl, PipelineQueue, PipelineRun, PipelineRunNode, PipelineRunNodeSteps, PipelineRunNodes, PipelineRuns, PipelineStepImpl, Pipelines, QueueItemImpl, ScmOrganisations, User, UserFavorites) {
  'use strict';

  /**
   * BlueOcean service.
   * @module api/BlueOceanApi
   * @version 1.1.0
   */

  /**
   * Constructs a new BlueOceanApi. 
   * @alias module:api/BlueOceanApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deletePipelineQueueItem operation.
     * @callback module:api/BlueOceanApi~deletePipelineQueueItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete queue item from an organization pipeline queue
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} queue Name of the queue item
     * @param {module:api/BlueOceanApi~deletePipelineQueueItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePipelineQueueItem = function(organization, pipeline, queue, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling deletePipelineQueueItem");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling deletePipelineQueueItem");
      }

      // verify the required parameter 'queue' is set
      if (queue === undefined || queue === null) {
        throw new Error("Missing the required parameter 'queue' when calling deletePipelineQueueItem");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'queue': queue
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthenticatedUser operation.
     * @callback module:api/BlueOceanApi~getAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve authenticated user details for an organization
     * @param {String} organization Name of the organization
     * @param {module:api/BlueOceanApi~getAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getAuthenticatedUser = function(organization, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getAuthenticatedUser");
      }


      var pathParams = {
        'organization': organization
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/user/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClasses operation.
     * @callback module:api/BlueOceanApi~getClassesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of class names supported by a given class
     * @param {String} _class Name of the class
     * @param {module:api/BlueOceanApi~getClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getClasses = function(_class, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getClasses");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blue/rest/classes/{class}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJsonWebKey operation.
     * @callback module:api/BlueOceanApi~getJsonWebKeyCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve JSON Web Key
     * @param {Number} key Key ID received as part of JWT header field kid
     * @param {module:api/BlueOceanApi~getJsonWebKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getJsonWebKey = function(key, callback) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getJsonWebKey");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/jwt-auth/jwks/{key}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJsonWebToken operation.
     * @callback module:api/BlueOceanApi~getJsonWebTokenCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve JSON Web Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.expiryTimeInMins Token expiry time in minutes, default: 30 minutes
     * @param {Number} opts.maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
     * @param {module:api/BlueOceanApi~getJsonWebTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getJsonWebToken = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'expiryTimeInMins': opts['expiryTimeInMins'],
        'maxExpiryTimeInMins': opts['maxExpiryTimeInMins'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/jwt-auth/token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisation operation.
     * @callback module:api/BlueOceanApi~getOrganisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve organization details
     * @param {String} organization Name of the organization
     * @param {module:api/BlueOceanApi~getOrganisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisation}
     */
    this.getOrganisation = function(organization, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getOrganisation");
      }


      var pathParams = {
        'organization': organization
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Organisation;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisations operation.
     * @callback module:api/BlueOceanApi~getOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Organisations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all organizations details
     * @param {module:api/BlueOceanApi~getOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Organisations}
     */
    this.getOrganisations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Organisations;

      return this.apiClient.callApi(
        '/blue/rest/organizations/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipeline operation.
     * @callback module:api/BlueOceanApi~getPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pipeline details for an organization
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {module:api/BlueOceanApi~getPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    this.getPipeline = function(organization, pipeline, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipeline");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipeline");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Pipeline;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineActivities operation.
     * @callback module:api/BlueOceanApi~getPipelineActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineActivities} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all activities details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {module:api/BlueOceanApi~getPipelineActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineActivities}
     */
    this.getPipelineActivities = function(organization, pipeline, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineActivities");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineActivities");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineActivities;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineBranch operation.
     * @callback module:api/BlueOceanApi~getPipelineBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BranchImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve branch details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} branch Name of the branch
     * @param {module:api/BlueOceanApi~getPipelineBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BranchImpl}
     */
    this.getPipelineBranch = function(organization, pipeline, branch, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineBranch");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineBranch");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getPipelineBranch");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'branch': branch
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BranchImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineBranchRun operation.
     * @callback module:api/BlueOceanApi~getPipelineBranchRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve branch run details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} branch Name of the branch
     * @param {String} run Name of the run
     * @param {module:api/BlueOceanApi~getPipelineBranchRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineRun}
     */
    this.getPipelineBranchRun = function(organization, pipeline, branch, run, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineBranchRun");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineBranchRun");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getPipelineBranchRun");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling getPipelineBranchRun");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'branch': branch,
        'run': run
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineRun;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineBranches operation.
     * @callback module:api/BlueOceanApi~getPipelineBranchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MultibranchPipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all branches details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {module:api/BlueOceanApi~getPipelineBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MultibranchPipeline}
     */
    this.getPipelineBranches = function(organization, pipeline, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineBranches");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineBranches");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MultibranchPipeline;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineFolder operation.
     * @callback module:api/BlueOceanApi~getPipelineFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineFolderImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pipeline folder for an organization
     * @param {String} organization Name of the organization
     * @param {String} folder Name of the folder
     * @param {module:api/BlueOceanApi~getPipelineFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineFolderImpl}
     */
    this.getPipelineFolder = function(organization, folder, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineFolder");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling getPipelineFolder");
      }


      var pathParams = {
        'organization': organization,
        'folder': folder
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineFolderImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{folder}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineFolderPipeline operation.
     * @callback module:api/BlueOceanApi~getPipelineFolderPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pipeline details for an organization folder
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} folder Name of the folder
     * @param {module:api/BlueOceanApi~getPipelineFolderPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineImpl}
     */
    this.getPipelineFolderPipeline = function(organization, pipeline, folder, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineFolderPipeline");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineFolderPipeline");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling getPipelineFolderPipeline");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'folder': folder
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineQueue operation.
     * @callback module:api/BlueOceanApi~getPipelineQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineQueue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve queue details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {module:api/BlueOceanApi~getPipelineQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineQueue}
     */
    this.getPipelineQueue = function(organization, pipeline, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineQueue");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineQueue");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineQueue;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineRun operation.
     * @callback module:api/BlueOceanApi~getPipelineRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve run details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {module:api/BlueOceanApi~getPipelineRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineRun}
     */
    this.getPipelineRun = function(organization, pipeline, run, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineRun");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineRun");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling getPipelineRun");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineRun;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineRunLog operation.
     * @callback module:api/BlueOceanApi~getPipelineRunLogCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get log for a pipeline run
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Start position of the log
     * @param {Boolean} opts.download Set to true in order to download the file, otherwise it&#39;s passed as a response body
     * @param {module:api/BlueOceanApi~getPipelineRunLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getPipelineRunLog = function(organization, pipeline, run, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineRunLog");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineRunLog");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling getPipelineRunLog");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run
      };
      var queryParams = {
        'start': opts['start'],
        'download': opts['download'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineRunNode operation.
     * @callback module:api/BlueOceanApi~getPipelineRunNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineRunNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve run node details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {String} node Name of the node
     * @param {module:api/BlueOceanApi~getPipelineRunNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineRunNode}
     */
    this.getPipelineRunNode = function(organization, pipeline, run, node, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineRunNode");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineRunNode");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling getPipelineRunNode");
      }

      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling getPipelineRunNode");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run,
        'node': node
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineRunNode;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineRunNodeStep operation.
     * @callback module:api/BlueOceanApi~getPipelineRunNodeStepCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineStepImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve run node details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {String} node Name of the node
     * @param {String} step Name of the step
     * @param {module:api/BlueOceanApi~getPipelineRunNodeStepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineStepImpl}
     */
    this.getPipelineRunNodeStep = function(organization, pipeline, run, node, step, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineRunNodeStep");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineRunNodeStep");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling getPipelineRunNodeStep");
      }

      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling getPipelineRunNodeStep");
      }

      // verify the required parameter 'step' is set
      if (step === undefined || step === null) {
        throw new Error("Missing the required parameter 'step' when calling getPipelineRunNodeStep");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run,
        'node': node,
        'step': step
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineStepImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineRunNodeStepLog operation.
     * @callback module:api/BlueOceanApi~getPipelineRunNodeStepLogCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get log for a pipeline run node step
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {String} node Name of the node
     * @param {String} step Name of the step
     * @param {module:api/BlueOceanApi~getPipelineRunNodeStepLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.getPipelineRunNodeStepLog = function(organization, pipeline, run, node, step, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineRunNodeStepLog");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineRunNodeStepLog");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling getPipelineRunNodeStepLog");
      }

      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling getPipelineRunNodeStepLog");
      }

      // verify the required parameter 'step' is set
      if (step === undefined || step === null) {
        throw new Error("Missing the required parameter 'step' when calling getPipelineRunNodeStepLog");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run,
        'node': node,
        'step': step
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineRunNodeSteps operation.
     * @callback module:api/BlueOceanApi~getPipelineRunNodeStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineRunNodeSteps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve run node steps details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {String} node Name of the node
     * @param {module:api/BlueOceanApi~getPipelineRunNodeStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineRunNodeSteps}
     */
    this.getPipelineRunNodeSteps = function(organization, pipeline, run, node, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineRunNodeSteps");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineRunNodeSteps");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling getPipelineRunNodeSteps");
      }

      // verify the required parameter 'node' is set
      if (node === undefined || node === null) {
        throw new Error("Missing the required parameter 'node' when calling getPipelineRunNodeSteps");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run,
        'node': node
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineRunNodeSteps;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineRunNodes operation.
     * @callback module:api/BlueOceanApi~getPipelineRunNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineRunNodes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve run nodes details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {module:api/BlueOceanApi~getPipelineRunNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineRunNodes}
     */
    this.getPipelineRunNodes = function(organization, pipeline, run, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineRunNodes");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineRunNodes");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling getPipelineRunNodes");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineRunNodes;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineRuns operation.
     * @callback module:api/BlueOceanApi~getPipelineRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineRuns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all runs details for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {module:api/BlueOceanApi~getPipelineRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineRuns}
     */
    this.getPipelineRuns = function(organization, pipeline, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelineRuns");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineRuns");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineRuns;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelines operation.
     * @callback module:api/BlueOceanApi~getPipelinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipelines} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all pipelines details for an organization
     * @param {String} organization Name of the organization
     * @param {module:api/BlueOceanApi~getPipelinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipelines}
     */
    this.getPipelines = function(organization, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getPipelines");
      }


      var pathParams = {
        'organization': organization
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Pipelines;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSCM operation.
     * @callback module:api/BlueOceanApi~getSCMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GithubScm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve SCM details for an organization
     * @param {String} organization Name of the organization
     * @param {String} scm Name of SCM
     * @param {module:api/BlueOceanApi~getSCMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GithubScm}
     */
    this.getSCM = function(organization, scm, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getSCM");
      }

      // verify the required parameter 'scm' is set
      if (scm === undefined || scm === null) {
        throw new Error("Missing the required parameter 'scm' when calling getSCM");
      }


      var pathParams = {
        'organization': organization,
        'scm': scm
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GithubScm;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/scm/{scm}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSCMOrganisationRepositories operation.
     * @callback module:api/BlueOceanApi~getSCMOrganisationRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmOrganisations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve SCM organization repositories details for an organization
     * @param {String} organization Name of the organization
     * @param {String} scm Name of SCM
     * @param {String} scmOrganisation Name of the SCM organization
     * @param {Object} opts Optional parameters
     * @param {String} opts.credentialId Credential ID
     * @param {Number} opts.pageSize Number of items in a page
     * @param {Number} opts.pageNumber Page number
     * @param {module:api/BlueOceanApi~getSCMOrganisationRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmOrganisations}
     */
    this.getSCMOrganisationRepositories = function(organization, scm, scmOrganisation, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getSCMOrganisationRepositories");
      }

      // verify the required parameter 'scm' is set
      if (scm === undefined || scm === null) {
        throw new Error("Missing the required parameter 'scm' when calling getSCMOrganisationRepositories");
      }

      // verify the required parameter 'scmOrganisation' is set
      if (scmOrganisation === undefined || scmOrganisation === null) {
        throw new Error("Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepositories");
      }


      var pathParams = {
        'organization': organization,
        'scm': scm,
        'scmOrganisation': scmOrganisation
      };
      var queryParams = {
        'credentialId': opts['credentialId'],
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ScmOrganisations;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSCMOrganisationRepository operation.
     * @callback module:api/BlueOceanApi~getSCMOrganisationRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmOrganisations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve SCM organization repository details for an organization
     * @param {String} organization Name of the organization
     * @param {String} scm Name of SCM
     * @param {String} scmOrganisation Name of the SCM organization
     * @param {String} repository Name of the SCM repository
     * @param {Object} opts Optional parameters
     * @param {String} opts.credentialId Credential ID
     * @param {module:api/BlueOceanApi~getSCMOrganisationRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmOrganisations}
     */
    this.getSCMOrganisationRepository = function(organization, scm, scmOrganisation, repository, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getSCMOrganisationRepository");
      }

      // verify the required parameter 'scm' is set
      if (scm === undefined || scm === null) {
        throw new Error("Missing the required parameter 'scm' when calling getSCMOrganisationRepository");
      }

      // verify the required parameter 'scmOrganisation' is set
      if (scmOrganisation === undefined || scmOrganisation === null) {
        throw new Error("Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepository");
      }

      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getSCMOrganisationRepository");
      }


      var pathParams = {
        'organization': organization,
        'scm': scm,
        'scmOrganisation': scmOrganisation,
        'repository': repository
      };
      var queryParams = {
        'credentialId': opts['credentialId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ScmOrganisations;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSCMOrganisations operation.
     * @callback module:api/BlueOceanApi~getSCMOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScmOrganisations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve SCM organizations details for an organization
     * @param {String} organization Name of the organization
     * @param {String} scm Name of SCM
     * @param {Object} opts Optional parameters
     * @param {String} opts.credentialId Credential ID
     * @param {module:api/BlueOceanApi~getSCMOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScmOrganisations}
     */
    this.getSCMOrganisations = function(organization, scm, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getSCMOrganisations");
      }

      // verify the required parameter 'scm' is set
      if (scm === undefined || scm === null) {
        throw new Error("Missing the required parameter 'scm' when calling getSCMOrganisations");
      }


      var pathParams = {
        'organization': organization,
        'scm': scm
      };
      var queryParams = {
        'credentialId': opts['credentialId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ScmOrganisations;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/scm/{scm}/organizations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/BlueOceanApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve user details for an organization
     * @param {String} organization Name of the organization
     * @param {String} user Name of the user
     * @param {module:api/BlueOceanApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUser = function(organization, user, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getUser");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getUser");
      }


      var pathParams = {
        'organization': organization,
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/users/{user}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserFavorites operation.
     * @callback module:api/BlueOceanApi~getUserFavoritesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserFavorites} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve user favorites details for an organization
     * @param {String} user Name of the user
     * @param {module:api/BlueOceanApi~getUserFavoritesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserFavorites}
     */
    this.getUserFavorites = function(user, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getUserFavorites");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserFavorites;

      return this.apiClient.callApi(
        '/blue/rest/users/{user}/favorites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/BlueOceanApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve users details for an organization
     * @param {String} organization Name of the organization
     * @param {module:api/BlueOceanApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUsers = function(organization, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling getUsers");
      }


      var pathParams = {
        'organization': organization
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/users/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPipelineRun operation.
     * @callback module:api/BlueOceanApi~postPipelineRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueItemImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replay an organization pipeline run
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {module:api/BlueOceanApi~postPipelineRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueItemImpl}
     */
    this.postPipelineRun = function(organization, pipeline, run, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling postPipelineRun");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling postPipelineRun");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling postPipelineRun");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = QueueItemImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPipelineRuns operation.
     * @callback module:api/BlueOceanApi~postPipelineRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueueItemImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a build for an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {module:api/BlueOceanApi~postPipelineRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueueItemImpl}
     */
    this.postPipelineRuns = function(organization, pipeline, callback) {
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling postPipelineRuns");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling postPipelineRuns");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = QueueItemImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putPipelineFavorite operation.
     * @callback module:api/BlueOceanApi~putPipelineFavoriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FavoriteImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favorite/unfavorite a pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {module:model/Body} body Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite
     * @param {module:api/BlueOceanApi~putPipelineFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FavoriteImpl}
     */
    this.putPipelineFavorite = function(organization, pipeline, body, callback) {
      var postBody = body;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling putPipelineFavorite");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling putPipelineFavorite");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPipelineFavorite");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FavoriteImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putPipelineRun operation.
     * @callback module:api/BlueOceanApi~putPipelineRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a build of an organization pipeline
     * @param {String} organization Name of the organization
     * @param {String} pipeline Name of the pipeline
     * @param {String} run Name of the run
     * @param {Object} opts Optional parameters
     * @param {String} opts.blocking Set to true to make blocking stop, default: false
     * @param {Number} opts.timeOutInSecs Timeout in seconds, default: 10 seconds
     * @param {module:api/BlueOceanApi~putPipelineRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineRun}
     */
    this.putPipelineRun = function(organization, pipeline, run, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organization' is set
      if (organization === undefined || organization === null) {
        throw new Error("Missing the required parameter 'organization' when calling putPipelineRun");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling putPipelineRun");
      }

      // verify the required parameter 'run' is set
      if (run === undefined || run === null) {
        throw new Error("Missing the required parameter 'run' when calling putPipelineRun");
      }


      var pathParams = {
        'organization': organization,
        'pipeline': pipeline,
        'run': run
      };
      var queryParams = {
        'blocking': opts['blocking'],
        'timeOutInSecs': opts['timeOutInSecs'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PipelineRun;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/BlueOceanApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for any resource details
     * @param {String} q Query string
     * @param {module:api/BlueOceanApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.search = function(q, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling search");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blue/rest/search/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchClasses operation.
     * @callback module:api/BlueOceanApi~searchClassesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get classes details
     * @param {String} q Query string containing an array of class names
     * @param {module:api/BlueOceanApi~searchClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    this.searchClasses = function(q, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchClasses");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['jenkins_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blue/rest/classes/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
