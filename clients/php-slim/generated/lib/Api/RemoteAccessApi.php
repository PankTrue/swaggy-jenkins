<?php
/**
 * RemoteAccessApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use OpenAPIServer\AbstractApiController;

/**
 * RemoteAccessApi Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class RemoteAccessApi extends AbstractApiController {

    /**
     * GET getComputer
     * Summary: 
     * Notes: Retrieve computer details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getComputer($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $depth = $request->getQueryParam('depth');
        $response->write('How about implementing getComputer as a GET method ?');
        return $response;
    }
    
    /**
     * GET getJenkins
     * Summary: 
     * Notes: Retrieve Jenkins details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getJenkins($request, $response, $args) {
        $response->write('How about implementing getJenkins as a GET method ?');
        return $response;
    }
    
    /**
     * GET getJob
     * Summary: 
     * Notes: Retrieve job details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getJob($request, $response, $args) {
        $name = $args['name'];
        $response->write('How about implementing getJob as a GET method ?');
        return $response;
    }
    
    /**
     * GET getJobConfig
     * Summary: 
     * Notes: Retrieve job configuration
     * Output-Formats: [text/xml]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getJobConfig($request, $response, $args) {
        $name = $args['name'];
        $response->write('How about implementing getJobConfig as a GET method ?');
        return $response;
    }
    
    /**
     * GET getJobLastBuild
     * Summary: 
     * Notes: Retrieve job&#39;s last build details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getJobLastBuild($request, $response, $args) {
        $name = $args['name'];
        $response->write('How about implementing getJobLastBuild as a GET method ?');
        return $response;
    }
    
    /**
     * GET getJobProgressiveText
     * Summary: 
     * Notes: Retrieve job&#39;s build progressive text output
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getJobProgressiveText($request, $response, $args) {
        $name = $args['name'];
        $number = $args['number'];
        $queryParams = $request->getQueryParams();
        $start = $request->getQueryParam('start');
        $response->write('How about implementing getJobProgressiveText as a GET method ?');
        return $response;
    }
    
    /**
     * GET getQueue
     * Summary: 
     * Notes: Retrieve queue details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getQueue($request, $response, $args) {
        $response->write('How about implementing getQueue as a GET method ?');
        return $response;
    }
    
    /**
     * GET getQueueItem
     * Summary: 
     * Notes: Retrieve queued item details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getQueueItem($request, $response, $args) {
        $number = $args['number'];
        $response->write('How about implementing getQueueItem as a GET method ?');
        return $response;
    }
    
    /**
     * GET getView
     * Summary: 
     * Notes: Retrieve view details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getView($request, $response, $args) {
        $name = $args['name'];
        $response->write('How about implementing getView as a GET method ?');
        return $response;
    }
    
    /**
     * GET getViewConfig
     * Summary: 
     * Notes: Retrieve view configuration
     * Output-Formats: [text/xml]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getViewConfig($request, $response, $args) {
        $name = $args['name'];
        $response->write('How about implementing getViewConfig as a GET method ?');
        return $response;
    }
    
    /**
     * HEAD headJenkins
     * Summary: 
     * Notes: Retrieve Jenkins headers
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function headJenkins($request, $response, $args) {
        $response->write('How about implementing headJenkins as a HEAD method ?');
        return $response;
    }
    
    /**
     * POST postCreateItem
     * Summary: 
     * Notes: Create a new job using job configuration, or copied from an existing job
     * Output-Formats: [*_/_*]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postCreateItem($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $contentType = $request->hasHeader('Content-Type') ? $headers['Content-Type'] : null;
        $queryParams = $request->getQueryParams();
        $name = $request->getQueryParam('name');
        $from = $request->getQueryParam('from');
        $mode = $request->getQueryParam('mode');
        $body = $request->getParsedBody();
        $response->write('How about implementing postCreateItem as a POST method ?');
        return $response;
    }
    
    /**
     * POST postCreateView
     * Summary: 
     * Notes: Create a new view using view configuration
     * Output-Formats: [*_/_*]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postCreateView($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $contentType = $request->hasHeader('Content-Type') ? $headers['Content-Type'] : null;
        $queryParams = $request->getQueryParams();
        $name = $request->getQueryParam('name');
        $body = $request->getParsedBody();
        $response->write('How about implementing postCreateView as a POST method ?');
        return $response;
    }
    
    /**
     * POST postJobBuild
     * Summary: 
     * Notes: Build a job
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postJobBuild($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $name = $args['name'];
        $queryParams = $request->getQueryParams();
        $json = $request->getQueryParam('json');
        $token = $request->getQueryParam('token');
        $response->write('How about implementing postJobBuild as a POST method ?');
        return $response;
    }
    
    /**
     * POST postJobConfig
     * Summary: 
     * Notes: Update job configuration
     * Output-Formats: [*_/_*]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postJobConfig($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $name = $args['name'];
        $body = $request->getParsedBody();
        $response->write('How about implementing postJobConfig as a POST method ?');
        return $response;
    }
    
    /**
     * POST postJobDelete
     * Summary: 
     * Notes: Delete a job
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postJobDelete($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $name = $args['name'];
        $response->write('How about implementing postJobDelete as a POST method ?');
        return $response;
    }
    
    /**
     * POST postJobDisable
     * Summary: 
     * Notes: Disable a job
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postJobDisable($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $name = $args['name'];
        $response->write('How about implementing postJobDisable as a POST method ?');
        return $response;
    }
    
    /**
     * POST postJobEnable
     * Summary: 
     * Notes: Enable a job
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postJobEnable($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $name = $args['name'];
        $response->write('How about implementing postJobEnable as a POST method ?');
        return $response;
    }
    
    /**
     * POST postJobLastBuildStop
     * Summary: 
     * Notes: Stop a job
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postJobLastBuildStop($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $name = $args['name'];
        $response->write('How about implementing postJobLastBuildStop as a POST method ?');
        return $response;
    }
    
    /**
     * POST postViewConfig
     * Summary: 
     * Notes: Update view configuration
     * Output-Formats: [*_/_*]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postViewConfig($request, $response, $args) {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $name = $args['name'];
        $body = $request->getParsedBody();
        $response->write('How about implementing postViewConfig as a POST method ?');
        return $response;
    }
    
}
