<?php
/**
 * BlueOceanApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use OpenAPIServer\AbstractApiController;

/**
 * BlueOceanApi Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class BlueOceanApi extends AbstractApiController {

    /**
     * DELETE deletePipelineQueueItem
     * Summary: 
     * Notes: Delete queue item from an organization pipeline queue
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function deletePipelineQueueItem($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $queue = $args['queue'];
        $response->write('How about implementing deletePipelineQueueItem as a DELETE method ?');
        return $response;
    }
    
    /**
     * GET getAuthenticatedUser
     * Summary: 
     * Notes: Retrieve authenticated user details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getAuthenticatedUser($request, $response, $args) {
        $organization = $args['organization'];
        $response->write('How about implementing getAuthenticatedUser as a GET method ?');
        return $response;
    }
    
    /**
     * GET getClasses
     * Summary: 
     * Notes: Get a list of class names supported by a given class
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getClasses($request, $response, $args) {
        $class = $args['class'];
        $response->write('How about implementing getClasses as a GET method ?');
        return $response;
    }
    
    /**
     * GET getJsonWebKey
     * Summary: 
     * Notes: Retrieve JSON Web Key
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getJsonWebKey($request, $response, $args) {
        $key = $args['key'];
        $response->write('How about implementing getJsonWebKey as a GET method ?');
        return $response;
    }
    
    /**
     * GET getJsonWebToken
     * Summary: 
     * Notes: Retrieve JSON Web Token
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getJsonWebToken($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $expiryTimeInMins = $request->getQueryParam('expiryTimeInMins');
        $maxExpiryTimeInMins = $request->getQueryParam('maxExpiryTimeInMins');
        $response->write('How about implementing getJsonWebToken as a GET method ?');
        return $response;
    }
    
    /**
     * GET getOrganisation
     * Summary: 
     * Notes: Retrieve organization details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getOrganisation($request, $response, $args) {
        $organization = $args['organization'];
        $response->write('How about implementing getOrganisation as a GET method ?');
        return $response;
    }
    
    /**
     * GET getOrganisations
     * Summary: 
     * Notes: Retrieve all organizations details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getOrganisations($request, $response, $args) {
        $response->write('How about implementing getOrganisations as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipeline
     * Summary: 
     * Notes: Retrieve pipeline details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipeline($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $response->write('How about implementing getPipeline as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineActivities
     * Summary: 
     * Notes: Retrieve all activities details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineActivities($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $response->write('How about implementing getPipelineActivities as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineBranch
     * Summary: 
     * Notes: Retrieve branch details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineBranch($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $branch = $args['branch'];
        $response->write('How about implementing getPipelineBranch as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineBranchRun
     * Summary: 
     * Notes: Retrieve branch run details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineBranchRun($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $branch = $args['branch'];
        $run = $args['run'];
        $response->write('How about implementing getPipelineBranchRun as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineBranches
     * Summary: 
     * Notes: Retrieve all branches details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineBranches($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $response->write('How about implementing getPipelineBranches as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineFolder
     * Summary: 
     * Notes: Retrieve pipeline folder for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineFolder($request, $response, $args) {
        $organization = $args['organization'];
        $folder = $args['folder'];
        $response->write('How about implementing getPipelineFolder as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineFolderPipeline
     * Summary: 
     * Notes: Retrieve pipeline details for an organization folder
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineFolderPipeline($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $folder = $args['folder'];
        $response->write('How about implementing getPipelineFolderPipeline as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineQueue
     * Summary: 
     * Notes: Retrieve queue details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineQueue($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $response->write('How about implementing getPipelineQueue as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineRun
     * Summary: 
     * Notes: Retrieve run details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineRun($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $response->write('How about implementing getPipelineRun as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineRunLog
     * Summary: 
     * Notes: Get log for a pipeline run
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineRunLog($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $queryParams = $request->getQueryParams();
        $start = $request->getQueryParam('start');
        $download = $request->getQueryParam('download');
        $response->write('How about implementing getPipelineRunLog as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineRunNode
     * Summary: 
     * Notes: Retrieve run node details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineRunNode($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $node = $args['node'];
        $response->write('How about implementing getPipelineRunNode as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineRunNodeStep
     * Summary: 
     * Notes: Retrieve run node details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineRunNodeStep($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $node = $args['node'];
        $step = $args['step'];
        $response->write('How about implementing getPipelineRunNodeStep as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineRunNodeStepLog
     * Summary: 
     * Notes: Get log for a pipeline run node step
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineRunNodeStepLog($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $node = $args['node'];
        $step = $args['step'];
        $response->write('How about implementing getPipelineRunNodeStepLog as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineRunNodeSteps
     * Summary: 
     * Notes: Retrieve run node steps details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineRunNodeSteps($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $node = $args['node'];
        $response->write('How about implementing getPipelineRunNodeSteps as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineRunNodes
     * Summary: 
     * Notes: Retrieve run nodes details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineRunNodes($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $response->write('How about implementing getPipelineRunNodes as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelineRuns
     * Summary: 
     * Notes: Retrieve all runs details for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelineRuns($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $response->write('How about implementing getPipelineRuns as a GET method ?');
        return $response;
    }
    
    /**
     * GET getPipelines
     * Summary: 
     * Notes: Retrieve all pipelines details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getPipelines($request, $response, $args) {
        $organization = $args['organization'];
        $response->write('How about implementing getPipelines as a GET method ?');
        return $response;
    }
    
    /**
     * GET getSCM
     * Summary: 
     * Notes: Retrieve SCM details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getSCM($request, $response, $args) {
        $organization = $args['organization'];
        $scm = $args['scm'];
        $response->write('How about implementing getSCM as a GET method ?');
        return $response;
    }
    
    /**
     * GET getSCMOrganisationRepositories
     * Summary: 
     * Notes: Retrieve SCM organization repositories details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getSCMOrganisationRepositories($request, $response, $args) {
        $organization = $args['organization'];
        $scm = $args['scm'];
        $scmOrganisation = $args['scmOrganisation'];
        $queryParams = $request->getQueryParams();
        $credentialId = $request->getQueryParam('credentialId');
        $pageSize = $request->getQueryParam('pageSize');
        $pageNumber = $request->getQueryParam('pageNumber');
        $response->write('How about implementing getSCMOrganisationRepositories as a GET method ?');
        return $response;
    }
    
    /**
     * GET getSCMOrganisationRepository
     * Summary: 
     * Notes: Retrieve SCM organization repository details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getSCMOrganisationRepository($request, $response, $args) {
        $organization = $args['organization'];
        $scm = $args['scm'];
        $scmOrganisation = $args['scmOrganisation'];
        $repository = $args['repository'];
        $queryParams = $request->getQueryParams();
        $credentialId = $request->getQueryParam('credentialId');
        $response->write('How about implementing getSCMOrganisationRepository as a GET method ?');
        return $response;
    }
    
    /**
     * GET getSCMOrganisations
     * Summary: 
     * Notes: Retrieve SCM organizations details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getSCMOrganisations($request, $response, $args) {
        $organization = $args['organization'];
        $scm = $args['scm'];
        $queryParams = $request->getQueryParams();
        $credentialId = $request->getQueryParam('credentialId');
        $response->write('How about implementing getSCMOrganisations as a GET method ?');
        return $response;
    }
    
    /**
     * GET getUser
     * Summary: 
     * Notes: Retrieve user details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getUser($request, $response, $args) {
        $organization = $args['organization'];
        $user = $args['user'];
        $response->write('How about implementing getUser as a GET method ?');
        return $response;
    }
    
    /**
     * GET getUserFavorites
     * Summary: 
     * Notes: Retrieve user favorites details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getUserFavorites($request, $response, $args) {
        $user = $args['user'];
        $response->write('How about implementing getUserFavorites as a GET method ?');
        return $response;
    }
    
    /**
     * GET getUsers
     * Summary: 
     * Notes: Retrieve users details for an organization
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function getUsers($request, $response, $args) {
        $organization = $args['organization'];
        $response->write('How about implementing getUsers as a GET method ?');
        return $response;
    }
    
    /**
     * POST postPipelineRun
     * Summary: 
     * Notes: Replay an organization pipeline run
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postPipelineRun($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $response->write('How about implementing postPipelineRun as a POST method ?');
        return $response;
    }
    
    /**
     * POST postPipelineRuns
     * Summary: 
     * Notes: Start a build for an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function postPipelineRuns($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $response->write('How about implementing postPipelineRuns as a POST method ?');
        return $response;
    }
    
    /**
     * PUT putPipelineFavorite
     * Summary: 
     * Notes: Favorite/unfavorite a pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function putPipelineFavorite($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $body = $request->getParsedBody();
        $response->write('How about implementing putPipelineFavorite as a PUT method ?');
        return $response;
    }
    
    /**
     * PUT putPipelineRun
     * Summary: 
     * Notes: Stop a build of an organization pipeline
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function putPipelineRun($request, $response, $args) {
        $organization = $args['organization'];
        $pipeline = $args['pipeline'];
        $run = $args['run'];
        $queryParams = $request->getQueryParams();
        $blocking = $request->getQueryParam('blocking');
        $timeOutInSecs = $request->getQueryParam('timeOutInSecs');
        $response->write('How about implementing putPipelineRun as a PUT method ?');
        return $response;
    }
    
    /**
     * GET search
     * Summary: 
     * Notes: Search for any resource details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function search($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $q = $request->getQueryParam('q');
        $response->write('How about implementing search as a GET method ?');
        return $response;
    }
    
    /**
     * GET searchClasses
     * Summary: 
     * Notes: Get classes details
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function searchClasses($request, $response, $args) {
        $queryParams = $request->getQueryParams();
        $q = $request->getQueryParam('q');
        $response->write('How about implementing searchClasses as a GET method ?');
        return $response;
    }
    
}
