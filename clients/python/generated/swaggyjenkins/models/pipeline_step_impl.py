# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PipelineStepImpl(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_class': 'str',
        'links': 'PipelineStepImpllinks',
        'display_name': 'str',
        'duration_in_millis': 'int',
        'id': 'str',
        'input': 'InputStepImpl',
        'result': 'str',
        'start_time': 'str',
        'state': 'str'
    }

    attribute_map = {
        '_class': '_class',
        'links': '_links',
        'display_name': 'displayName',
        'duration_in_millis': 'durationInMillis',
        'id': 'id',
        'input': 'input',
        'result': 'result',
        'start_time': 'startTime',
        'state': 'state'
    }

    def __init__(self, _class=None, links=None, display_name=None, duration_in_millis=None, id=None, input=None, result=None, start_time=None, state=None):  # noqa: E501
        """PipelineStepImpl - a model defined in OpenAPI"""  # noqa: E501

        self.__class = None
        self._links = None
        self._display_name = None
        self._duration_in_millis = None
        self._id = None
        self._input = None
        self._result = None
        self._start_time = None
        self._state = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if links is not None:
            self.links = links
        if display_name is not None:
            self.display_name = display_name
        if duration_in_millis is not None:
            self.duration_in_millis = duration_in_millis
        if id is not None:
            self.id = id
        if input is not None:
            self.input = input
        if result is not None:
            self.result = result
        if start_time is not None:
            self.start_time = start_time
        if state is not None:
            self.state = state

    @property
    def _class(self):
        """Gets the _class of this PipelineStepImpl.  # noqa: E501


        :return: The _class of this PipelineStepImpl.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this PipelineStepImpl.


        :param _class: The _class of this PipelineStepImpl.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def links(self):
        """Gets the links of this PipelineStepImpl.  # noqa: E501


        :return: The links of this PipelineStepImpl.  # noqa: E501
        :rtype: PipelineStepImpllinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PipelineStepImpl.


        :param links: The links of this PipelineStepImpl.  # noqa: E501
        :type: PipelineStepImpllinks
        """

        self._links = links

    @property
    def display_name(self):
        """Gets the display_name of this PipelineStepImpl.  # noqa: E501


        :return: The display_name of this PipelineStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PipelineStepImpl.


        :param display_name: The display_name of this PipelineStepImpl.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def duration_in_millis(self):
        """Gets the duration_in_millis of this PipelineStepImpl.  # noqa: E501


        :return: The duration_in_millis of this PipelineStepImpl.  # noqa: E501
        :rtype: int
        """
        return self._duration_in_millis

    @duration_in_millis.setter
    def duration_in_millis(self, duration_in_millis):
        """Sets the duration_in_millis of this PipelineStepImpl.


        :param duration_in_millis: The duration_in_millis of this PipelineStepImpl.  # noqa: E501
        :type: int
        """

        self._duration_in_millis = duration_in_millis

    @property
    def id(self):
        """Gets the id of this PipelineStepImpl.  # noqa: E501


        :return: The id of this PipelineStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineStepImpl.


        :param id: The id of this PipelineStepImpl.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def input(self):
        """Gets the input of this PipelineStepImpl.  # noqa: E501


        :return: The input of this PipelineStepImpl.  # noqa: E501
        :rtype: InputStepImpl
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this PipelineStepImpl.


        :param input: The input of this PipelineStepImpl.  # noqa: E501
        :type: InputStepImpl
        """

        self._input = input

    @property
    def result(self):
        """Gets the result of this PipelineStepImpl.  # noqa: E501


        :return: The result of this PipelineStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PipelineStepImpl.


        :param result: The result of this PipelineStepImpl.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this PipelineStepImpl.  # noqa: E501


        :return: The start_time of this PipelineStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PipelineStepImpl.


        :param start_time: The start_time of this PipelineStepImpl.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this PipelineStepImpl.  # noqa: E501


        :return: The state of this PipelineStepImpl.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PipelineStepImpl.


        :param state: The state of this PipelineStepImpl.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineStepImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
