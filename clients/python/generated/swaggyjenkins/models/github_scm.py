# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GithubScm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_class': 'str',
        'links': 'GithubScmlinks',
        'credential_id': 'str',
        'id': 'str',
        'uri': 'str'
    }

    attribute_map = {
        '_class': '_class',
        'links': '_links',
        'credential_id': 'credentialId',
        'id': 'id',
        'uri': 'uri'
    }

    def __init__(self, _class=None, links=None, credential_id=None, id=None, uri=None):  # noqa: E501
        """GithubScm - a model defined in OpenAPI"""  # noqa: E501

        self.__class = None
        self._links = None
        self._credential_id = None
        self._id = None
        self._uri = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if links is not None:
            self.links = links
        if credential_id is not None:
            self.credential_id = credential_id
        if id is not None:
            self.id = id
        if uri is not None:
            self.uri = uri

    @property
    def _class(self):
        """Gets the _class of this GithubScm.  # noqa: E501


        :return: The _class of this GithubScm.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this GithubScm.


        :param _class: The _class of this GithubScm.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def links(self):
        """Gets the links of this GithubScm.  # noqa: E501


        :return: The links of this GithubScm.  # noqa: E501
        :rtype: GithubScmlinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GithubScm.


        :param links: The links of this GithubScm.  # noqa: E501
        :type: GithubScmlinks
        """

        self._links = links

    @property
    def credential_id(self):
        """Gets the credential_id of this GithubScm.  # noqa: E501


        :return: The credential_id of this GithubScm.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this GithubScm.


        :param credential_id: The credential_id of this GithubScm.  # noqa: E501
        :type: str
        """

        self._credential_id = credential_id

    @property
    def id(self):
        """Gets the id of this GithubScm.  # noqa: E501


        :return: The id of this GithubScm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GithubScm.


        :param id: The id of this GithubScm.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this GithubScm.  # noqa: E501


        :return: The uri of this GithubScm.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this GithubScm.


        :param uri: The uri of this GithubScm.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubScm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
