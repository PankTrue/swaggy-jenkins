/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 1.0.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.apis

import org.openapitools.client.models.ComputerSet
import org.openapitools.client.models.DefaultCrumbIssuer
import org.openapitools.client.models.FreeStyleBuild
import org.openapitools.client.models.FreeStyleProject
import org.openapitools.client.models.Hudson
import org.openapitools.client.models.ListView
import org.openapitools.client.models.Queue

import org.openapitools.client.infrastructure.*

class RemoteAccessApi(basePath: kotlin.String = "http://localhost") : ApiClient(basePath) {

    /**
    * 
    * Retrieve computer details
    * @param depth Recursion depth in response model 
    * @return ComputerSet
    */
    @Suppress("UNCHECKED_CAST")
    fun getComputer(depth: kotlin.Int) : ComputerSet {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("depth" to listOf("$depth"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/computer/api/json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ComputerSet>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ComputerSet
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve CSRF protection token
    * @return DefaultCrumbIssuer
    */
    @Suppress("UNCHECKED_CAST")
    fun getCrumb() : DefaultCrumbIssuer {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/crumbIssuer/api/json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<DefaultCrumbIssuer>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DefaultCrumbIssuer
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve Jenkins details
    * @return Hudson
    */
    @Suppress("UNCHECKED_CAST")
    fun getJenkins() : Hudson {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Hudson>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Hudson
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve job details
    * @param name Name of the job 
    * @return FreeStyleProject
    */
    @Suppress("UNCHECKED_CAST")
    fun getJob(name: kotlin.String) : FreeStyleProject {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/job/{name}/api/json".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FreeStyleProject>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FreeStyleProject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve job configuration
    * @param name Name of the job 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun getJobConfig(name: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/job/{name}/config.xml".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve job&#39;s last build details
    * @param name Name of the job 
    * @return FreeStyleBuild
    */
    @Suppress("UNCHECKED_CAST")
    fun getJobLastBuild(name: kotlin.String) : FreeStyleBuild {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/job/{name}/lastBuild/api/json".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<FreeStyleBuild>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FreeStyleBuild
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve job&#39;s build progressive text output
    * @param name Name of the job 
    * @param number Build number 
    * @param start Starting point of progressive text output 
    * @return void
    */
    fun getJobProgressiveText(name: kotlin.String, number: kotlin.String, start: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("start" to listOf("$start"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/job/{name}/{number}/logText/progressiveText".replace("{"+"name"+"}", "$name").replace("{"+"number"+"}", "$number"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve queue details
    * @return Queue
    */
    @Suppress("UNCHECKED_CAST")
    fun getQueue() : Queue {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/queue/api/json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Queue>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Queue
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve queued item details
    * @param number Queue number 
    * @return Queue
    */
    @Suppress("UNCHECKED_CAST")
    fun getQueueItem(number: kotlin.String) : Queue {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/queue/item/{number}/api/json".replace("{"+"number"+"}", "$number"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Queue>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Queue
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve view details
    * @param name Name of the view 
    * @return ListView
    */
    @Suppress("UNCHECKED_CAST")
    fun getView(name: kotlin.String) : ListView {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/view/{name}/api/json".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ListView>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ListView
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve view configuration
    * @param name Name of the view 
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun getViewConfig(name: kotlin.String) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/view/{name}/config.xml".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Retrieve Jenkins headers
    * @return void
    */
    fun headJenkins() : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.HEAD,
            "/api/json",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Create a new job using job configuration, or copied from an existing job
    * @param name Name of the new job 
    * @param from Existing job to copy from (optional)
    * @param mode Set to &#39;copy&#39; for copying an existing job (optional)
    * @param jenkinsCrumb CSRF protection token (optional)
    * @param contentType Content type header application/xml (optional)
    * @param body Job configuration in config.xml format (optional)
    * @return void
    */
    fun postCreateItem(name: kotlin.String, from: kotlin.String, mode: kotlin.String, jenkinsCrumb: kotlin.String, contentType: kotlin.String, body: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"), "from" to listOf("$from"), "mode" to listOf("$mode"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb, "Content-Type" to contentType)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/createItem",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Create a new view using view configuration
    * @param name Name of the new view 
    * @param jenkinsCrumb CSRF protection token (optional)
    * @param contentType Content type header application/xml (optional)
    * @param body View configuration in config.xml format (optional)
    * @return void
    */
    fun postCreateView(name: kotlin.String, jenkinsCrumb: kotlin.String, contentType: kotlin.String, body: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("name" to listOf("$name"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb, "Content-Type" to contentType)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/createView",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Build a job
    * @param name Name of the job 
    * @param json  
    * @param token  (optional)
    * @param jenkinsCrumb CSRF protection token (optional)
    * @return void
    */
    fun postJobBuild(name: kotlin.String, json: kotlin.String, token: kotlin.String, jenkinsCrumb: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("json" to listOf("$json"), "token" to listOf("$token"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/job/{name}/build".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Update job configuration
    * @param name Name of the job 
    * @param body Job configuration in config.xml format 
    * @param jenkinsCrumb CSRF protection token (optional)
    * @return void
    */
    fun postJobConfig(name: kotlin.String, body: kotlin.String, jenkinsCrumb: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/job/{name}/config.xml".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Delete a job
    * @param name Name of the job 
    * @param jenkinsCrumb CSRF protection token (optional)
    * @return void
    */
    fun postJobDelete(name: kotlin.String, jenkinsCrumb: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/job/{name}/doDelete".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Disable a job
    * @param name Name of the job 
    * @param jenkinsCrumb CSRF protection token (optional)
    * @return void
    */
    fun postJobDisable(name: kotlin.String, jenkinsCrumb: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/job/{name}/disable".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Enable a job
    * @param name Name of the job 
    * @param jenkinsCrumb CSRF protection token (optional)
    * @return void
    */
    fun postJobEnable(name: kotlin.String, jenkinsCrumb: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/job/{name}/enable".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Stop a job
    * @param name Name of the job 
    * @param jenkinsCrumb CSRF protection token (optional)
    * @return void
    */
    fun postJobLastBuildStop(name: kotlin.String, jenkinsCrumb: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/job/{name}/lastBuild/stop".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Update view configuration
    * @param name Name of the view 
    * @param body View configuration in config.xml format 
    * @param jenkinsCrumb CSRF protection token (optional)
    * @return void
    */
    fun postViewConfig(name: kotlin.String, body: kotlin.String, jenkinsCrumb: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Jenkins-Crumb" to jenkinsCrumb)
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/view/{name}/config.xml".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
