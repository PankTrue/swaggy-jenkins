/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComputerSet {
  #[serde(rename = "_class")]
  _class: Option<String>,
  #[serde(rename = "busyExecutors")]
  busy_executors: Option<i32>,
  #[serde(rename = "computer")]
  computer: Option<Vec<::models::HudsonMasterComputer>>,
  #[serde(rename = "displayName")]
  display_name: Option<String>,
  #[serde(rename = "totalExecutors")]
  total_executors: Option<i32>
}

impl ComputerSet {
  pub fn new() -> ComputerSet {
    ComputerSet {
      _class: None,
      busy_executors: None,
      computer: None,
      display_name: None,
      total_executors: None
    }
  }

  pub fn set__class(&mut self, _class: String) {
    self._class = Some(_class);
  }

  pub fn with__class(mut self, _class: String) -> ComputerSet {
    self._class = Some(_class);
    self
  }

  pub fn _class(&self) -> Option<&String> {
    self._class.as_ref()
  }

  pub fn reset__class(&mut self) {
    self._class = None;
  }

  pub fn set_busy_executors(&mut self, busy_executors: i32) {
    self.busy_executors = Some(busy_executors);
  }

  pub fn with_busy_executors(mut self, busy_executors: i32) -> ComputerSet {
    self.busy_executors = Some(busy_executors);
    self
  }

  pub fn busy_executors(&self) -> Option<&i32> {
    self.busy_executors.as_ref()
  }

  pub fn reset_busy_executors(&mut self) {
    self.busy_executors = None;
  }

  pub fn set_computer(&mut self, computer: Vec<::models::HudsonMasterComputer>) {
    self.computer = Some(computer);
  }

  pub fn with_computer(mut self, computer: Vec<::models::HudsonMasterComputer>) -> ComputerSet {
    self.computer = Some(computer);
    self
  }

  pub fn computer(&self) -> Option<&Vec<::models::HudsonMasterComputer>> {
    self.computer.as_ref()
  }

  pub fn reset_computer(&mut self) {
    self.computer = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> ComputerSet {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_total_executors(&mut self, total_executors: i32) {
    self.total_executors = Some(total_executors);
  }

  pub fn with_total_executors(mut self, total_executors: i32) -> ComputerSet {
    self.total_executors = Some(total_executors);
    self
  }

  pub fn total_executors(&self) -> Option<&i32> {
    self.total_executors.as_ref()
  }

  pub fn reset_total_executors(&mut self) {
    self.total_executors = None;
  }

}



