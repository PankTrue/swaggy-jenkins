/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BranchImplpermissions {
  #[serde(rename = "create")]
  create: Option<bool>,
  #[serde(rename = "read")]
  read: Option<bool>,
  #[serde(rename = "start")]
  start: Option<bool>,
  #[serde(rename = "stop")]
  stop: Option<bool>,
  #[serde(rename = "_class")]
  _class: Option<String>
}

impl BranchImplpermissions {
  pub fn new() -> BranchImplpermissions {
    BranchImplpermissions {
      create: None,
      read: None,
      start: None,
      stop: None,
      _class: None
    }
  }

  pub fn set_create(&mut self, create: bool) {
    self.create = Some(create);
  }

  pub fn with_create(mut self, create: bool) -> BranchImplpermissions {
    self.create = Some(create);
    self
  }

  pub fn create(&self) -> Option<&bool> {
    self.create.as_ref()
  }

  pub fn reset_create(&mut self) {
    self.create = None;
  }

  pub fn set_read(&mut self, read: bool) {
    self.read = Some(read);
  }

  pub fn with_read(mut self, read: bool) -> BranchImplpermissions {
    self.read = Some(read);
    self
  }

  pub fn read(&self) -> Option<&bool> {
    self.read.as_ref()
  }

  pub fn reset_read(&mut self) {
    self.read = None;
  }

  pub fn set_start(&mut self, start: bool) {
    self.start = Some(start);
  }

  pub fn with_start(mut self, start: bool) -> BranchImplpermissions {
    self.start = Some(start);
    self
  }

  pub fn start(&self) -> Option<&bool> {
    self.start.as_ref()
  }

  pub fn reset_start(&mut self) {
    self.start = None;
  }

  pub fn set_stop(&mut self, stop: bool) {
    self.stop = Some(stop);
  }

  pub fn with_stop(mut self, stop: bool) -> BranchImplpermissions {
    self.stop = Some(stop);
    self
  }

  pub fn stop(&self) -> Option<&bool> {
    self.stop.as_ref()
  }

  pub fn reset_stop(&mut self) {
    self.stop = None;
  }

  pub fn set__class(&mut self, _class: String) {
    self._class = Some(_class);
  }

  pub fn with__class(mut self, _class: String) -> BranchImplpermissions {
    self._class = Some(_class);
    self
  }

  pub fn _class(&self) -> Option<&String> {
    self._class.as_ref()
  }

  pub fn reset__class(&mut self) {
    self._class = None;
  }

}



