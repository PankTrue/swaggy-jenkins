/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CauseUserIdCause {
  #[serde(rename = "_class")]
  _class: Option<String>,
  #[serde(rename = "shortDescription")]
  short_description: Option<String>,
  #[serde(rename = "userId")]
  user_id: Option<String>,
  #[serde(rename = "userName")]
  user_name: Option<String>
}

impl CauseUserIdCause {
  pub fn new() -> CauseUserIdCause {
    CauseUserIdCause {
      _class: None,
      short_description: None,
      user_id: None,
      user_name: None
    }
  }

  pub fn set__class(&mut self, _class: String) {
    self._class = Some(_class);
  }

  pub fn with__class(mut self, _class: String) -> CauseUserIdCause {
    self._class = Some(_class);
    self
  }

  pub fn _class(&self) -> Option<&String> {
    self._class.as_ref()
  }

  pub fn reset__class(&mut self) {
    self._class = None;
  }

  pub fn set_short_description(&mut self, short_description: String) {
    self.short_description = Some(short_description);
  }

  pub fn with_short_description(mut self, short_description: String) -> CauseUserIdCause {
    self.short_description = Some(short_description);
    self
  }

  pub fn short_description(&self) -> Option<&String> {
    self.short_description.as_ref()
  }

  pub fn reset_short_description(&mut self) {
    self.short_description = None;
  }

  pub fn set_user_id(&mut self, user_id: String) {
    self.user_id = Some(user_id);
  }

  pub fn with_user_id(mut self, user_id: String) -> CauseUserIdCause {
    self.user_id = Some(user_id);
    self
  }

  pub fn user_id(&self) -> Option<&String> {
    self.user_id.as_ref()
  }

  pub fn reset_user_id(&mut self) {
    self.user_id = None;
  }

  pub fn set_user_name(&mut self, user_name: String) {
    self.user_name = Some(user_name);
  }

  pub fn with_user_name(mut self, user_name: String) -> CauseUserIdCause {
    self.user_name = Some(user_name);
    self
  }

  pub fn user_name(&self) -> Option<&String> {
    self.user_name.as_ref()
  }

  pub fn reset_user_name(&mut self) {
    self.user_name = None;
  }

}



