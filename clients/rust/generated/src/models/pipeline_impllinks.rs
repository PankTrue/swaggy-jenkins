/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PipelineImpllinks {
  #[serde(rename = "runs")]
  runs: Option<::models::Link>,
  #[serde(rename = "self")]
  _self: Option<::models::Link>,
  #[serde(rename = "queue")]
  queue: Option<::models::Link>,
  #[serde(rename = "actions")]
  actions: Option<::models::Link>,
  #[serde(rename = "_class")]
  _class: Option<String>
}

impl PipelineImpllinks {
  pub fn new() -> PipelineImpllinks {
    PipelineImpllinks {
      runs: None,
      _self: None,
      queue: None,
      actions: None,
      _class: None
    }
  }

  pub fn set_runs(&mut self, runs: ::models::Link) {
    self.runs = Some(runs);
  }

  pub fn with_runs(mut self, runs: ::models::Link) -> PipelineImpllinks {
    self.runs = Some(runs);
    self
  }

  pub fn runs(&self) -> Option<&::models::Link> {
    self.runs.as_ref()
  }

  pub fn reset_runs(&mut self) {
    self.runs = None;
  }

  pub fn set__self(&mut self, _self: ::models::Link) {
    self._self = Some(_self);
  }

  pub fn with__self(mut self, _self: ::models::Link) -> PipelineImpllinks {
    self._self = Some(_self);
    self
  }

  pub fn _self(&self) -> Option<&::models::Link> {
    self._self.as_ref()
  }

  pub fn reset__self(&mut self) {
    self._self = None;
  }

  pub fn set_queue(&mut self, queue: ::models::Link) {
    self.queue = Some(queue);
  }

  pub fn with_queue(mut self, queue: ::models::Link) -> PipelineImpllinks {
    self.queue = Some(queue);
    self
  }

  pub fn queue(&self) -> Option<&::models::Link> {
    self.queue.as_ref()
  }

  pub fn reset_queue(&mut self) {
    self.queue = None;
  }

  pub fn set_actions(&mut self, actions: ::models::Link) {
    self.actions = Some(actions);
  }

  pub fn with_actions(mut self, actions: ::models::Link) -> PipelineImpllinks {
    self.actions = Some(actions);
    self
  }

  pub fn actions(&self) -> Option<&::models::Link> {
    self.actions.as_ref()
  }

  pub fn reset_actions(&mut self) {
    self.actions = None;
  }

  pub fn set__class(&mut self, _class: String) {
    self._class = Some(_class);
  }

  pub fn with__class(mut self, _class: String) -> PipelineImpllinks {
    self._class = Some(_class);
    self
  }

  pub fn _class(&self) -> Option<&String> {
    self._class.as_ref()
  }

  pub fn reset__class(&mut self) {
    self._class = None;
  }

}



