/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Hudson {
  #[serde(rename = "_class")]
  _class: Option<String>,
  #[serde(rename = "assignedLabels")]
  assigned_labels: Option<Vec<::models::HudsonassignedLabels>>,
  #[serde(rename = "mode")]
  mode: Option<String>,
  #[serde(rename = "nodeDescription")]
  node_description: Option<String>,
  #[serde(rename = "nodeName")]
  node_name: Option<String>,
  #[serde(rename = "numExecutors")]
  num_executors: Option<i32>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "jobs")]
  jobs: Option<Vec<::models::FreeStyleProject>>,
  #[serde(rename = "primaryView")]
  primary_view: Option<::models::AllView>,
  #[serde(rename = "quietingDown")]
  quieting_down: Option<bool>,
  #[serde(rename = "slaveAgentPort")]
  slave_agent_port: Option<i32>,
  #[serde(rename = "unlabeledLoad")]
  unlabeled_load: Option<::models::UnlabeledLoadStatistics>,
  #[serde(rename = "useCrumbs")]
  use_crumbs: Option<bool>,
  #[serde(rename = "useSecurity")]
  use_security: Option<bool>,
  #[serde(rename = "views")]
  views: Option<Vec<::models::AllView>>
}

impl Hudson {
  pub fn new() -> Hudson {
    Hudson {
      _class: None,
      assigned_labels: None,
      mode: None,
      node_description: None,
      node_name: None,
      num_executors: None,
      description: None,
      jobs: None,
      primary_view: None,
      quieting_down: None,
      slave_agent_port: None,
      unlabeled_load: None,
      use_crumbs: None,
      use_security: None,
      views: None
    }
  }

  pub fn set__class(&mut self, _class: String) {
    self._class = Some(_class);
  }

  pub fn with__class(mut self, _class: String) -> Hudson {
    self._class = Some(_class);
    self
  }

  pub fn _class(&self) -> Option<&String> {
    self._class.as_ref()
  }

  pub fn reset__class(&mut self) {
    self._class = None;
  }

  pub fn set_assigned_labels(&mut self, assigned_labels: Vec<::models::HudsonassignedLabels>) {
    self.assigned_labels = Some(assigned_labels);
  }

  pub fn with_assigned_labels(mut self, assigned_labels: Vec<::models::HudsonassignedLabels>) -> Hudson {
    self.assigned_labels = Some(assigned_labels);
    self
  }

  pub fn assigned_labels(&self) -> Option<&Vec<::models::HudsonassignedLabels>> {
    self.assigned_labels.as_ref()
  }

  pub fn reset_assigned_labels(&mut self) {
    self.assigned_labels = None;
  }

  pub fn set_mode(&mut self, mode: String) {
    self.mode = Some(mode);
  }

  pub fn with_mode(mut self, mode: String) -> Hudson {
    self.mode = Some(mode);
    self
  }

  pub fn mode(&self) -> Option<&String> {
    self.mode.as_ref()
  }

  pub fn reset_mode(&mut self) {
    self.mode = None;
  }

  pub fn set_node_description(&mut self, node_description: String) {
    self.node_description = Some(node_description);
  }

  pub fn with_node_description(mut self, node_description: String) -> Hudson {
    self.node_description = Some(node_description);
    self
  }

  pub fn node_description(&self) -> Option<&String> {
    self.node_description.as_ref()
  }

  pub fn reset_node_description(&mut self) {
    self.node_description = None;
  }

  pub fn set_node_name(&mut self, node_name: String) {
    self.node_name = Some(node_name);
  }

  pub fn with_node_name(mut self, node_name: String) -> Hudson {
    self.node_name = Some(node_name);
    self
  }

  pub fn node_name(&self) -> Option<&String> {
    self.node_name.as_ref()
  }

  pub fn reset_node_name(&mut self) {
    self.node_name = None;
  }

  pub fn set_num_executors(&mut self, num_executors: i32) {
    self.num_executors = Some(num_executors);
  }

  pub fn with_num_executors(mut self, num_executors: i32) -> Hudson {
    self.num_executors = Some(num_executors);
    self
  }

  pub fn num_executors(&self) -> Option<&i32> {
    self.num_executors.as_ref()
  }

  pub fn reset_num_executors(&mut self) {
    self.num_executors = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Hudson {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_jobs(&mut self, jobs: Vec<::models::FreeStyleProject>) {
    self.jobs = Some(jobs);
  }

  pub fn with_jobs(mut self, jobs: Vec<::models::FreeStyleProject>) -> Hudson {
    self.jobs = Some(jobs);
    self
  }

  pub fn jobs(&self) -> Option<&Vec<::models::FreeStyleProject>> {
    self.jobs.as_ref()
  }

  pub fn reset_jobs(&mut self) {
    self.jobs = None;
  }

  pub fn set_primary_view(&mut self, primary_view: ::models::AllView) {
    self.primary_view = Some(primary_view);
  }

  pub fn with_primary_view(mut self, primary_view: ::models::AllView) -> Hudson {
    self.primary_view = Some(primary_view);
    self
  }

  pub fn primary_view(&self) -> Option<&::models::AllView> {
    self.primary_view.as_ref()
  }

  pub fn reset_primary_view(&mut self) {
    self.primary_view = None;
  }

  pub fn set_quieting_down(&mut self, quieting_down: bool) {
    self.quieting_down = Some(quieting_down);
  }

  pub fn with_quieting_down(mut self, quieting_down: bool) -> Hudson {
    self.quieting_down = Some(quieting_down);
    self
  }

  pub fn quieting_down(&self) -> Option<&bool> {
    self.quieting_down.as_ref()
  }

  pub fn reset_quieting_down(&mut self) {
    self.quieting_down = None;
  }

  pub fn set_slave_agent_port(&mut self, slave_agent_port: i32) {
    self.slave_agent_port = Some(slave_agent_port);
  }

  pub fn with_slave_agent_port(mut self, slave_agent_port: i32) -> Hudson {
    self.slave_agent_port = Some(slave_agent_port);
    self
  }

  pub fn slave_agent_port(&self) -> Option<&i32> {
    self.slave_agent_port.as_ref()
  }

  pub fn reset_slave_agent_port(&mut self) {
    self.slave_agent_port = None;
  }

  pub fn set_unlabeled_load(&mut self, unlabeled_load: ::models::UnlabeledLoadStatistics) {
    self.unlabeled_load = Some(unlabeled_load);
  }

  pub fn with_unlabeled_load(mut self, unlabeled_load: ::models::UnlabeledLoadStatistics) -> Hudson {
    self.unlabeled_load = Some(unlabeled_load);
    self
  }

  pub fn unlabeled_load(&self) -> Option<&::models::UnlabeledLoadStatistics> {
    self.unlabeled_load.as_ref()
  }

  pub fn reset_unlabeled_load(&mut self) {
    self.unlabeled_load = None;
  }

  pub fn set_use_crumbs(&mut self, use_crumbs: bool) {
    self.use_crumbs = Some(use_crumbs);
  }

  pub fn with_use_crumbs(mut self, use_crumbs: bool) -> Hudson {
    self.use_crumbs = Some(use_crumbs);
    self
  }

  pub fn use_crumbs(&self) -> Option<&bool> {
    self.use_crumbs.as_ref()
  }

  pub fn reset_use_crumbs(&mut self) {
    self.use_crumbs = None;
  }

  pub fn set_use_security(&mut self, use_security: bool) {
    self.use_security = Some(use_security);
  }

  pub fn with_use_security(mut self, use_security: bool) -> Hudson {
    self.use_security = Some(use_security);
    self
  }

  pub fn use_security(&self) -> Option<&bool> {
    self.use_security.as_ref()
  }

  pub fn reset_use_security(&mut self) {
    self.use_security = None;
  }

  pub fn set_views(&mut self, views: Vec<::models::AllView>) {
    self.views = Some(views);
  }

  pub fn with_views(mut self, views: Vec<::models::AllView>) -> Hudson {
    self.views = Some(views);
    self
  }

  pub fn views(&self) -> Option<&Vec<::models::AllView>> {
    self.views.as_ref()
  }

  pub fn reset_views(&mut self) {
    self.views = None;
  }

}



