/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct HudsonMasterComputermonitorData {
  #[serde(rename = "hudson.node_monitors.SwapSpaceMonitor")]
  hudson_node_monitors_swap_space_monitor: Option<::models::SwapSpaceMonitorMemoryUsage2>,
  #[serde(rename = "hudson.node_monitors.TemporarySpaceMonitor")]
  hudson_node_monitors_temporary_space_monitor: Option<::models::DiskSpaceMonitorDescriptorDiskSpace>,
  #[serde(rename = "hudson.node_monitors.DiskSpaceMonitor")]
  hudson_node_monitors_disk_space_monitor: Option<::models::DiskSpaceMonitorDescriptorDiskSpace>,
  #[serde(rename = "hudson.node_monitors.ArchitectureMonitor")]
  hudson_node_monitors_architecture_monitor: Option<String>,
  #[serde(rename = "hudson.node_monitors.ResponseTimeMonitor")]
  hudson_node_monitors_response_time_monitor: Option<::models::ResponseTimeMonitorData>,
  #[serde(rename = "hudson.node_monitors.ClockMonitor")]
  hudson_node_monitors_clock_monitor: Option<::models::ClockDifference>,
  #[serde(rename = "_class")]
  _class: Option<String>
}

impl HudsonMasterComputermonitorData {
  pub fn new() -> HudsonMasterComputermonitorData {
    HudsonMasterComputermonitorData {
      hudson_node_monitors_swap_space_monitor: None,
      hudson_node_monitors_temporary_space_monitor: None,
      hudson_node_monitors_disk_space_monitor: None,
      hudson_node_monitors_architecture_monitor: None,
      hudson_node_monitors_response_time_monitor: None,
      hudson_node_monitors_clock_monitor: None,
      _class: None
    }
  }

  pub fn set_hudson_node_monitors_swap_space_monitor(&mut self, hudson_node_monitors_swap_space_monitor: ::models::SwapSpaceMonitorMemoryUsage2) {
    self.hudson_node_monitors_swap_space_monitor = Some(hudson_node_monitors_swap_space_monitor);
  }

  pub fn with_hudson_node_monitors_swap_space_monitor(mut self, hudson_node_monitors_swap_space_monitor: ::models::SwapSpaceMonitorMemoryUsage2) -> HudsonMasterComputermonitorData {
    self.hudson_node_monitors_swap_space_monitor = Some(hudson_node_monitors_swap_space_monitor);
    self
  }

  pub fn hudson_node_monitors_swap_space_monitor(&self) -> Option<&::models::SwapSpaceMonitorMemoryUsage2> {
    self.hudson_node_monitors_swap_space_monitor.as_ref()
  }

  pub fn reset_hudson_node_monitors_swap_space_monitor(&mut self) {
    self.hudson_node_monitors_swap_space_monitor = None;
  }

  pub fn set_hudson_node_monitors_temporary_space_monitor(&mut self, hudson_node_monitors_temporary_space_monitor: ::models::DiskSpaceMonitorDescriptorDiskSpace) {
    self.hudson_node_monitors_temporary_space_monitor = Some(hudson_node_monitors_temporary_space_monitor);
  }

  pub fn with_hudson_node_monitors_temporary_space_monitor(mut self, hudson_node_monitors_temporary_space_monitor: ::models::DiskSpaceMonitorDescriptorDiskSpace) -> HudsonMasterComputermonitorData {
    self.hudson_node_monitors_temporary_space_monitor = Some(hudson_node_monitors_temporary_space_monitor);
    self
  }

  pub fn hudson_node_monitors_temporary_space_monitor(&self) -> Option<&::models::DiskSpaceMonitorDescriptorDiskSpace> {
    self.hudson_node_monitors_temporary_space_monitor.as_ref()
  }

  pub fn reset_hudson_node_monitors_temporary_space_monitor(&mut self) {
    self.hudson_node_monitors_temporary_space_monitor = None;
  }

  pub fn set_hudson_node_monitors_disk_space_monitor(&mut self, hudson_node_monitors_disk_space_monitor: ::models::DiskSpaceMonitorDescriptorDiskSpace) {
    self.hudson_node_monitors_disk_space_monitor = Some(hudson_node_monitors_disk_space_monitor);
  }

  pub fn with_hudson_node_monitors_disk_space_monitor(mut self, hudson_node_monitors_disk_space_monitor: ::models::DiskSpaceMonitorDescriptorDiskSpace) -> HudsonMasterComputermonitorData {
    self.hudson_node_monitors_disk_space_monitor = Some(hudson_node_monitors_disk_space_monitor);
    self
  }

  pub fn hudson_node_monitors_disk_space_monitor(&self) -> Option<&::models::DiskSpaceMonitorDescriptorDiskSpace> {
    self.hudson_node_monitors_disk_space_monitor.as_ref()
  }

  pub fn reset_hudson_node_monitors_disk_space_monitor(&mut self) {
    self.hudson_node_monitors_disk_space_monitor = None;
  }

  pub fn set_hudson_node_monitors_architecture_monitor(&mut self, hudson_node_monitors_architecture_monitor: String) {
    self.hudson_node_monitors_architecture_monitor = Some(hudson_node_monitors_architecture_monitor);
  }

  pub fn with_hudson_node_monitors_architecture_monitor(mut self, hudson_node_monitors_architecture_monitor: String) -> HudsonMasterComputermonitorData {
    self.hudson_node_monitors_architecture_monitor = Some(hudson_node_monitors_architecture_monitor);
    self
  }

  pub fn hudson_node_monitors_architecture_monitor(&self) -> Option<&String> {
    self.hudson_node_monitors_architecture_monitor.as_ref()
  }

  pub fn reset_hudson_node_monitors_architecture_monitor(&mut self) {
    self.hudson_node_monitors_architecture_monitor = None;
  }

  pub fn set_hudson_node_monitors_response_time_monitor(&mut self, hudson_node_monitors_response_time_monitor: ::models::ResponseTimeMonitorData) {
    self.hudson_node_monitors_response_time_monitor = Some(hudson_node_monitors_response_time_monitor);
  }

  pub fn with_hudson_node_monitors_response_time_monitor(mut self, hudson_node_monitors_response_time_monitor: ::models::ResponseTimeMonitorData) -> HudsonMasterComputermonitorData {
    self.hudson_node_monitors_response_time_monitor = Some(hudson_node_monitors_response_time_monitor);
    self
  }

  pub fn hudson_node_monitors_response_time_monitor(&self) -> Option<&::models::ResponseTimeMonitorData> {
    self.hudson_node_monitors_response_time_monitor.as_ref()
  }

  pub fn reset_hudson_node_monitors_response_time_monitor(&mut self) {
    self.hudson_node_monitors_response_time_monitor = None;
  }

  pub fn set_hudson_node_monitors_clock_monitor(&mut self, hudson_node_monitors_clock_monitor: ::models::ClockDifference) {
    self.hudson_node_monitors_clock_monitor = Some(hudson_node_monitors_clock_monitor);
  }

  pub fn with_hudson_node_monitors_clock_monitor(mut self, hudson_node_monitors_clock_monitor: ::models::ClockDifference) -> HudsonMasterComputermonitorData {
    self.hudson_node_monitors_clock_monitor = Some(hudson_node_monitors_clock_monitor);
    self
  }

  pub fn hudson_node_monitors_clock_monitor(&self) -> Option<&::models::ClockDifference> {
    self.hudson_node_monitors_clock_monitor.as_ref()
  }

  pub fn reset_hudson_node_monitors_clock_monitor(&mut self) {
    self.hudson_node_monitors_clock_monitor = None;
  }

  pub fn set__class(&mut self, _class: String) {
    self._class = Some(_class);
  }

  pub fn with__class(mut self, _class: String) -> HudsonMasterComputermonitorData {
    self._class = Some(_class);
    self
  }

  pub fn _class(&self) -> Option<&String> {
    self._class.as_ref()
  }

  pub fn reset__class(&mut self) {
    self._class = None;
  }

}



