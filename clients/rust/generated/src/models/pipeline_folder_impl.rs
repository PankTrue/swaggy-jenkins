/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PipelineFolderImpl {
  #[serde(rename = "_class")]
  _class: Option<String>,
  #[serde(rename = "displayName")]
  display_name: Option<String>,
  #[serde(rename = "fullName")]
  full_name: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "organization")]
  organization: Option<String>,
  #[serde(rename = "numberOfFolders")]
  number_of_folders: Option<i32>,
  #[serde(rename = "numberOfPipelines")]
  number_of_pipelines: Option<i32>
}

impl PipelineFolderImpl {
  pub fn new() -> PipelineFolderImpl {
    PipelineFolderImpl {
      _class: None,
      display_name: None,
      full_name: None,
      name: None,
      organization: None,
      number_of_folders: None,
      number_of_pipelines: None
    }
  }

  pub fn set__class(&mut self, _class: String) {
    self._class = Some(_class);
  }

  pub fn with__class(mut self, _class: String) -> PipelineFolderImpl {
    self._class = Some(_class);
    self
  }

  pub fn _class(&self) -> Option<&String> {
    self._class.as_ref()
  }

  pub fn reset__class(&mut self) {
    self._class = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> PipelineFolderImpl {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> PipelineFolderImpl {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PipelineFolderImpl {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_organization(&mut self, organization: String) {
    self.organization = Some(organization);
  }

  pub fn with_organization(mut self, organization: String) -> PipelineFolderImpl {
    self.organization = Some(organization);
    self
  }

  pub fn organization(&self) -> Option<&String> {
    self.organization.as_ref()
  }

  pub fn reset_organization(&mut self) {
    self.organization = None;
  }

  pub fn set_number_of_folders(&mut self, number_of_folders: i32) {
    self.number_of_folders = Some(number_of_folders);
  }

  pub fn with_number_of_folders(mut self, number_of_folders: i32) -> PipelineFolderImpl {
    self.number_of_folders = Some(number_of_folders);
    self
  }

  pub fn number_of_folders(&self) -> Option<&i32> {
    self.number_of_folders.as_ref()
  }

  pub fn reset_number_of_folders(&mut self) {
    self.number_of_folders = None;
  }

  pub fn set_number_of_pipelines(&mut self, number_of_pipelines: i32) {
    self.number_of_pipelines = Some(number_of_pipelines);
  }

  pub fn with_number_of_pipelines(mut self, number_of_pipelines: i32) -> PipelineFolderImpl {
    self.number_of_pipelines = Some(number_of_pipelines);
    self
  }

  pub fn number_of_pipelines(&self) -> Option<&i32> {
    self.number_of_pipelines.as_ref()
  }

  pub fn reset_number_of_pipelines(&mut self) {
    self.number_of_pipelines = None;
  }

}



