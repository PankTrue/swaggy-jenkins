/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PipelineImpl {
  #[serde(rename = "_class")]
  _class: Option<String>,
  #[serde(rename = "displayName")]
  display_name: Option<String>,
  #[serde(rename = "estimatedDurationInMillis")]
  estimated_duration_in_millis: Option<i32>,
  #[serde(rename = "fullName")]
  full_name: Option<String>,
  #[serde(rename = "latestRun")]
  latest_run: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "organization")]
  organization: Option<String>,
  #[serde(rename = "weatherScore")]
  weather_score: Option<i32>,
  #[serde(rename = "_links")]
  _links: Option<::models::PipelineImpllinks>
}

impl PipelineImpl {
  pub fn new() -> PipelineImpl {
    PipelineImpl {
      _class: None,
      display_name: None,
      estimated_duration_in_millis: None,
      full_name: None,
      latest_run: None,
      name: None,
      organization: None,
      weather_score: None,
      _links: None
    }
  }

  pub fn set__class(&mut self, _class: String) {
    self._class = Some(_class);
  }

  pub fn with__class(mut self, _class: String) -> PipelineImpl {
    self._class = Some(_class);
    self
  }

  pub fn _class(&self) -> Option<&String> {
    self._class.as_ref()
  }

  pub fn reset__class(&mut self) {
    self._class = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> PipelineImpl {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_estimated_duration_in_millis(&mut self, estimated_duration_in_millis: i32) {
    self.estimated_duration_in_millis = Some(estimated_duration_in_millis);
  }

  pub fn with_estimated_duration_in_millis(mut self, estimated_duration_in_millis: i32) -> PipelineImpl {
    self.estimated_duration_in_millis = Some(estimated_duration_in_millis);
    self
  }

  pub fn estimated_duration_in_millis(&self) -> Option<&i32> {
    self.estimated_duration_in_millis.as_ref()
  }

  pub fn reset_estimated_duration_in_millis(&mut self) {
    self.estimated_duration_in_millis = None;
  }

  pub fn set_full_name(&mut self, full_name: String) {
    self.full_name = Some(full_name);
  }

  pub fn with_full_name(mut self, full_name: String) -> PipelineImpl {
    self.full_name = Some(full_name);
    self
  }

  pub fn full_name(&self) -> Option<&String> {
    self.full_name.as_ref()
  }

  pub fn reset_full_name(&mut self) {
    self.full_name = None;
  }

  pub fn set_latest_run(&mut self, latest_run: String) {
    self.latest_run = Some(latest_run);
  }

  pub fn with_latest_run(mut self, latest_run: String) -> PipelineImpl {
    self.latest_run = Some(latest_run);
    self
  }

  pub fn latest_run(&self) -> Option<&String> {
    self.latest_run.as_ref()
  }

  pub fn reset_latest_run(&mut self) {
    self.latest_run = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PipelineImpl {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_organization(&mut self, organization: String) {
    self.organization = Some(organization);
  }

  pub fn with_organization(mut self, organization: String) -> PipelineImpl {
    self.organization = Some(organization);
    self
  }

  pub fn organization(&self) -> Option<&String> {
    self.organization.as_ref()
  }

  pub fn reset_organization(&mut self) {
    self.organization = None;
  }

  pub fn set_weather_score(&mut self, weather_score: i32) {
    self.weather_score = Some(weather_score);
  }

  pub fn with_weather_score(mut self, weather_score: i32) -> PipelineImpl {
    self.weather_score = Some(weather_score);
    self
  }

  pub fn weather_score(&self) -> Option<&i32> {
    self.weather_score.as_ref()
  }

  pub fn reset_weather_score(&mut self) {
    self.weather_score = None;
  }

  pub fn set__links(&mut self, _links: ::models::PipelineImpllinks) {
    self._links = Some(_links);
  }

  pub fn with__links(mut self, _links: ::models::PipelineImpllinks) -> PipelineImpl {
    self._links = Some(_links);
    self
  }

  pub fn _links(&self) -> Option<&::models::PipelineImpllinks> {
    self._links.as_ref()
  }

  pub fn reset__links(&mut self) {
    self._links = None;
  }

}



