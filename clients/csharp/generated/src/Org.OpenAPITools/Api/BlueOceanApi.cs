/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlueOceanApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete queue item from an organization pipeline queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <returns></returns>
        void DeletePipelineQueueItem (string organization, string pipeline, string queue);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete queue item from an organization pipeline queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePipelineQueueItemWithHttpInfo (string organization, string pipeline, string queue);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>User</returns>
        User GetAuthenticatedUser (string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetAuthenticatedUserWithHttpInfo (string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>string</returns>
        string GetClasses (string _class);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetClassesWithHttpInfo (string _class);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Key
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <returns>string</returns>
        string GetJsonWebKey (int? key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Key
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetJsonWebKeyWithHttpInfo (int? key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <returns>string</returns>
        string GetJsonWebToken (int? expiryTimeInMins = null, int? maxExpiryTimeInMins = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetJsonWebTokenWithHttpInfo (int? expiryTimeInMins = null, int? maxExpiryTimeInMins = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organization details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Organisation</returns>
        Organisation GetOrganisation (string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organization details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>ApiResponse of Organisation</returns>
        ApiResponse<Organisation> GetOrganisationWithHttpInfo (string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Organisations</returns>
        Organisations GetOrganisations ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Organisations</returns>
        ApiResponse<Organisations> GetOrganisationsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Pipeline</returns>
        Pipeline GetPipeline (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of Pipeline</returns>
        ApiResponse<Pipeline> GetPipelineWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all activities details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>PipelineActivities</returns>
        PipelineActivities GetPipelineActivities (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all activities details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of PipelineActivities</returns>
        ApiResponse<PipelineActivities> GetPipelineActivitiesWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>BranchImpl</returns>
        BranchImpl GetPipelineBranch (string organization, string pipeline, string branch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>ApiResponse of BranchImpl</returns>
        ApiResponse<BranchImpl> GetPipelineBranchWithHttpInfo (string organization, string pipeline, string branch);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch run details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <returns>PipelineRun</returns>
        PipelineRun GetPipelineBranchRun (string organization, string pipeline, string branch, string run);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch run details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <returns>ApiResponse of PipelineRun</returns>
        ApiResponse<PipelineRun> GetPipelineBranchRunWithHttpInfo (string organization, string pipeline, string branch, string run);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>MultibranchPipeline</returns>
        MultibranchPipeline GetPipelineBranches (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of MultibranchPipeline</returns>
        ApiResponse<MultibranchPipeline> GetPipelineBranchesWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>PipelineFolderImpl</returns>
        PipelineFolderImpl GetPipelineFolder (string organization, string folder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>ApiResponse of PipelineFolderImpl</returns>
        ApiResponse<PipelineFolderImpl> GetPipelineFolderWithHttpInfo (string organization, string folder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization folder
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>PipelineImpl</returns>
        PipelineImpl GetPipelineFolderPipeline (string organization, string pipeline, string folder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization folder
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>ApiResponse of PipelineImpl</returns>
        ApiResponse<PipelineImpl> GetPipelineFolderPipelineWithHttpInfo (string organization, string pipeline, string folder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve queue details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>PipelineQueue</returns>
        PipelineQueue GetPipelineQueue (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve queue details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of PipelineQueue</returns>
        ApiResponse<PipelineQueue> GetPipelineQueueWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>PipelineRun</returns>
        PipelineRun GetPipelineRun (string organization, string pipeline, string run);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>ApiResponse of PipelineRun</returns>
        ApiResponse<PipelineRun> GetPipelineRunWithHttpInfo (string organization, string pipeline, string run);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <returns>string</returns>
        string GetPipelineRunLog (string organization, string pipeline, string run, int? start = null, bool? download = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPipelineRunLogWithHttpInfo (string organization, string pipeline, string run, int? start = null, bool? download = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>PipelineRunNode</returns>
        PipelineRunNode GetPipelineRunNode (string organization, string pipeline, string run, string node);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>ApiResponse of PipelineRunNode</returns>
        ApiResponse<PipelineRunNode> GetPipelineRunNodeWithHttpInfo (string organization, string pipeline, string run, string node);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>PipelineStepImpl</returns>
        PipelineStepImpl GetPipelineRunNodeStep (string organization, string pipeline, string run, string node, string step);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>ApiResponse of PipelineStepImpl</returns>
        ApiResponse<PipelineStepImpl> GetPipelineRunNodeStepWithHttpInfo (string organization, string pipeline, string run, string node, string step);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run node step
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>string</returns>
        string GetPipelineRunNodeStepLog (string organization, string pipeline, string run, string node, string step);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run node step
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetPipelineRunNodeStepLogWithHttpInfo (string organization, string pipeline, string run, string node, string step);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node steps details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>PipelineRunNodeSteps</returns>
        PipelineRunNodeSteps GetPipelineRunNodeSteps (string organization, string pipeline, string run, string node);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node steps details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>ApiResponse of PipelineRunNodeSteps</returns>
        ApiResponse<PipelineRunNodeSteps> GetPipelineRunNodeStepsWithHttpInfo (string organization, string pipeline, string run, string node);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run nodes details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>PipelineRunNodes</returns>
        PipelineRunNodes GetPipelineRunNodes (string organization, string pipeline, string run);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run nodes details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>ApiResponse of PipelineRunNodes</returns>
        ApiResponse<PipelineRunNodes> GetPipelineRunNodesWithHttpInfo (string organization, string pipeline, string run);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all runs details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>PipelineRuns</returns>
        PipelineRuns GetPipelineRuns (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all runs details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of PipelineRuns</returns>
        ApiResponse<PipelineRuns> GetPipelineRunsWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Pipelines</returns>
        Pipelines GetPipelines (string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>ApiResponse of Pipelines</returns>
        ApiResponse<Pipelines> GetPipelinesWithHttpInfo (string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <returns>GithubScm</returns>
        GithubScm GetSCM (string organization, string scm);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <returns>ApiResponse of GithubScm</returns>
        ApiResponse<GithubScm> GetSCMWithHttpInfo (string organization, string scm);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repositories details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <returns>ScmOrganisations</returns>
        ScmOrganisations GetSCMOrganisationRepositories (string organization, string scm, string scmOrganisation, string credentialId = null, int? pageSize = null, int? pageNumber = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repositories details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <returns>ApiResponse of ScmOrganisations</returns>
        ApiResponse<ScmOrganisations> GetSCMOrganisationRepositoriesWithHttpInfo (string organization, string scm, string scmOrganisation, string credentialId = null, int? pageSize = null, int? pageNumber = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repository details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>ScmOrganisations</returns>
        ScmOrganisations GetSCMOrganisationRepository (string organization, string scm, string scmOrganisation, string repository, string credentialId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repository details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>ApiResponse of ScmOrganisations</returns>
        ApiResponse<ScmOrganisations> GetSCMOrganisationRepositoryWithHttpInfo (string organization, string scm, string scmOrganisation, string repository, string credentialId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organizations details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>ScmOrganisations</returns>
        ScmOrganisations GetSCMOrganisations (string organization, string scm, string credentialId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organizations details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>ApiResponse of ScmOrganisations</returns>
        ApiResponse<ScmOrganisations> GetSCMOrganisationsWithHttpInfo (string organization, string scm, string credentialId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <returns>User</returns>
        User GetUser (string organization, string user);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (string organization, string user);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user favorites details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <returns>UserFavorites</returns>
        UserFavorites GetUserFavorites (string user);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user favorites details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <returns>ApiResponse of UserFavorites</returns>
        ApiResponse<UserFavorites> GetUserFavoritesWithHttpInfo (string user);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>User</returns>
        User GetUsers (string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUsersWithHttpInfo (string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replay an organization pipeline run
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>QueueItemImpl</returns>
        QueueItemImpl PostPipelineRun (string organization, string pipeline, string run);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replay an organization pipeline run
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>ApiResponse of QueueItemImpl</returns>
        ApiResponse<QueueItemImpl> PostPipelineRunWithHttpInfo (string organization, string pipeline, string run);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a build for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>QueueItemImpl</returns>
        QueueItemImpl PostPipelineRuns (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a build for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of QueueItemImpl</returns>
        ApiResponse<QueueItemImpl> PostPipelineRunsWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Favorite/unfavorite a pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <returns>FavoriteImpl</returns>
        FavoriteImpl PutPipelineFavorite (string organization, string pipeline, Body body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Favorite/unfavorite a pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <returns>ApiResponse of FavoriteImpl</returns>
        ApiResponse<FavoriteImpl> PutPipelineFavoriteWithHttpInfo (string organization, string pipeline, Body body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a build of an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <returns>PipelineRun</returns>
        PipelineRun PutPipelineRun (string organization, string pipeline, string run, string blocking = null, int? timeOutInSecs = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a build of an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <returns>ApiResponse of PipelineRun</returns>
        ApiResponse<PipelineRun> PutPipelineRunWithHttpInfo (string organization, string pipeline, string run, string blocking = null, int? timeOutInSecs = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>string</returns>
        string Search (string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchWithHttpInfo (string q);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>string</returns>
        string SearchClasses (string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchClassesWithHttpInfo (string q);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete queue item from an organization pipeline queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePipelineQueueItemAsync (string organization, string pipeline, string queue);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete queue item from an organization pipeline queue
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePipelineQueueItemAsyncWithHttpInfo (string organization, string pipeline, string queue);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetAuthenticatedUserAsync (string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetAuthenticatedUserAsyncWithHttpInfo (string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetClassesAsync (string _class);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetClassesAsyncWithHttpInfo (string _class);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Key
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetJsonWebKeyAsync (int? key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Key
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetJsonWebKeyAsyncWithHttpInfo (int? key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetJsonWebTokenAsync (int? expiryTimeInMins = null, int? maxExpiryTimeInMins = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetJsonWebTokenAsyncWithHttpInfo (int? expiryTimeInMins = null, int? maxExpiryTimeInMins = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organization details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of Organisation</returns>
        System.Threading.Tasks.Task<Organisation> GetOrganisationAsync (string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organization details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisation>> GetOrganisationAsyncWithHttpInfo (string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Organisations</returns>
        System.Threading.Tasks.Task<Organisations> GetOrganisationsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Organisations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisations>> GetOrganisationsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of Pipeline</returns>
        System.Threading.Tasks.Task<Pipeline> GetPipelineAsync (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipeline>> GetPipelineAsyncWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all activities details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of PipelineActivities</returns>
        System.Threading.Tasks.Task<PipelineActivities> GetPipelineActivitiesAsync (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all activities details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (PipelineActivities)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineActivities>> GetPipelineActivitiesAsyncWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>Task of BranchImpl</returns>
        System.Threading.Tasks.Task<BranchImpl> GetPipelineBranchAsync (string organization, string pipeline, string branch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>Task of ApiResponse (BranchImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<BranchImpl>> GetPipelineBranchAsyncWithHttpInfo (string organization, string pipeline, string branch);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch run details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of PipelineRun</returns>
        System.Threading.Tasks.Task<PipelineRun> GetPipelineBranchRunAsync (string organization, string pipeline, string branch, string run);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch run details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of ApiResponse (PipelineRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineRun>> GetPipelineBranchRunAsyncWithHttpInfo (string organization, string pipeline, string branch, string run);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of MultibranchPipeline</returns>
        System.Threading.Tasks.Task<MultibranchPipeline> GetPipelineBranchesAsync (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (MultibranchPipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultibranchPipeline>> GetPipelineBranchesAsyncWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of PipelineFolderImpl</returns>
        System.Threading.Tasks.Task<PipelineFolderImpl> GetPipelineFolderAsync (string organization, string folder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of ApiResponse (PipelineFolderImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineFolderImpl>> GetPipelineFolderAsyncWithHttpInfo (string organization, string folder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization folder
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of PipelineImpl</returns>
        System.Threading.Tasks.Task<PipelineImpl> GetPipelineFolderPipelineAsync (string organization, string pipeline, string folder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization folder
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of ApiResponse (PipelineImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineImpl>> GetPipelineFolderPipelineAsyncWithHttpInfo (string organization, string pipeline, string folder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve queue details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of PipelineQueue</returns>
        System.Threading.Tasks.Task<PipelineQueue> GetPipelineQueueAsync (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve queue details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (PipelineQueue)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineQueue>> GetPipelineQueueAsyncWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of PipelineRun</returns>
        System.Threading.Tasks.Task<PipelineRun> GetPipelineRunAsync (string organization, string pipeline, string run);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of ApiResponse (PipelineRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineRun>> GetPipelineRunAsyncWithHttpInfo (string organization, string pipeline, string run);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPipelineRunLogAsync (string organization, string pipeline, string run, int? start = null, bool? download = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPipelineRunLogAsyncWithHttpInfo (string organization, string pipeline, string run, int? start = null, bool? download = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>Task of PipelineRunNode</returns>
        System.Threading.Tasks.Task<PipelineRunNode> GetPipelineRunNodeAsync (string organization, string pipeline, string run, string node);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>Task of ApiResponse (PipelineRunNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineRunNode>> GetPipelineRunNodeAsyncWithHttpInfo (string organization, string pipeline, string run, string node);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>Task of PipelineStepImpl</returns>
        System.Threading.Tasks.Task<PipelineStepImpl> GetPipelineRunNodeStepAsync (string organization, string pipeline, string run, string node, string step);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>Task of ApiResponse (PipelineStepImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineStepImpl>> GetPipelineRunNodeStepAsyncWithHttpInfo (string organization, string pipeline, string run, string node, string step);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run node step
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetPipelineRunNodeStepLogAsync (string organization, string pipeline, string run, string node, string step);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run node step
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetPipelineRunNodeStepLogAsyncWithHttpInfo (string organization, string pipeline, string run, string node, string step);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node steps details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>Task of PipelineRunNodeSteps</returns>
        System.Threading.Tasks.Task<PipelineRunNodeSteps> GetPipelineRunNodeStepsAsync (string organization, string pipeline, string run, string node);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node steps details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>Task of ApiResponse (PipelineRunNodeSteps)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineRunNodeSteps>> GetPipelineRunNodeStepsAsyncWithHttpInfo (string organization, string pipeline, string run, string node);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run nodes details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of PipelineRunNodes</returns>
        System.Threading.Tasks.Task<PipelineRunNodes> GetPipelineRunNodesAsync (string organization, string pipeline, string run);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run nodes details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of ApiResponse (PipelineRunNodes)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineRunNodes>> GetPipelineRunNodesAsyncWithHttpInfo (string organization, string pipeline, string run);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all runs details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of PipelineRuns</returns>
        System.Threading.Tasks.Task<PipelineRuns> GetPipelineRunsAsync (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all runs details for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (PipelineRuns)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineRuns>> GetPipelineRunsAsyncWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of Pipelines</returns>
        System.Threading.Tasks.Task<Pipelines> GetPipelinesAsync (string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of ApiResponse (Pipelines)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipelines>> GetPipelinesAsyncWithHttpInfo (string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <returns>Task of GithubScm</returns>
        System.Threading.Tasks.Task<GithubScm> GetSCMAsync (string organization, string scm);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <returns>Task of ApiResponse (GithubScm)</returns>
        System.Threading.Tasks.Task<ApiResponse<GithubScm>> GetSCMAsyncWithHttpInfo (string organization, string scm);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repositories details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <returns>Task of ScmOrganisations</returns>
        System.Threading.Tasks.Task<ScmOrganisations> GetSCMOrganisationRepositoriesAsync (string organization, string scm, string scmOrganisation, string credentialId = null, int? pageSize = null, int? pageNumber = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repositories details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <returns>Task of ApiResponse (ScmOrganisations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScmOrganisations>> GetSCMOrganisationRepositoriesAsyncWithHttpInfo (string organization, string scm, string scmOrganisation, string credentialId = null, int? pageSize = null, int? pageNumber = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repository details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>Task of ScmOrganisations</returns>
        System.Threading.Tasks.Task<ScmOrganisations> GetSCMOrganisationRepositoryAsync (string organization, string scm, string scmOrganisation, string repository, string credentialId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repository details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>Task of ApiResponse (ScmOrganisations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScmOrganisations>> GetSCMOrganisationRepositoryAsyncWithHttpInfo (string organization, string scm, string scmOrganisation, string repository, string credentialId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organizations details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>Task of ScmOrganisations</returns>
        System.Threading.Tasks.Task<ScmOrganisations> GetSCMOrganisationsAsync (string organization, string scm, string credentialId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organizations details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>Task of ApiResponse (ScmOrganisations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScmOrganisations>> GetSCMOrganisationsAsyncWithHttpInfo (string organization, string scm, string credentialId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (string organization, string user);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (string organization, string user);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user favorites details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of UserFavorites</returns>
        System.Threading.Tasks.Task<UserFavorites> GetUserFavoritesAsync (string user);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user favorites details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of ApiResponse (UserFavorites)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserFavorites>> GetUserFavoritesAsyncWithHttpInfo (string user);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUsersAsync (string organization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organization
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUsersAsyncWithHttpInfo (string organization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replay an organization pipeline run
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of QueueItemImpl</returns>
        System.Threading.Tasks.Task<QueueItemImpl> PostPipelineRunAsync (string organization, string pipeline, string run);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replay an organization pipeline run
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of ApiResponse (QueueItemImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueItemImpl>> PostPipelineRunAsyncWithHttpInfo (string organization, string pipeline, string run);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a build for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of QueueItemImpl</returns>
        System.Threading.Tasks.Task<QueueItemImpl> PostPipelineRunsAsync (string organization, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a build for an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (QueueItemImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueueItemImpl>> PostPipelineRunsAsyncWithHttpInfo (string organization, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Favorite/unfavorite a pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <returns>Task of FavoriteImpl</returns>
        System.Threading.Tasks.Task<FavoriteImpl> PutPipelineFavoriteAsync (string organization, string pipeline, Body body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Favorite/unfavorite a pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <returns>Task of ApiResponse (FavoriteImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<FavoriteImpl>> PutPipelineFavoriteAsyncWithHttpInfo (string organization, string pipeline, Body body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a build of an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <returns>Task of PipelineRun</returns>
        System.Threading.Tasks.Task<PipelineRun> PutPipelineRunAsync (string organization, string pipeline, string run, string blocking = null, int? timeOutInSecs = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a build of an organization pipeline
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <returns>Task of ApiResponse (PipelineRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineRun>> PutPipelineRunAsyncWithHttpInfo (string organization, string pipeline, string run, string blocking = null, int? timeOutInSecs = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchAsync (string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchAsyncWithHttpInfo (string q);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchClassesAsync (string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchClassesAsyncWithHttpInfo (string q);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlueOceanApi : IBlueOceanApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlueOceanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlueOceanApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlueOceanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlueOceanApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Delete queue item from an organization pipeline queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <returns></returns>
        public void DeletePipelineQueueItem (string organization, string pipeline, string queue)
        {
             DeletePipelineQueueItemWithHttpInfo(organization, pipeline, queue);
        }

        /// <summary>
        ///  Delete queue item from an organization pipeline queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePipelineQueueItemWithHttpInfo (string organization, string pipeline, string queue)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->DeletePipelineQueueItem");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->DeletePipelineQueueItem");
            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new ApiException(400, "Missing required parameter 'queue' when calling BlueOceanApi->DeletePipelineQueueItem");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (queue != null) localVarPathParams.Add("queue", this.Configuration.ApiClient.ParameterToString(queue)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePipelineQueueItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Delete queue item from an organization pipeline queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePipelineQueueItemAsync (string organization, string pipeline, string queue)
        {
             await DeletePipelineQueueItemAsyncWithHttpInfo(organization, pipeline, queue);

        }

        /// <summary>
        ///  Delete queue item from an organization pipeline queue
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePipelineQueueItemAsyncWithHttpInfo (string organization, string pipeline, string queue)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->DeletePipelineQueueItem");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->DeletePipelineQueueItem");
            // verify the required parameter 'queue' is set
            if (queue == null)
                throw new ApiException(400, "Missing required parameter 'queue' when calling BlueOceanApi->DeletePipelineQueueItem");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (queue != null) localVarPathParams.Add("queue", this.Configuration.ApiClient.ParameterToString(queue)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePipelineQueueItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Retrieve authenticated user details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>User</returns>
        public User GetAuthenticatedUser (string organization)
        {
             ApiResponse<User> localVarResponse = GetAuthenticatedUserWithHttpInfo(organization);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve authenticated user details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetAuthenticatedUserWithHttpInfo (string organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetAuthenticatedUser");

            var localVarPath = "/blue/rest/organizations/{organization}/user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthenticatedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieve authenticated user details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetAuthenticatedUserAsync (string organization)
        {
             ApiResponse<User> localVarResponse = await GetAuthenticatedUserAsyncWithHttpInfo(organization);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve authenticated user details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetAuthenticatedUserAsyncWithHttpInfo (string organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetAuthenticatedUser");

            var localVarPath = "/blue/rest/organizations/{organization}/user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthenticatedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>string</returns>
        public string GetClasses (string _class)
        {
             ApiResponse<string> localVarResponse = GetClassesWithHttpInfo(_class);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetClassesWithHttpInfo (string _class)
        {
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling BlueOceanApi->GetClasses");

            var localVarPath = "/blue/rest/classes/{class}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_class != null) localVarPathParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetClassesAsync (string _class)
        {
             ApiResponse<string> localVarResponse = await GetClassesAsyncWithHttpInfo(_class);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetClassesAsyncWithHttpInfo (string _class)
        {
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling BlueOceanApi->GetClasses");

            var localVarPath = "/blue/rest/classes/{class}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_class != null) localVarPathParams.Add("class", this.Configuration.ApiClient.ParameterToString(_class)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve JSON Web Key
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <returns>string</returns>
        public string GetJsonWebKey (int? key)
        {
             ApiResponse<string> localVarResponse = GetJsonWebKeyWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve JSON Web Key
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetJsonWebKeyWithHttpInfo (int? key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling BlueOceanApi->GetJsonWebKey");

            var localVarPath = "/jwt-auth/jwks/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJsonWebKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve JSON Web Key
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetJsonWebKeyAsync (int? key)
        {
             ApiResponse<string> localVarResponse = await GetJsonWebKeyAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve JSON Web Key
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetJsonWebKeyAsyncWithHttpInfo (int? key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling BlueOceanApi->GetJsonWebKey");

            var localVarPath = "/jwt-auth/jwks/{key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (key != null) localVarPathParams.Add("key", this.Configuration.ApiClient.ParameterToString(key)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJsonWebKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve JSON Web Token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <returns>string</returns>
        public string GetJsonWebToken (int? expiryTimeInMins = null, int? maxExpiryTimeInMins = null)
        {
             ApiResponse<string> localVarResponse = GetJsonWebTokenWithHttpInfo(expiryTimeInMins, maxExpiryTimeInMins);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve JSON Web Token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetJsonWebTokenWithHttpInfo (int? expiryTimeInMins = null, int? maxExpiryTimeInMins = null)
        {

            var localVarPath = "/jwt-auth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expiryTimeInMins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiryTimeInMins", expiryTimeInMins)); // query parameter
            if (maxExpiryTimeInMins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxExpiryTimeInMins", maxExpiryTimeInMins)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJsonWebToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve JSON Web Token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetJsonWebTokenAsync (int? expiryTimeInMins = null, int? maxExpiryTimeInMins = null)
        {
             ApiResponse<string> localVarResponse = await GetJsonWebTokenAsyncWithHttpInfo(expiryTimeInMins, maxExpiryTimeInMins);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve JSON Web Token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetJsonWebTokenAsyncWithHttpInfo (int? expiryTimeInMins = null, int? maxExpiryTimeInMins = null)
        {

            var localVarPath = "/jwt-auth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expiryTimeInMins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiryTimeInMins", expiryTimeInMins)); // query parameter
            if (maxExpiryTimeInMins != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxExpiryTimeInMins", maxExpiryTimeInMins)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJsonWebToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve organization details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Organisation</returns>
        public Organisation GetOrganisation (string organization)
        {
             ApiResponse<Organisation> localVarResponse = GetOrganisationWithHttpInfo(organization);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve organization details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>ApiResponse of Organisation</returns>
        public ApiResponse< Organisation > GetOrganisationWithHttpInfo (string organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetOrganisation");

            var localVarPath = "/blue/rest/organizations/{organization}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganisation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
        }

        /// <summary>
        ///  Retrieve organization details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of Organisation</returns>
        public async System.Threading.Tasks.Task<Organisation> GetOrganisationAsync (string organization)
        {
             ApiResponse<Organisation> localVarResponse = await GetOrganisationAsyncWithHttpInfo(organization);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve organization details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organisation>> GetOrganisationAsyncWithHttpInfo (string organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetOrganisation");

            var localVarPath = "/blue/rest/organizations/{organization}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganisation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
        }

        /// <summary>
        ///  Retrieve all organizations details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Organisations</returns>
        public Organisations GetOrganisations ()
        {
             ApiResponse<Organisations> localVarResponse = GetOrganisationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all organizations details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Organisations</returns>
        public ApiResponse< Organisations > GetOrganisationsWithHttpInfo ()
        {

            var localVarPath = "/blue/rest/organizations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganisations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisations)));
        }

        /// <summary>
        ///  Retrieve all organizations details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Organisations</returns>
        public async System.Threading.Tasks.Task<Organisations> GetOrganisationsAsync ()
        {
             ApiResponse<Organisations> localVarResponse = await GetOrganisationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all organizations details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Organisations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organisations>> GetOrganisationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/blue/rest/organizations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganisations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisations)));
        }

        /// <summary>
        ///  Retrieve pipeline details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Pipeline</returns>
        public Pipeline GetPipeline (string organization, string pipeline)
        {
             ApiResponse<Pipeline> localVarResponse = GetPipelineWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve pipeline details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of Pipeline</returns>
        public ApiResponse< Pipeline > GetPipelineWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipeline");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipeline");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipeline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pipeline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pipeline) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pipeline)));
        }

        /// <summary>
        ///  Retrieve pipeline details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of Pipeline</returns>
        public async System.Threading.Tasks.Task<Pipeline> GetPipelineAsync (string organization, string pipeline)
        {
             ApiResponse<Pipeline> localVarResponse = await GetPipelineAsyncWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve pipeline details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Pipeline>> GetPipelineAsyncWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipeline");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipeline");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipeline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pipeline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pipeline) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pipeline)));
        }

        /// <summary>
        ///  Retrieve all activities details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>PipelineActivities</returns>
        public PipelineActivities GetPipelineActivities (string organization, string pipeline)
        {
             ApiResponse<PipelineActivities> localVarResponse = GetPipelineActivitiesWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all activities details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of PipelineActivities</returns>
        public ApiResponse< PipelineActivities > GetPipelineActivitiesWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineActivities");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineActivities");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineActivities>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineActivities) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineActivities)));
        }

        /// <summary>
        ///  Retrieve all activities details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of PipelineActivities</returns>
        public async System.Threading.Tasks.Task<PipelineActivities> GetPipelineActivitiesAsync (string organization, string pipeline)
        {
             ApiResponse<PipelineActivities> localVarResponse = await GetPipelineActivitiesAsyncWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all activities details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (PipelineActivities)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineActivities>> GetPipelineActivitiesAsyncWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineActivities");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineActivities");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineActivities>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineActivities) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineActivities)));
        }

        /// <summary>
        ///  Retrieve branch details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>BranchImpl</returns>
        public BranchImpl GetPipelineBranch (string organization, string pipeline, string branch)
        {
             ApiResponse<BranchImpl> localVarResponse = GetPipelineBranchWithHttpInfo(organization, pipeline, branch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve branch details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>ApiResponse of BranchImpl</returns>
        public ApiResponse< BranchImpl > GetPipelineBranchWithHttpInfo (string organization, string pipeline, string branch)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineBranch");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranch");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling BlueOceanApi->GetPipelineBranch");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BranchImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchImpl)));
        }

        /// <summary>
        ///  Retrieve branch details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>Task of BranchImpl</returns>
        public async System.Threading.Tasks.Task<BranchImpl> GetPipelineBranchAsync (string organization, string pipeline, string branch)
        {
             ApiResponse<BranchImpl> localVarResponse = await GetPipelineBranchAsyncWithHttpInfo(organization, pipeline, branch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve branch details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>Task of ApiResponse (BranchImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BranchImpl>> GetPipelineBranchAsyncWithHttpInfo (string organization, string pipeline, string branch)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineBranch");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranch");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling BlueOceanApi->GetPipelineBranch");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BranchImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BranchImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BranchImpl)));
        }

        /// <summary>
        ///  Retrieve branch run details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <returns>PipelineRun</returns>
        public PipelineRun GetPipelineBranchRun (string organization, string pipeline, string branch, string run)
        {
             ApiResponse<PipelineRun> localVarResponse = GetPipelineBranchRunWithHttpInfo(organization, pipeline, branch, run);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve branch run details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <returns>ApiResponse of PipelineRun</returns>
        public ApiResponse< PipelineRun > GetPipelineBranchRunWithHttpInfo (string organization, string pipeline, string branch, string run)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineBranchRun");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranchRun");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling BlueOceanApi->GetPipelineBranchRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineBranchRun");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranchRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRun)));
        }

        /// <summary>
        ///  Retrieve branch run details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of PipelineRun</returns>
        public async System.Threading.Tasks.Task<PipelineRun> GetPipelineBranchRunAsync (string organization, string pipeline, string branch, string run)
        {
             ApiResponse<PipelineRun> localVarResponse = await GetPipelineBranchRunAsyncWithHttpInfo(organization, pipeline, branch, run);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve branch run details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of ApiResponse (PipelineRun)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineRun>> GetPipelineBranchRunAsyncWithHttpInfo (string organization, string pipeline, string branch, string run)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineBranchRun");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranchRun");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling BlueOceanApi->GetPipelineBranchRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineBranchRun");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", this.Configuration.ApiClient.ParameterToString(branch)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranchRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRun)));
        }

        /// <summary>
        ///  Retrieve all branches details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>MultibranchPipeline</returns>
        public MultibranchPipeline GetPipelineBranches (string organization, string pipeline)
        {
             ApiResponse<MultibranchPipeline> localVarResponse = GetPipelineBranchesWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all branches details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of MultibranchPipeline</returns>
        public ApiResponse< MultibranchPipeline > GetPipelineBranchesWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineBranches");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranches");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultibranchPipeline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultibranchPipeline) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultibranchPipeline)));
        }

        /// <summary>
        ///  Retrieve all branches details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of MultibranchPipeline</returns>
        public async System.Threading.Tasks.Task<MultibranchPipeline> GetPipelineBranchesAsync (string organization, string pipeline)
        {
             ApiResponse<MultibranchPipeline> localVarResponse = await GetPipelineBranchesAsyncWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all branches details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (MultibranchPipeline)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultibranchPipeline>> GetPipelineBranchesAsyncWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineBranches");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranches");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranches", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultibranchPipeline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultibranchPipeline) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultibranchPipeline)));
        }

        /// <summary>
        ///  Retrieve pipeline folder for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>PipelineFolderImpl</returns>
        public PipelineFolderImpl GetPipelineFolder (string organization, string folder)
        {
             ApiResponse<PipelineFolderImpl> localVarResponse = GetPipelineFolderWithHttpInfo(organization, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve pipeline folder for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>ApiResponse of PipelineFolderImpl</returns>
        public ApiResponse< PipelineFolderImpl > GetPipelineFolderWithHttpInfo (string organization, string folder)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineFolder");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling BlueOceanApi->GetPipelineFolder");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{folder}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (folder != null) localVarPathParams.Add("folder", this.Configuration.ApiClient.ParameterToString(folder)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineFolderImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineFolderImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineFolderImpl)));
        }

        /// <summary>
        ///  Retrieve pipeline folder for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of PipelineFolderImpl</returns>
        public async System.Threading.Tasks.Task<PipelineFolderImpl> GetPipelineFolderAsync (string organization, string folder)
        {
             ApiResponse<PipelineFolderImpl> localVarResponse = await GetPipelineFolderAsyncWithHttpInfo(organization, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve pipeline folder for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of ApiResponse (PipelineFolderImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineFolderImpl>> GetPipelineFolderAsyncWithHttpInfo (string organization, string folder)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineFolder");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling BlueOceanApi->GetPipelineFolder");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{folder}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (folder != null) localVarPathParams.Add("folder", this.Configuration.ApiClient.ParameterToString(folder)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineFolderImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineFolderImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineFolderImpl)));
        }

        /// <summary>
        ///  Retrieve pipeline details for an organization folder
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>PipelineImpl</returns>
        public PipelineImpl GetPipelineFolderPipeline (string organization, string pipeline, string folder)
        {
             ApiResponse<PipelineImpl> localVarResponse = GetPipelineFolderPipelineWithHttpInfo(organization, pipeline, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve pipeline details for an organization folder
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>ApiResponse of PipelineImpl</returns>
        public ApiResponse< PipelineImpl > GetPipelineFolderPipelineWithHttpInfo (string organization, string pipeline, string folder)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineFolderPipeline");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineFolderPipeline");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling BlueOceanApi->GetPipelineFolderPipeline");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (folder != null) localVarPathParams.Add("folder", this.Configuration.ApiClient.ParameterToString(folder)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineFolderPipeline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineImpl)));
        }

        /// <summary>
        ///  Retrieve pipeline details for an organization folder
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of PipelineImpl</returns>
        public async System.Threading.Tasks.Task<PipelineImpl> GetPipelineFolderPipelineAsync (string organization, string pipeline, string folder)
        {
             ApiResponse<PipelineImpl> localVarResponse = await GetPipelineFolderPipelineAsyncWithHttpInfo(organization, pipeline, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve pipeline details for an organization folder
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of ApiResponse (PipelineImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineImpl>> GetPipelineFolderPipelineAsyncWithHttpInfo (string organization, string pipeline, string folder)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineFolderPipeline");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineFolderPipeline");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling BlueOceanApi->GetPipelineFolderPipeline");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (folder != null) localVarPathParams.Add("folder", this.Configuration.ApiClient.ParameterToString(folder)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineFolderPipeline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineImpl)));
        }

        /// <summary>
        ///  Retrieve queue details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>PipelineQueue</returns>
        public PipelineQueue GetPipelineQueue (string organization, string pipeline)
        {
             ApiResponse<PipelineQueue> localVarResponse = GetPipelineQueueWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve queue details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of PipelineQueue</returns>
        public ApiResponse< PipelineQueue > GetPipelineQueueWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineQueue");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineQueue");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineQueue)));
        }

        /// <summary>
        ///  Retrieve queue details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of PipelineQueue</returns>
        public async System.Threading.Tasks.Task<PipelineQueue> GetPipelineQueueAsync (string organization, string pipeline)
        {
             ApiResponse<PipelineQueue> localVarResponse = await GetPipelineQueueAsyncWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve queue details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (PipelineQueue)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineQueue>> GetPipelineQueueAsyncWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineQueue");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineQueue");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineQueue>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineQueue) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineQueue)));
        }

        /// <summary>
        ///  Retrieve run details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>PipelineRun</returns>
        public PipelineRun GetPipelineRun (string organization, string pipeline, string run)
        {
             ApiResponse<PipelineRun> localVarResponse = GetPipelineRunWithHttpInfo(organization, pipeline, run);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve run details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>ApiResponse of PipelineRun</returns>
        public ApiResponse< PipelineRun > GetPipelineRunWithHttpInfo (string organization, string pipeline, string run)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRun");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRun");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRun)));
        }

        /// <summary>
        ///  Retrieve run details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of PipelineRun</returns>
        public async System.Threading.Tasks.Task<PipelineRun> GetPipelineRunAsync (string organization, string pipeline, string run)
        {
             ApiResponse<PipelineRun> localVarResponse = await GetPipelineRunAsyncWithHttpInfo(organization, pipeline, run);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve run details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of ApiResponse (PipelineRun)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineRun>> GetPipelineRunAsyncWithHttpInfo (string organization, string pipeline, string run)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRun");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRun");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRun)));
        }

        /// <summary>
        ///  Get log for a pipeline run
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <returns>string</returns>
        public string GetPipelineRunLog (string organization, string pipeline, string run, int? start = null, bool? download = null)
        {
             ApiResponse<string> localVarResponse = GetPipelineRunLogWithHttpInfo(organization, pipeline, run, start, download);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get log for a pipeline run
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetPipelineRunLogWithHttpInfo (string organization, string pipeline, string run, int? start = null, bool? download = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunLog");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunLog");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunLog");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (download != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "download", download)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get log for a pipeline run
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPipelineRunLogAsync (string organization, string pipeline, string run, int? start = null, bool? download = null)
        {
             ApiResponse<string> localVarResponse = await GetPipelineRunLogAsyncWithHttpInfo(organization, pipeline, run, start, download);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get log for a pipeline run
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetPipelineRunLogAsyncWithHttpInfo (string organization, string pipeline, string run, int? start = null, bool? download = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunLog");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunLog");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunLog");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (download != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "download", download)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>PipelineRunNode</returns>
        public PipelineRunNode GetPipelineRunNode (string organization, string pipeline, string run, string node)
        {
             ApiResponse<PipelineRunNode> localVarResponse = GetPipelineRunNodeWithHttpInfo(organization, pipeline, run, node);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>ApiResponse of PipelineRunNode</returns>
        public ApiResponse< PipelineRunNode > GetPipelineRunNodeWithHttpInfo (string organization, string pipeline, string run, string node)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNode");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNode");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNode");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling BlueOceanApi->GetPipelineRunNode");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (node != null) localVarPathParams.Add("node", this.Configuration.ApiClient.ParameterToString(node)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRunNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRunNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRunNode)));
        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>Task of PipelineRunNode</returns>
        public async System.Threading.Tasks.Task<PipelineRunNode> GetPipelineRunNodeAsync (string organization, string pipeline, string run, string node)
        {
             ApiResponse<PipelineRunNode> localVarResponse = await GetPipelineRunNodeAsyncWithHttpInfo(organization, pipeline, run, node);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>Task of ApiResponse (PipelineRunNode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineRunNode>> GetPipelineRunNodeAsyncWithHttpInfo (string organization, string pipeline, string run, string node)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNode");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNode");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNode");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling BlueOceanApi->GetPipelineRunNode");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (node != null) localVarPathParams.Add("node", this.Configuration.ApiClient.ParameterToString(node)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRunNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRunNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRunNode)));
        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>PipelineStepImpl</returns>
        public PipelineStepImpl GetPipelineRunNodeStep (string organization, string pipeline, string run, string node, string step)
        {
             ApiResponse<PipelineStepImpl> localVarResponse = GetPipelineRunNodeStepWithHttpInfo(organization, pipeline, run, node, step);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>ApiResponse of PipelineStepImpl</returns>
        public ApiResponse< PipelineStepImpl > GetPipelineRunNodeStepWithHttpInfo (string organization, string pipeline, string run, string node, string step)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNodeStep");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNodeStep");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNodeStep");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling BlueOceanApi->GetPipelineRunNodeStep");
            // verify the required parameter 'step' is set
            if (step == null)
                throw new ApiException(400, "Missing required parameter 'step' when calling BlueOceanApi->GetPipelineRunNodeStep");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (node != null) localVarPathParams.Add("node", this.Configuration.ApiClient.ParameterToString(node)); // path parameter
            if (step != null) localVarPathParams.Add("step", this.Configuration.ApiClient.ParameterToString(step)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNodeStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineStepImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineStepImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineStepImpl)));
        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>Task of PipelineStepImpl</returns>
        public async System.Threading.Tasks.Task<PipelineStepImpl> GetPipelineRunNodeStepAsync (string organization, string pipeline, string run, string node, string step)
        {
             ApiResponse<PipelineStepImpl> localVarResponse = await GetPipelineRunNodeStepAsyncWithHttpInfo(organization, pipeline, run, node, step);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>Task of ApiResponse (PipelineStepImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineStepImpl>> GetPipelineRunNodeStepAsyncWithHttpInfo (string organization, string pipeline, string run, string node, string step)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNodeStep");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNodeStep");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNodeStep");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling BlueOceanApi->GetPipelineRunNodeStep");
            // verify the required parameter 'step' is set
            if (step == null)
                throw new ApiException(400, "Missing required parameter 'step' when calling BlueOceanApi->GetPipelineRunNodeStep");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (node != null) localVarPathParams.Add("node", this.Configuration.ApiClient.ParameterToString(node)); // path parameter
            if (step != null) localVarPathParams.Add("step", this.Configuration.ApiClient.ParameterToString(step)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNodeStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineStepImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineStepImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineStepImpl)));
        }

        /// <summary>
        ///  Get log for a pipeline run node step
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>string</returns>
        public string GetPipelineRunNodeStepLog (string organization, string pipeline, string run, string node, string step)
        {
             ApiResponse<string> localVarResponse = GetPipelineRunNodeStepLogWithHttpInfo(organization, pipeline, run, node, step);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get log for a pipeline run node step
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetPipelineRunNodeStepLogWithHttpInfo (string organization, string pipeline, string run, string node, string step)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNodeStepLog");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNodeStepLog");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNodeStepLog");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling BlueOceanApi->GetPipelineRunNodeStepLog");
            // verify the required parameter 'step' is set
            if (step == null)
                throw new ApiException(400, "Missing required parameter 'step' when calling BlueOceanApi->GetPipelineRunNodeStepLog");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (node != null) localVarPathParams.Add("node", this.Configuration.ApiClient.ParameterToString(node)); // path parameter
            if (step != null) localVarPathParams.Add("step", this.Configuration.ApiClient.ParameterToString(step)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNodeStepLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get log for a pipeline run node step
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetPipelineRunNodeStepLogAsync (string organization, string pipeline, string run, string node, string step)
        {
             ApiResponse<string> localVarResponse = await GetPipelineRunNodeStepLogAsyncWithHttpInfo(organization, pipeline, run, node, step);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get log for a pipeline run node step
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetPipelineRunNodeStepLogAsyncWithHttpInfo (string organization, string pipeline, string run, string node, string step)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNodeStepLog");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNodeStepLog");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNodeStepLog");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling BlueOceanApi->GetPipelineRunNodeStepLog");
            // verify the required parameter 'step' is set
            if (step == null)
                throw new ApiException(400, "Missing required parameter 'step' when calling BlueOceanApi->GetPipelineRunNodeStepLog");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (node != null) localVarPathParams.Add("node", this.Configuration.ApiClient.ParameterToString(node)); // path parameter
            if (step != null) localVarPathParams.Add("step", this.Configuration.ApiClient.ParameterToString(step)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNodeStepLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve run node steps details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>PipelineRunNodeSteps</returns>
        public PipelineRunNodeSteps GetPipelineRunNodeSteps (string organization, string pipeline, string run, string node)
        {
             ApiResponse<PipelineRunNodeSteps> localVarResponse = GetPipelineRunNodeStepsWithHttpInfo(organization, pipeline, run, node);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve run node steps details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>ApiResponse of PipelineRunNodeSteps</returns>
        public ApiResponse< PipelineRunNodeSteps > GetPipelineRunNodeStepsWithHttpInfo (string organization, string pipeline, string run, string node)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNodeSteps");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNodeSteps");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNodeSteps");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling BlueOceanApi->GetPipelineRunNodeSteps");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (node != null) localVarPathParams.Add("node", this.Configuration.ApiClient.ParameterToString(node)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNodeSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRunNodeSteps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRunNodeSteps) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRunNodeSteps)));
        }

        /// <summary>
        ///  Retrieve run node steps details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>Task of PipelineRunNodeSteps</returns>
        public async System.Threading.Tasks.Task<PipelineRunNodeSteps> GetPipelineRunNodeStepsAsync (string organization, string pipeline, string run, string node)
        {
             ApiResponse<PipelineRunNodeSteps> localVarResponse = await GetPipelineRunNodeStepsAsyncWithHttpInfo(organization, pipeline, run, node);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve run node steps details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <returns>Task of ApiResponse (PipelineRunNodeSteps)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineRunNodeSteps>> GetPipelineRunNodeStepsAsyncWithHttpInfo (string organization, string pipeline, string run, string node)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNodeSteps");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNodeSteps");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNodeSteps");
            // verify the required parameter 'node' is set
            if (node == null)
                throw new ApiException(400, "Missing required parameter 'node' when calling BlueOceanApi->GetPipelineRunNodeSteps");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (node != null) localVarPathParams.Add("node", this.Configuration.ApiClient.ParameterToString(node)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNodeSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRunNodeSteps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRunNodeSteps) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRunNodeSteps)));
        }

        /// <summary>
        ///  Retrieve run nodes details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>PipelineRunNodes</returns>
        public PipelineRunNodes GetPipelineRunNodes (string organization, string pipeline, string run)
        {
             ApiResponse<PipelineRunNodes> localVarResponse = GetPipelineRunNodesWithHttpInfo(organization, pipeline, run);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve run nodes details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>ApiResponse of PipelineRunNodes</returns>
        public ApiResponse< PipelineRunNodes > GetPipelineRunNodesWithHttpInfo (string organization, string pipeline, string run)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNodes");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNodes");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNodes");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRunNodes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRunNodes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRunNodes)));
        }

        /// <summary>
        ///  Retrieve run nodes details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of PipelineRunNodes</returns>
        public async System.Threading.Tasks.Task<PipelineRunNodes> GetPipelineRunNodesAsync (string organization, string pipeline, string run)
        {
             ApiResponse<PipelineRunNodes> localVarResponse = await GetPipelineRunNodesAsyncWithHttpInfo(organization, pipeline, run);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve run nodes details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of ApiResponse (PipelineRunNodes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineRunNodes>> GetPipelineRunNodesAsyncWithHttpInfo (string organization, string pipeline, string run)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRunNodes");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRunNodes");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->GetPipelineRunNodes");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRunNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRunNodes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRunNodes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRunNodes)));
        }

        /// <summary>
        ///  Retrieve all runs details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>PipelineRuns</returns>
        public PipelineRuns GetPipelineRuns (string organization, string pipeline)
        {
             ApiResponse<PipelineRuns> localVarResponse = GetPipelineRunsWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all runs details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of PipelineRuns</returns>
        public ApiResponse< PipelineRuns > GetPipelineRunsWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRuns");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRuns");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRuns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRuns) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRuns)));
        }

        /// <summary>
        ///  Retrieve all runs details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of PipelineRuns</returns>
        public async System.Threading.Tasks.Task<PipelineRuns> GetPipelineRunsAsync (string organization, string pipeline)
        {
             ApiResponse<PipelineRuns> localVarResponse = await GetPipelineRunsAsyncWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all runs details for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (PipelineRuns)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineRuns>> GetPipelineRunsAsyncWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelineRuns");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineRuns");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRuns>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRuns) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRuns)));
        }

        /// <summary>
        ///  Retrieve all pipelines details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Pipelines</returns>
        public Pipelines GetPipelines (string organization)
        {
             ApiResponse<Pipelines> localVarResponse = GetPipelinesWithHttpInfo(organization);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all pipelines details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>ApiResponse of Pipelines</returns>
        public ApiResponse< Pipelines > GetPipelinesWithHttpInfo (string organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelines");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pipelines>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pipelines) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pipelines)));
        }

        /// <summary>
        ///  Retrieve all pipelines details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of Pipelines</returns>
        public async System.Threading.Tasks.Task<Pipelines> GetPipelinesAsync (string organization)
        {
             ApiResponse<Pipelines> localVarResponse = await GetPipelinesAsyncWithHttpInfo(organization);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all pipelines details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of ApiResponse (Pipelines)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Pipelines>> GetPipelinesAsyncWithHttpInfo (string organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetPipelines");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pipelines>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pipelines) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pipelines)));
        }

        /// <summary>
        ///  Retrieve SCM details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <returns>GithubScm</returns>
        public GithubScm GetSCM (string organization, string scm)
        {
             ApiResponse<GithubScm> localVarResponse = GetSCMWithHttpInfo(organization, scm);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve SCM details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <returns>ApiResponse of GithubScm</returns>
        public ApiResponse< GithubScm > GetSCMWithHttpInfo (string organization, string scm)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetSCM");
            // verify the required parameter 'scm' is set
            if (scm == null)
                throw new ApiException(400, "Missing required parameter 'scm' when calling BlueOceanApi->GetSCM");

            var localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (scm != null) localVarPathParams.Add("scm", this.Configuration.ApiClient.ParameterToString(scm)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSCM", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GithubScm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GithubScm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GithubScm)));
        }

        /// <summary>
        ///  Retrieve SCM details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <returns>Task of GithubScm</returns>
        public async System.Threading.Tasks.Task<GithubScm> GetSCMAsync (string organization, string scm)
        {
             ApiResponse<GithubScm> localVarResponse = await GetSCMAsyncWithHttpInfo(organization, scm);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve SCM details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <returns>Task of ApiResponse (GithubScm)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GithubScm>> GetSCMAsyncWithHttpInfo (string organization, string scm)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetSCM");
            // verify the required parameter 'scm' is set
            if (scm == null)
                throw new ApiException(400, "Missing required parameter 'scm' when calling BlueOceanApi->GetSCM");

            var localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (scm != null) localVarPathParams.Add("scm", this.Configuration.ApiClient.ParameterToString(scm)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSCM", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GithubScm>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GithubScm) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GithubScm)));
        }

        /// <summary>
        ///  Retrieve SCM organization repositories details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <returns>ScmOrganisations</returns>
        public ScmOrganisations GetSCMOrganisationRepositories (string organization, string scm, string scmOrganisation, string credentialId = null, int? pageSize = null, int? pageNumber = null)
        {
             ApiResponse<ScmOrganisations> localVarResponse = GetSCMOrganisationRepositoriesWithHttpInfo(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve SCM organization repositories details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <returns>ApiResponse of ScmOrganisations</returns>
        public ApiResponse< ScmOrganisations > GetSCMOrganisationRepositoriesWithHttpInfo (string organization, string scm, string scmOrganisation, string credentialId = null, int? pageSize = null, int? pageNumber = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetSCMOrganisationRepositories");
            // verify the required parameter 'scm' is set
            if (scm == null)
                throw new ApiException(400, "Missing required parameter 'scm' when calling BlueOceanApi->GetSCMOrganisationRepositories");
            // verify the required parameter 'scmOrganisation' is set
            if (scmOrganisation == null)
                throw new ApiException(400, "Missing required parameter 'scmOrganisation' when calling BlueOceanApi->GetSCMOrganisationRepositories");

            var localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (scm != null) localVarPathParams.Add("scm", this.Configuration.ApiClient.ParameterToString(scm)); // path parameter
            if (scmOrganisation != null) localVarPathParams.Add("scmOrganisation", this.Configuration.ApiClient.ParameterToString(scmOrganisation)); // path parameter
            if (credentialId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "credentialId", credentialId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSCMOrganisationRepositories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScmOrganisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScmOrganisations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScmOrganisations)));
        }

        /// <summary>
        ///  Retrieve SCM organization repositories details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <returns>Task of ScmOrganisations</returns>
        public async System.Threading.Tasks.Task<ScmOrganisations> GetSCMOrganisationRepositoriesAsync (string organization, string scm, string scmOrganisation, string credentialId = null, int? pageSize = null, int? pageNumber = null)
        {
             ApiResponse<ScmOrganisations> localVarResponse = await GetSCMOrganisationRepositoriesAsyncWithHttpInfo(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve SCM organization repositories details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <returns>Task of ApiResponse (ScmOrganisations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScmOrganisations>> GetSCMOrganisationRepositoriesAsyncWithHttpInfo (string organization, string scm, string scmOrganisation, string credentialId = null, int? pageSize = null, int? pageNumber = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetSCMOrganisationRepositories");
            // verify the required parameter 'scm' is set
            if (scm == null)
                throw new ApiException(400, "Missing required parameter 'scm' when calling BlueOceanApi->GetSCMOrganisationRepositories");
            // verify the required parameter 'scmOrganisation' is set
            if (scmOrganisation == null)
                throw new ApiException(400, "Missing required parameter 'scmOrganisation' when calling BlueOceanApi->GetSCMOrganisationRepositories");

            var localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (scm != null) localVarPathParams.Add("scm", this.Configuration.ApiClient.ParameterToString(scm)); // path parameter
            if (scmOrganisation != null) localVarPathParams.Add("scmOrganisation", this.Configuration.ApiClient.ParameterToString(scmOrganisation)); // path parameter
            if (credentialId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "credentialId", credentialId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSCMOrganisationRepositories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScmOrganisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScmOrganisations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScmOrganisations)));
        }

        /// <summary>
        ///  Retrieve SCM organization repository details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>ScmOrganisations</returns>
        public ScmOrganisations GetSCMOrganisationRepository (string organization, string scm, string scmOrganisation, string repository, string credentialId = null)
        {
             ApiResponse<ScmOrganisations> localVarResponse = GetSCMOrganisationRepositoryWithHttpInfo(organization, scm, scmOrganisation, repository, credentialId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve SCM organization repository details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>ApiResponse of ScmOrganisations</returns>
        public ApiResponse< ScmOrganisations > GetSCMOrganisationRepositoryWithHttpInfo (string organization, string scm, string scmOrganisation, string repository, string credentialId = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetSCMOrganisationRepository");
            // verify the required parameter 'scm' is set
            if (scm == null)
                throw new ApiException(400, "Missing required parameter 'scm' when calling BlueOceanApi->GetSCMOrganisationRepository");
            // verify the required parameter 'scmOrganisation' is set
            if (scmOrganisation == null)
                throw new ApiException(400, "Missing required parameter 'scmOrganisation' when calling BlueOceanApi->GetSCMOrganisationRepository");
            // verify the required parameter 'repository' is set
            if (repository == null)
                throw new ApiException(400, "Missing required parameter 'repository' when calling BlueOceanApi->GetSCMOrganisationRepository");

            var localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (scm != null) localVarPathParams.Add("scm", this.Configuration.ApiClient.ParameterToString(scm)); // path parameter
            if (scmOrganisation != null) localVarPathParams.Add("scmOrganisation", this.Configuration.ApiClient.ParameterToString(scmOrganisation)); // path parameter
            if (repository != null) localVarPathParams.Add("repository", this.Configuration.ApiClient.ParameterToString(repository)); // path parameter
            if (credentialId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "credentialId", credentialId)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSCMOrganisationRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScmOrganisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScmOrganisations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScmOrganisations)));
        }

        /// <summary>
        ///  Retrieve SCM organization repository details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>Task of ScmOrganisations</returns>
        public async System.Threading.Tasks.Task<ScmOrganisations> GetSCMOrganisationRepositoryAsync (string organization, string scm, string scmOrganisation, string repository, string credentialId = null)
        {
             ApiResponse<ScmOrganisations> localVarResponse = await GetSCMOrganisationRepositoryAsyncWithHttpInfo(organization, scm, scmOrganisation, repository, credentialId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve SCM organization repository details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>Task of ApiResponse (ScmOrganisations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScmOrganisations>> GetSCMOrganisationRepositoryAsyncWithHttpInfo (string organization, string scm, string scmOrganisation, string repository, string credentialId = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetSCMOrganisationRepository");
            // verify the required parameter 'scm' is set
            if (scm == null)
                throw new ApiException(400, "Missing required parameter 'scm' when calling BlueOceanApi->GetSCMOrganisationRepository");
            // verify the required parameter 'scmOrganisation' is set
            if (scmOrganisation == null)
                throw new ApiException(400, "Missing required parameter 'scmOrganisation' when calling BlueOceanApi->GetSCMOrganisationRepository");
            // verify the required parameter 'repository' is set
            if (repository == null)
                throw new ApiException(400, "Missing required parameter 'repository' when calling BlueOceanApi->GetSCMOrganisationRepository");

            var localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (scm != null) localVarPathParams.Add("scm", this.Configuration.ApiClient.ParameterToString(scm)); // path parameter
            if (scmOrganisation != null) localVarPathParams.Add("scmOrganisation", this.Configuration.ApiClient.ParameterToString(scmOrganisation)); // path parameter
            if (repository != null) localVarPathParams.Add("repository", this.Configuration.ApiClient.ParameterToString(repository)); // path parameter
            if (credentialId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "credentialId", credentialId)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSCMOrganisationRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScmOrganisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScmOrganisations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScmOrganisations)));
        }

        /// <summary>
        ///  Retrieve SCM organizations details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>ScmOrganisations</returns>
        public ScmOrganisations GetSCMOrganisations (string organization, string scm, string credentialId = null)
        {
             ApiResponse<ScmOrganisations> localVarResponse = GetSCMOrganisationsWithHttpInfo(organization, scm, credentialId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve SCM organizations details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>ApiResponse of ScmOrganisations</returns>
        public ApiResponse< ScmOrganisations > GetSCMOrganisationsWithHttpInfo (string organization, string scm, string credentialId = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetSCMOrganisations");
            // verify the required parameter 'scm' is set
            if (scm == null)
                throw new ApiException(400, "Missing required parameter 'scm' when calling BlueOceanApi->GetSCMOrganisations");

            var localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (scm != null) localVarPathParams.Add("scm", this.Configuration.ApiClient.ParameterToString(scm)); // path parameter
            if (credentialId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "credentialId", credentialId)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSCMOrganisations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScmOrganisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScmOrganisations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScmOrganisations)));
        }

        /// <summary>
        ///  Retrieve SCM organizations details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>Task of ScmOrganisations</returns>
        public async System.Threading.Tasks.Task<ScmOrganisations> GetSCMOrganisationsAsync (string organization, string scm, string credentialId = null)
        {
             ApiResponse<ScmOrganisations> localVarResponse = await GetSCMOrganisationsAsyncWithHttpInfo(organization, scm, credentialId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve SCM organizations details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <returns>Task of ApiResponse (ScmOrganisations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScmOrganisations>> GetSCMOrganisationsAsyncWithHttpInfo (string organization, string scm, string credentialId = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetSCMOrganisations");
            // verify the required parameter 'scm' is set
            if (scm == null)
                throw new ApiException(400, "Missing required parameter 'scm' when calling BlueOceanApi->GetSCMOrganisations");

            var localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (scm != null) localVarPathParams.Add("scm", this.Configuration.ApiClient.ParameterToString(scm)); // path parameter
            if (credentialId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "credentialId", credentialId)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSCMOrganisations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScmOrganisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScmOrganisations) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScmOrganisations)));
        }

        /// <summary>
        ///  Retrieve user details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <returns>User</returns>
        public User GetUser (string organization, string user)
        {
             ApiResponse<User> localVarResponse = GetUserWithHttpInfo(organization, user);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUserWithHttpInfo (string organization, string user)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetUser");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling BlueOceanApi->GetUser");

            var localVarPath = "/blue/rest/organizations/{organization}/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieve user details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (string organization, string user)
        {
             ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(organization, user);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve user details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (string organization, string user)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetUser");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling BlueOceanApi->GetUser");

            var localVarPath = "/blue/rest/organizations/{organization}/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieve user favorites details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <returns>UserFavorites</returns>
        public UserFavorites GetUserFavorites (string user)
        {
             ApiResponse<UserFavorites> localVarResponse = GetUserFavoritesWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user favorites details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <returns>ApiResponse of UserFavorites</returns>
        public ApiResponse< UserFavorites > GetUserFavoritesWithHttpInfo (string user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling BlueOceanApi->GetUserFavorites");

            var localVarPath = "/blue/rest/users/{user}/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFavorites>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFavorites) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFavorites)));
        }

        /// <summary>
        ///  Retrieve user favorites details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of UserFavorites</returns>
        public async System.Threading.Tasks.Task<UserFavorites> GetUserFavoritesAsync (string user)
        {
             ApiResponse<UserFavorites> localVarResponse = await GetUserFavoritesAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve user favorites details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of ApiResponse (UserFavorites)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserFavorites>> GetUserFavoritesAsyncWithHttpInfo (string user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling BlueOceanApi->GetUserFavorites");

            var localVarPath = "/blue/rest/users/{user}/favorites";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarPathParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserFavorites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserFavorites>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserFavorites) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserFavorites)));
        }

        /// <summary>
        ///  Retrieve users details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>User</returns>
        public User GetUsers (string organization)
        {
             ApiResponse<User> localVarResponse = GetUsersWithHttpInfo(organization);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve users details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUsersWithHttpInfo (string organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetUsers");

            var localVarPath = "/blue/rest/organizations/{organization}/users/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Retrieve users details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUsersAsync (string organization)
        {
             ApiResponse<User> localVarResponse = await GetUsersAsyncWithHttpInfo(organization);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve users details for an organization
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUsersAsyncWithHttpInfo (string organization)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->GetUsers");

            var localVarPath = "/blue/rest/organizations/{organization}/users/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        ///  Replay an organization pipeline run
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>QueueItemImpl</returns>
        public QueueItemImpl PostPipelineRun (string organization, string pipeline, string run)
        {
             ApiResponse<QueueItemImpl> localVarResponse = PostPipelineRunWithHttpInfo(organization, pipeline, run);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Replay an organization pipeline run
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>ApiResponse of QueueItemImpl</returns>
        public ApiResponse< QueueItemImpl > PostPipelineRunWithHttpInfo (string organization, string pipeline, string run)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->PostPipelineRun");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->PostPipelineRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->PostPipelineRun");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPipelineRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemImpl)));
        }

        /// <summary>
        ///  Replay an organization pipeline run
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of QueueItemImpl</returns>
        public async System.Threading.Tasks.Task<QueueItemImpl> PostPipelineRunAsync (string organization, string pipeline, string run)
        {
             ApiResponse<QueueItemImpl> localVarResponse = await PostPipelineRunAsyncWithHttpInfo(organization, pipeline, run);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Replay an organization pipeline run
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <returns>Task of ApiResponse (QueueItemImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueItemImpl>> PostPipelineRunAsyncWithHttpInfo (string organization, string pipeline, string run)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->PostPipelineRun");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->PostPipelineRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->PostPipelineRun");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPipelineRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemImpl)));
        }

        /// <summary>
        ///  Start a build for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>QueueItemImpl</returns>
        public QueueItemImpl PostPipelineRuns (string organization, string pipeline)
        {
             ApiResponse<QueueItemImpl> localVarResponse = PostPipelineRunsWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Start a build for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of QueueItemImpl</returns>
        public ApiResponse< QueueItemImpl > PostPipelineRunsWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->PostPipelineRuns");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->PostPipelineRuns");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPipelineRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemImpl)));
        }

        /// <summary>
        ///  Start a build for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of QueueItemImpl</returns>
        public async System.Threading.Tasks.Task<QueueItemImpl> PostPipelineRunsAsync (string organization, string pipeline)
        {
             ApiResponse<QueueItemImpl> localVarResponse = await PostPipelineRunsAsyncWithHttpInfo(organization, pipeline);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Start a build for an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (QueueItemImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueueItemImpl>> PostPipelineRunsAsyncWithHttpInfo (string organization, string pipeline)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->PostPipelineRuns");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->PostPipelineRuns");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPipelineRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueueItemImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueueItemImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueueItemImpl)));
        }

        /// <summary>
        ///  Favorite/unfavorite a pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <returns>FavoriteImpl</returns>
        public FavoriteImpl PutPipelineFavorite (string organization, string pipeline, Body body)
        {
             ApiResponse<FavoriteImpl> localVarResponse = PutPipelineFavoriteWithHttpInfo(organization, pipeline, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Favorite/unfavorite a pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <returns>ApiResponse of FavoriteImpl</returns>
        public ApiResponse< FavoriteImpl > PutPipelineFavoriteWithHttpInfo (string organization, string pipeline, Body body)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->PutPipelineFavorite");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->PutPipelineFavorite");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BlueOceanApi->PutPipelineFavorite");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPipelineFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FavoriteImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FavoriteImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FavoriteImpl)));
        }

        /// <summary>
        ///  Favorite/unfavorite a pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <returns>Task of FavoriteImpl</returns>
        public async System.Threading.Tasks.Task<FavoriteImpl> PutPipelineFavoriteAsync (string organization, string pipeline, Body body)
        {
             ApiResponse<FavoriteImpl> localVarResponse = await PutPipelineFavoriteAsyncWithHttpInfo(organization, pipeline, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Favorite/unfavorite a pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <returns>Task of ApiResponse (FavoriteImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FavoriteImpl>> PutPipelineFavoriteAsyncWithHttpInfo (string organization, string pipeline, Body body)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->PutPipelineFavorite");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->PutPipelineFavorite");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BlueOceanApi->PutPipelineFavorite");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPipelineFavorite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FavoriteImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FavoriteImpl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FavoriteImpl)));
        }

        /// <summary>
        ///  Stop a build of an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <returns>PipelineRun</returns>
        public PipelineRun PutPipelineRun (string organization, string pipeline, string run, string blocking = null, int? timeOutInSecs = null)
        {
             ApiResponse<PipelineRun> localVarResponse = PutPipelineRunWithHttpInfo(organization, pipeline, run, blocking, timeOutInSecs);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Stop a build of an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <returns>ApiResponse of PipelineRun</returns>
        public ApiResponse< PipelineRun > PutPipelineRunWithHttpInfo (string organization, string pipeline, string run, string blocking = null, int? timeOutInSecs = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->PutPipelineRun");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->PutPipelineRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->PutPipelineRun");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (blocking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blocking", blocking)); // query parameter
            if (timeOutInSecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeOutInSecs", timeOutInSecs)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPipelineRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRun)));
        }

        /// <summary>
        ///  Stop a build of an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <returns>Task of PipelineRun</returns>
        public async System.Threading.Tasks.Task<PipelineRun> PutPipelineRunAsync (string organization, string pipeline, string run, string blocking = null, int? timeOutInSecs = null)
        {
             ApiResponse<PipelineRun> localVarResponse = await PutPipelineRunAsyncWithHttpInfo(organization, pipeline, run, blocking, timeOutInSecs);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Stop a build of an organization pipeline
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <returns>Task of ApiResponse (PipelineRun)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PipelineRun>> PutPipelineRunAsyncWithHttpInfo (string organization, string pipeline, string run, string blocking = null, int? timeOutInSecs = null)
        {
            // verify the required parameter 'organization' is set
            if (organization == null)
                throw new ApiException(400, "Missing required parameter 'organization' when calling BlueOceanApi->PutPipelineRun");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->PutPipelineRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling BlueOceanApi->PutPipelineRun");

            var localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organization != null) localVarPathParams.Add("organization", this.Configuration.ApiClient.ParameterToString(organization)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", this.Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (run != null) localVarPathParams.Add("run", this.Configuration.ApiClient.ParameterToString(run)); // path parameter
            if (blocking != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "blocking", blocking)); // query parameter
            if (timeOutInSecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeOutInSecs", timeOutInSecs)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutPipelineRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PipelineRun>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PipelineRun) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PipelineRun)));
        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>string</returns>
        public string Search (string q)
        {
             ApiResponse<string> localVarResponse = SearchWithHttpInfo(q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling BlueOceanApi->Search");

            var localVarPath = "/blue/rest/search/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchAsync (string q)
        {
             ApiResponse<string> localVarResponse = await SearchAsyncWithHttpInfo(q);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchAsyncWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling BlueOceanApi->Search");

            var localVarPath = "/blue/rest/search/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>string</returns>
        public string SearchClasses (string q)
        {
             ApiResponse<string> localVarResponse = SearchClassesWithHttpInfo(q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchClassesWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling BlueOceanApi->SearchClasses");

            var localVarPath = "/blue/rest/classes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchClasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchClassesAsync (string q)
        {
             ApiResponse<string> localVarResponse = await SearchClassesAsyncWithHttpInfo(q);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchClassesAsyncWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling BlueOceanApi->SearchClasses");

            var localVarPath = "/blue/rest/classes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (jenkins_auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchClasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
