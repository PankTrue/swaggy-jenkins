/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIBaseRemoteAccessApiRequest.h"

namespace OpenAPI {

OAIBaseRemoteAccessApiRequest::OAIBaseRemoteAccessApiRequest(QHttpEngine::Socket *s, OAIBaseRemoteAccessApiHandler* hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }     
}

OAIBaseRemoteAccessApiRequest::~OAIBaseRemoteAccessApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIBaseRemoteAccessApiRequest::~OAIBaseRemoteAccessApiRequest()";
}

QMap<QString, QString> 
OAIBaseRemoteAccessApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIBaseRemoteAccessApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIBaseRemoteAccessApiRequest::getRawSocket(){
    return socket;
}


void OAIBaseRemoteAccessApiRequest::getCrumbRequest(){
    qDebug() << "//crumbIssuer/api/json";
    connect(this, &OAIBaseRemoteAccessApiRequest::getCrumb, handler, &OAIBaseRemoteAccessApiHandler::getCrumb);
    
    


    emit getCrumb();
}

  

void OAIBaseRemoteAccessApiRequest::getCrumbResponse(const OAIDefaultCrumbIssuer& res){
    writeResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBaseRemoteAccessApiRequest::getCrumbError(const OAIDefaultCrumbIssuer& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    writeResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBaseRemoteAccessApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}
    
void OAIBaseRemoteAccessApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(res);  // TODO
    Q_UNUSED(error_type); // TODO
}

}
