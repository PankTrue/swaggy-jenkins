/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGithubRepositories.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGithubRepositories::OAIGithubRepositories(QString json) {
    this->fromJson(json);
}

OAIGithubRepositories::OAIGithubRepositories() {
    this->init();
}

OAIGithubRepositories::~OAIGithubRepositories() {
    
}

void
OAIGithubRepositories::init() {
    m__class_isSet = false;
    m__links_isSet = false;
    m_items_isSet = false;
    m_last_page_isSet = false;
    m_next_page_isSet = false;
    m_page_size_isSet = false;
}

void
OAIGithubRepositories::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIGithubRepositories::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    
    ::OpenAPI::fromJsonValue(_links, json[QString("_links")]);
    
    
    ::OpenAPI::fromJsonValue(items, json[QString("items")]);
    ::OpenAPI::fromJsonValue(last_page, json[QString("lastPage")]);
    
    ::OpenAPI::fromJsonValue(next_page, json[QString("nextPage")]);
    
    ::OpenAPI::fromJsonValue(page_size, json[QString("pageSize")]);
    
}

QString
OAIGithubRepositories::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGithubRepositories::asJsonObject() const {
    QJsonObject obj;
	if(m__class_isSet){
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
	if(_links.isSet()){
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(_links));
    }
	
    if(items.size() > 0){
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(items));
    } 
	if(m_last_page_isSet){
        obj.insert(QString("lastPage"), ::OpenAPI::toJsonValue(last_page));
    }
	if(m_next_page_isSet){
        obj.insert(QString("nextPage"), ::OpenAPI::toJsonValue(next_page));
    }
	if(m_page_size_isSet){
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(page_size));
    }
    return obj;
}

QString
OAIGithubRepositories::getClass() const {
    return _class;
}
void
OAIGithubRepositories::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

OAIGithubRepositorieslinks
OAIGithubRepositories::getLinks() const {
    return _links;
}
void
OAIGithubRepositories::setLinks(const OAIGithubRepositorieslinks &_links) {
    this->_links = _links;
    this->m__links_isSet = true;
}

QList<OAIGithubRepository>
OAIGithubRepositories::getItems() const {
    return items;
}
void
OAIGithubRepositories::setItems(const QList<OAIGithubRepository> &items) {
    this->items = items;
    this->m_items_isSet = true;
}

qint32
OAIGithubRepositories::getLastPage() const {
    return last_page;
}
void
OAIGithubRepositories::setLastPage(const qint32 &last_page) {
    this->last_page = last_page;
    this->m_last_page_isSet = true;
}

qint32
OAIGithubRepositories::getNextPage() const {
    return next_page;
}
void
OAIGithubRepositories::setNextPage(const qint32 &next_page) {
    this->next_page = next_page;
    this->m_next_page_isSet = true;
}

qint32
OAIGithubRepositories::getPageSize() const {
    return page_size;
}
void
OAIGithubRepositories::setPageSize(const qint32 &page_size) {
    this->page_size = page_size;
    this->m_page_size_isSet = true;
}


bool
OAIGithubRepositories::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m__class_isSet){ isObjectUpdated = true; break;}
    
        if(_links.isSet()){ isObjectUpdated = true; break;}
    
        if(items.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_last_page_isSet){ isObjectUpdated = true; break;}
    
        if(m_next_page_isSet){ isObjectUpdated = true; break;}
    
        if(m_page_size_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

