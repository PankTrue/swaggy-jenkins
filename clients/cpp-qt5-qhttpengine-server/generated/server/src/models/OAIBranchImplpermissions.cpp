/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIBranchImplpermissions.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIBranchImplpermissions::OAIBranchImplpermissions(QString json) {
    this->fromJson(json);
}

OAIBranchImplpermissions::OAIBranchImplpermissions() {
    this->init();
}

OAIBranchImplpermissions::~OAIBranchImplpermissions() {
    
}

void
OAIBranchImplpermissions::init() {
    m_create_isSet = false;
    m_read_isSet = false;
    m_start_isSet = false;
    m_stop_isSet = false;
    m__class_isSet = false;
}

void
OAIBranchImplpermissions::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIBranchImplpermissions::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(create, json[QString("create")]);
    
    ::OpenAPI::fromJsonValue(read, json[QString("read")]);
    
    ::OpenAPI::fromJsonValue(start, json[QString("start")]);
    
    ::OpenAPI::fromJsonValue(stop, json[QString("stop")]);
    
    ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    
}

QString
OAIBranchImplpermissions::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIBranchImplpermissions::asJsonObject() const {
    QJsonObject obj;
	if(m_create_isSet){
        obj.insert(QString("create"), ::OpenAPI::toJsonValue(create));
    }
	if(m_read_isSet){
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(read));
    }
	if(m_start_isSet){
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(start));
    }
	if(m_stop_isSet){
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(stop));
    }
	if(m__class_isSet){
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
    return obj;
}

bool
OAIBranchImplpermissions::isCreate() const {
    return create;
}
void
OAIBranchImplpermissions::setCreate(const bool &create) {
    this->create = create;
    this->m_create_isSet = true;
}

bool
OAIBranchImplpermissions::isRead() const {
    return read;
}
void
OAIBranchImplpermissions::setRead(const bool &read) {
    this->read = read;
    this->m_read_isSet = true;
}

bool
OAIBranchImplpermissions::isStart() const {
    return start;
}
void
OAIBranchImplpermissions::setStart(const bool &start) {
    this->start = start;
    this->m_start_isSet = true;
}

bool
OAIBranchImplpermissions::isStop() const {
    return stop;
}
void
OAIBranchImplpermissions::setStop(const bool &stop) {
    this->stop = stop;
    this->m_stop_isSet = true;
}

QString
OAIBranchImplpermissions::getClass() const {
    return _class;
}
void
OAIBranchImplpermissions::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}


bool
OAIBranchImplpermissions::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_create_isSet){ isObjectUpdated = true; break;}
    
        if(m_read_isSet){ isObjectUpdated = true; break;}
    
        if(m_start_isSet){ isObjectUpdated = true; break;}
    
        if(m_stop_isSet){ isObjectUpdated = true; break;}
    
        if(m__class_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

