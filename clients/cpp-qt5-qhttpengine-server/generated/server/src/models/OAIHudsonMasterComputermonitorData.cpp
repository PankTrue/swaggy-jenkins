/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIHudsonMasterComputermonitorData.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIHudsonMasterComputermonitorData::OAIHudsonMasterComputermonitorData(QString json) {
    this->fromJson(json);
}

OAIHudsonMasterComputermonitorData::OAIHudsonMasterComputermonitorData() {
    this->init();
}

OAIHudsonMasterComputermonitorData::~OAIHudsonMasterComputermonitorData() {
    
}

void
OAIHudsonMasterComputermonitorData::init() {
    m_hudson_node_monitors_swap_space_monitor_isSet = false;
    m_hudson_node_monitors_temporary_space_monitor_isSet = false;
    m_hudson_node_monitors_disk_space_monitor_isSet = false;
    m_hudson_node_monitors_architecture_monitor_isSet = false;
    m_hudson_node_monitors_response_time_monitor_isSet = false;
    m_hudson_node_monitors_clock_monitor_isSet = false;
    m__class_isSet = false;
}

void
OAIHudsonMasterComputermonitorData::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIHudsonMasterComputermonitorData::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(hudson_node_monitors_swap_space_monitor, json[QString("hudson.node_monitors.SwapSpaceMonitor")]);
    
    ::OpenAPI::fromJsonValue(hudson_node_monitors_temporary_space_monitor, json[QString("hudson.node_monitors.TemporarySpaceMonitor")]);
    
    ::OpenAPI::fromJsonValue(hudson_node_monitors_disk_space_monitor, json[QString("hudson.node_monitors.DiskSpaceMonitor")]);
    
    ::OpenAPI::fromJsonValue(hudson_node_monitors_architecture_monitor, json[QString("hudson.node_monitors.ArchitectureMonitor")]);
    
    ::OpenAPI::fromJsonValue(hudson_node_monitors_response_time_monitor, json[QString("hudson.node_monitors.ResponseTimeMonitor")]);
    
    ::OpenAPI::fromJsonValue(hudson_node_monitors_clock_monitor, json[QString("hudson.node_monitors.ClockMonitor")]);
    
    ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    
}

QString
OAIHudsonMasterComputermonitorData::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIHudsonMasterComputermonitorData::asJsonObject() const {
    QJsonObject obj;
	if(hudson_node_monitors_swap_space_monitor.isSet()){
        obj.insert(QString("hudson.node_monitors.SwapSpaceMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_swap_space_monitor));
    }
	if(hudson_node_monitors_temporary_space_monitor.isSet()){
        obj.insert(QString("hudson.node_monitors.TemporarySpaceMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_temporary_space_monitor));
    }
	if(hudson_node_monitors_disk_space_monitor.isSet()){
        obj.insert(QString("hudson.node_monitors.DiskSpaceMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_disk_space_monitor));
    }
	if(m_hudson_node_monitors_architecture_monitor_isSet){
        obj.insert(QString("hudson.node_monitors.ArchitectureMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_architecture_monitor));
    }
	if(hudson_node_monitors_response_time_monitor.isSet()){
        obj.insert(QString("hudson.node_monitors.ResponseTimeMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_response_time_monitor));
    }
	if(hudson_node_monitors_clock_monitor.isSet()){
        obj.insert(QString("hudson.node_monitors.ClockMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_clock_monitor));
    }
	if(m__class_isSet){
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
    return obj;
}

OAISwapSpaceMonitorMemoryUsage2
OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const {
    return hudson_node_monitors_swap_space_monitor;
}
void
OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsSwapSpaceMonitor(const OAISwapSpaceMonitorMemoryUsage2 &hudson_node_monitors_swap_space_monitor) {
    this->hudson_node_monitors_swap_space_monitor = hudson_node_monitors_swap_space_monitor;
    this->m_hudson_node_monitors_swap_space_monitor_isSet = true;
}

OAIDiskSpaceMonitorDescriptorDiskSpace
OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const {
    return hudson_node_monitors_temporary_space_monitor;
}
void
OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(const OAIDiskSpaceMonitorDescriptorDiskSpace &hudson_node_monitors_temporary_space_monitor) {
    this->hudson_node_monitors_temporary_space_monitor = hudson_node_monitors_temporary_space_monitor;
    this->m_hudson_node_monitors_temporary_space_monitor_isSet = true;
}

OAIDiskSpaceMonitorDescriptorDiskSpace
OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const {
    return hudson_node_monitors_disk_space_monitor;
}
void
OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsDiskSpaceMonitor(const OAIDiskSpaceMonitorDescriptorDiskSpace &hudson_node_monitors_disk_space_monitor) {
    this->hudson_node_monitors_disk_space_monitor = hudson_node_monitors_disk_space_monitor;
    this->m_hudson_node_monitors_disk_space_monitor_isSet = true;
}

QString
OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsArchitectureMonitor() const {
    return hudson_node_monitors_architecture_monitor;
}
void
OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsArchitectureMonitor(const QString &hudson_node_monitors_architecture_monitor) {
    this->hudson_node_monitors_architecture_monitor = hudson_node_monitors_architecture_monitor;
    this->m_hudson_node_monitors_architecture_monitor_isSet = true;
}

OAIResponseTimeMonitorData
OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsResponseTimeMonitor() const {
    return hudson_node_monitors_response_time_monitor;
}
void
OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsResponseTimeMonitor(const OAIResponseTimeMonitorData &hudson_node_monitors_response_time_monitor) {
    this->hudson_node_monitors_response_time_monitor = hudson_node_monitors_response_time_monitor;
    this->m_hudson_node_monitors_response_time_monitor_isSet = true;
}

OAIClockDifference
OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsClockMonitor() const {
    return hudson_node_monitors_clock_monitor;
}
void
OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsClockMonitor(const OAIClockDifference &hudson_node_monitors_clock_monitor) {
    this->hudson_node_monitors_clock_monitor = hudson_node_monitors_clock_monitor;
    this->m_hudson_node_monitors_clock_monitor_isSet = true;
}

QString
OAIHudsonMasterComputermonitorData::getClass() const {
    return _class;
}
void
OAIHudsonMasterComputermonitorData::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}


bool
OAIHudsonMasterComputermonitorData::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(hudson_node_monitors_swap_space_monitor.isSet()){ isObjectUpdated = true; break;}
    
        if(hudson_node_monitors_temporary_space_monitor.isSet()){ isObjectUpdated = true; break;}
    
        if(hudson_node_monitors_disk_space_monitor.isSet()){ isObjectUpdated = true; break;}
    
        if(m_hudson_node_monitors_architecture_monitor_isSet){ isObjectUpdated = true; break;}
    
        if(hudson_node_monitors_response_time_monitor.isSet()){ isObjectUpdated = true; break;}
    
        if(hudson_node_monitors_clock_monitor.isSet()){ isObjectUpdated = true; break;}
    
        if(m__class_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

