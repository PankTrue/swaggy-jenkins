/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGithubRepository.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGithubRepository::OAIGithubRepository(QString json) {
    this->fromJson(json);
}

OAIGithubRepository::OAIGithubRepository() {
    this->init();
}

OAIGithubRepository::~OAIGithubRepository() {
    
}

void
OAIGithubRepository::init() {
    m__class_isSet = false;
    m__links_isSet = false;
    m_default_branch_isSet = false;
    m_description_isSet = false;
    m_name_isSet = false;
    m_permissions_isSet = false;
    m__private_isSet = false;
    m_full_name_isSet = false;
}

void
OAIGithubRepository::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIGithubRepository::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    
    ::OpenAPI::fromJsonValue(_links, json[QString("_links")]);
    
    ::OpenAPI::fromJsonValue(default_branch, json[QString("defaultBranch")]);
    
    ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(permissions, json[QString("permissions")]);
    
    ::OpenAPI::fromJsonValue(_private, json[QString("private")]);
    
    ::OpenAPI::fromJsonValue(full_name, json[QString("fullName")]);
    
}

QString
OAIGithubRepository::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGithubRepository::asJsonObject() const {
    QJsonObject obj;
	if(m__class_isSet){
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
	if(_links.isSet()){
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(_links));
    }
	if(m_default_branch_isSet){
        obj.insert(QString("defaultBranch"), ::OpenAPI::toJsonValue(default_branch));
    }
	if(m_description_isSet){
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
	if(m_name_isSet){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(permissions.isSet()){
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(permissions));
    }
	if(m__private_isSet){
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(_private));
    }
	if(m_full_name_isSet){
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(full_name));
    }
    return obj;
}

QString
OAIGithubRepository::getClass() const {
    return _class;
}
void
OAIGithubRepository::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

OAIGithubRepositorylinks
OAIGithubRepository::getLinks() const {
    return _links;
}
void
OAIGithubRepository::setLinks(const OAIGithubRepositorylinks &_links) {
    this->_links = _links;
    this->m__links_isSet = true;
}

QString
OAIGithubRepository::getDefaultBranch() const {
    return default_branch;
}
void
OAIGithubRepository::setDefaultBranch(const QString &default_branch) {
    this->default_branch = default_branch;
    this->m_default_branch_isSet = true;
}

QString
OAIGithubRepository::getDescription() const {
    return description;
}
void
OAIGithubRepository::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString
OAIGithubRepository::getName() const {
    return name;
}
void
OAIGithubRepository::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIGithubRepositorypermissions
OAIGithubRepository::getPermissions() const {
    return permissions;
}
void
OAIGithubRepository::setPermissions(const OAIGithubRepositorypermissions &permissions) {
    this->permissions = permissions;
    this->m_permissions_isSet = true;
}

bool
OAIGithubRepository::isPrivate() const {
    return _private;
}
void
OAIGithubRepository::setPrivate(const bool &_private) {
    this->_private = _private;
    this->m__private_isSet = true;
}

QString
OAIGithubRepository::getFullName() const {
    return full_name;
}
void
OAIGithubRepository::setFullName(const QString &full_name) {
    this->full_name = full_name;
    this->m_full_name_isSet = true;
}


bool
OAIGithubRepository::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m__class_isSet){ isObjectUpdated = true; break;}
    
        if(_links.isSet()){ isObjectUpdated = true; break;}
    
        if(m_default_branch_isSet){ isObjectUpdated = true; break;}
    
        if(m_description_isSet){ isObjectUpdated = true; break;}
    
        if(m_name_isSet){ isObjectUpdated = true; break;}
    
        if(permissions.isSet()){ isObjectUpdated = true; break;}
    
        if(m__private_isSet){ isObjectUpdated = true; break;}
    
        if(m_full_name_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

