/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIHudson.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIHudson::OAIHudson(QString json) {
    this->fromJson(json);
}

OAIHudson::OAIHudson() {
    this->init();
}

OAIHudson::~OAIHudson() {
    
}

void
OAIHudson::init() {
    m__class_isSet = false;
    m_assigned_labels_isSet = false;
    m_mode_isSet = false;
    m_node_description_isSet = false;
    m_node_name_isSet = false;
    m_num_executors_isSet = false;
    m_description_isSet = false;
    m_jobs_isSet = false;
    m_primary_view_isSet = false;
    m_quieting_down_isSet = false;
    m_slave_agent_port_isSet = false;
    m_unlabeled_load_isSet = false;
    m_use_crumbs_isSet = false;
    m_use_security_isSet = false;
    m_views_isSet = false;
}

void
OAIHudson::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIHudson::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    
    
    ::OpenAPI::fromJsonValue(assigned_labels, json[QString("assignedLabels")]);
    ::OpenAPI::fromJsonValue(mode, json[QString("mode")]);
    
    ::OpenAPI::fromJsonValue(node_description, json[QString("nodeDescription")]);
    
    ::OpenAPI::fromJsonValue(node_name, json[QString("nodeName")]);
    
    ::OpenAPI::fromJsonValue(num_executors, json[QString("numExecutors")]);
    
    ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    
    
    ::OpenAPI::fromJsonValue(jobs, json[QString("jobs")]);
    ::OpenAPI::fromJsonValue(primary_view, json[QString("primaryView")]);
    
    ::OpenAPI::fromJsonValue(quieting_down, json[QString("quietingDown")]);
    
    ::OpenAPI::fromJsonValue(slave_agent_port, json[QString("slaveAgentPort")]);
    
    ::OpenAPI::fromJsonValue(unlabeled_load, json[QString("unlabeledLoad")]);
    
    ::OpenAPI::fromJsonValue(use_crumbs, json[QString("useCrumbs")]);
    
    ::OpenAPI::fromJsonValue(use_security, json[QString("useSecurity")]);
    
    
    ::OpenAPI::fromJsonValue(views, json[QString("views")]);
}

QString
OAIHudson::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIHudson::asJsonObject() const {
    QJsonObject obj;
	if(m__class_isSet){
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
	
    if(assigned_labels.size() > 0){
        obj.insert(QString("assignedLabels"), ::OpenAPI::toJsonValue(assigned_labels));
    } 
	if(m_mode_isSet){
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(mode));
    }
	if(m_node_description_isSet){
        obj.insert(QString("nodeDescription"), ::OpenAPI::toJsonValue(node_description));
    }
	if(m_node_name_isSet){
        obj.insert(QString("nodeName"), ::OpenAPI::toJsonValue(node_name));
    }
	if(m_num_executors_isSet){
        obj.insert(QString("numExecutors"), ::OpenAPI::toJsonValue(num_executors));
    }
	if(m_description_isSet){
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
	
    if(jobs.size() > 0){
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(jobs));
    } 
	if(primary_view.isSet()){
        obj.insert(QString("primaryView"), ::OpenAPI::toJsonValue(primary_view));
    }
	if(m_quieting_down_isSet){
        obj.insert(QString("quietingDown"), ::OpenAPI::toJsonValue(quieting_down));
    }
	if(m_slave_agent_port_isSet){
        obj.insert(QString("slaveAgentPort"), ::OpenAPI::toJsonValue(slave_agent_port));
    }
	if(unlabeled_load.isSet()){
        obj.insert(QString("unlabeledLoad"), ::OpenAPI::toJsonValue(unlabeled_load));
    }
	if(m_use_crumbs_isSet){
        obj.insert(QString("useCrumbs"), ::OpenAPI::toJsonValue(use_crumbs));
    }
	if(m_use_security_isSet){
        obj.insert(QString("useSecurity"), ::OpenAPI::toJsonValue(use_security));
    }
	
    if(views.size() > 0){
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(views));
    } 
    return obj;
}

QString
OAIHudson::getClass() const {
    return _class;
}
void
OAIHudson::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

QList<OAIHudsonassignedLabels>
OAIHudson::getAssignedLabels() const {
    return assigned_labels;
}
void
OAIHudson::setAssignedLabels(const QList<OAIHudsonassignedLabels> &assigned_labels) {
    this->assigned_labels = assigned_labels;
    this->m_assigned_labels_isSet = true;
}

QString
OAIHudson::getMode() const {
    return mode;
}
void
OAIHudson::setMode(const QString &mode) {
    this->mode = mode;
    this->m_mode_isSet = true;
}

QString
OAIHudson::getNodeDescription() const {
    return node_description;
}
void
OAIHudson::setNodeDescription(const QString &node_description) {
    this->node_description = node_description;
    this->m_node_description_isSet = true;
}

QString
OAIHudson::getNodeName() const {
    return node_name;
}
void
OAIHudson::setNodeName(const QString &node_name) {
    this->node_name = node_name;
    this->m_node_name_isSet = true;
}

qint32
OAIHudson::getNumExecutors() const {
    return num_executors;
}
void
OAIHudson::setNumExecutors(const qint32 &num_executors) {
    this->num_executors = num_executors;
    this->m_num_executors_isSet = true;
}

QString
OAIHudson::getDescription() const {
    return description;
}
void
OAIHudson::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

QList<OAIFreeStyleProject>
OAIHudson::getJobs() const {
    return jobs;
}
void
OAIHudson::setJobs(const QList<OAIFreeStyleProject> &jobs) {
    this->jobs = jobs;
    this->m_jobs_isSet = true;
}

OAIAllView
OAIHudson::getPrimaryView() const {
    return primary_view;
}
void
OAIHudson::setPrimaryView(const OAIAllView &primary_view) {
    this->primary_view = primary_view;
    this->m_primary_view_isSet = true;
}

bool
OAIHudson::isQuietingDown() const {
    return quieting_down;
}
void
OAIHudson::setQuietingDown(const bool &quieting_down) {
    this->quieting_down = quieting_down;
    this->m_quieting_down_isSet = true;
}

qint32
OAIHudson::getSlaveAgentPort() const {
    return slave_agent_port;
}
void
OAIHudson::setSlaveAgentPort(const qint32 &slave_agent_port) {
    this->slave_agent_port = slave_agent_port;
    this->m_slave_agent_port_isSet = true;
}

OAIUnlabeledLoadStatistics
OAIHudson::getUnlabeledLoad() const {
    return unlabeled_load;
}
void
OAIHudson::setUnlabeledLoad(const OAIUnlabeledLoadStatistics &unlabeled_load) {
    this->unlabeled_load = unlabeled_load;
    this->m_unlabeled_load_isSet = true;
}

bool
OAIHudson::isUseCrumbs() const {
    return use_crumbs;
}
void
OAIHudson::setUseCrumbs(const bool &use_crumbs) {
    this->use_crumbs = use_crumbs;
    this->m_use_crumbs_isSet = true;
}

bool
OAIHudson::isUseSecurity() const {
    return use_security;
}
void
OAIHudson::setUseSecurity(const bool &use_security) {
    this->use_security = use_security;
    this->m_use_security_isSet = true;
}

QList<OAIAllView>
OAIHudson::getViews() const {
    return views;
}
void
OAIHudson::setViews(const QList<OAIAllView> &views) {
    this->views = views;
    this->m_views_isSet = true;
}


bool
OAIHudson::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m__class_isSet){ isObjectUpdated = true; break;}
    
        if(assigned_labels.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_mode_isSet){ isObjectUpdated = true; break;}
    
        if(m_node_description_isSet){ isObjectUpdated = true; break;}
    
        if(m_node_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_num_executors_isSet){ isObjectUpdated = true; break;}
    
        if(m_description_isSet){ isObjectUpdated = true; break;}
    
        if(jobs.size() > 0){ isObjectUpdated = true; break;}
    
        if(primary_view.isSet()){ isObjectUpdated = true; break;}
    
        if(m_quieting_down_isSet){ isObjectUpdated = true; break;}
    
        if(m_slave_agent_port_isSet){ isObjectUpdated = true; break;}
    
        if(unlabeled_load.isSet()){ isObjectUpdated = true; break;}
    
        if(m_use_crumbs_isSet){ isObjectUpdated = true; break;}
    
        if(m_use_security_isSet){ isObjectUpdated = true; break;}
    
        if(views.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

