/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIInputStepImpl.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIInputStepImpl::OAIInputStepImpl(QString json) {
    this->fromJson(json);
}

OAIInputStepImpl::OAIInputStepImpl() {
    this->init();
}

OAIInputStepImpl::~OAIInputStepImpl() {
    
}

void
OAIInputStepImpl::init() {
    m__class_isSet = false;
    m__links_isSet = false;
    m_id_isSet = false;
    m_message_isSet = false;
    m_ok_isSet = false;
    m_parameters_isSet = false;
    m_submitter_isSet = false;
}

void
OAIInputStepImpl::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIInputStepImpl::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    
    ::OpenAPI::fromJsonValue(_links, json[QString("_links")]);
    
    ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    
    ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    
    ::OpenAPI::fromJsonValue(ok, json[QString("ok")]);
    
    
    ::OpenAPI::fromJsonValue(parameters, json[QString("parameters")]);
    ::OpenAPI::fromJsonValue(submitter, json[QString("submitter")]);
    
}

QString
OAIInputStepImpl::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIInputStepImpl::asJsonObject() const {
    QJsonObject obj;
	if(m__class_isSet){
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
	if(_links.isSet()){
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(_links));
    }
	if(m_id_isSet){
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
	if(m_message_isSet){
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
	if(m_ok_isSet){
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(ok));
    }
	
    if(parameters.size() > 0){
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(parameters));
    } 
	if(m_submitter_isSet){
        obj.insert(QString("submitter"), ::OpenAPI::toJsonValue(submitter));
    }
    return obj;
}

QString
OAIInputStepImpl::getClass() const {
    return _class;
}
void
OAIInputStepImpl::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

OAIInputStepImpllinks
OAIInputStepImpl::getLinks() const {
    return _links;
}
void
OAIInputStepImpl::setLinks(const OAIInputStepImpllinks &_links) {
    this->_links = _links;
    this->m__links_isSet = true;
}

QString
OAIInputStepImpl::getId() const {
    return id;
}
void
OAIInputStepImpl::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString
OAIInputStepImpl::getMessage() const {
    return message;
}
void
OAIInputStepImpl::setMessage(const QString &message) {
    this->message = message;
    this->m_message_isSet = true;
}

QString
OAIInputStepImpl::getOk() const {
    return ok;
}
void
OAIInputStepImpl::setOk(const QString &ok) {
    this->ok = ok;
    this->m_ok_isSet = true;
}

QList<OAIStringParameterDefinition>
OAIInputStepImpl::getParameters() const {
    return parameters;
}
void
OAIInputStepImpl::setParameters(const QList<OAIStringParameterDefinition> &parameters) {
    this->parameters = parameters;
    this->m_parameters_isSet = true;
}

QString
OAIInputStepImpl::getSubmitter() const {
    return submitter;
}
void
OAIInputStepImpl::setSubmitter(const QString &submitter) {
    this->submitter = submitter;
    this->m_submitter_isSet = true;
}


bool
OAIInputStepImpl::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m__class_isSet){ isObjectUpdated = true; break;}
    
        if(_links.isSet()){ isObjectUpdated = true; break;}
    
        if(m_id_isSet){ isObjectUpdated = true; break;}
    
        if(m_message_isSet){ isObjectUpdated = true; break;}
    
        if(m_ok_isSet){ isObjectUpdated = true; break;}
    
        if(parameters.size() > 0){ isObjectUpdated = true; break;}
    
        if(m_submitter_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

