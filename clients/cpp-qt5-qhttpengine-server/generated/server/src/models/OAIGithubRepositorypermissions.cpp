/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGithubRepositorypermissions.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGithubRepositorypermissions::OAIGithubRepositorypermissions(QString json) {
    this->fromJson(json);
}

OAIGithubRepositorypermissions::OAIGithubRepositorypermissions() {
    this->init();
}

OAIGithubRepositorypermissions::~OAIGithubRepositorypermissions() {
    
}

void
OAIGithubRepositorypermissions::init() {
    m_admin_isSet = false;
    m_push_isSet = false;
    m_pull_isSet = false;
    m__class_isSet = false;
}

void
OAIGithubRepositorypermissions::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIGithubRepositorypermissions::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(admin, json[QString("admin")]);
    
    ::OpenAPI::fromJsonValue(push, json[QString("push")]);
    
    ::OpenAPI::fromJsonValue(pull, json[QString("pull")]);
    
    ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    
}

QString
OAIGithubRepositorypermissions::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGithubRepositorypermissions::asJsonObject() const {
    QJsonObject obj;
	if(m_admin_isSet){
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(admin));
    }
	if(m_push_isSet){
        obj.insert(QString("push"), ::OpenAPI::toJsonValue(push));
    }
	if(m_pull_isSet){
        obj.insert(QString("pull"), ::OpenAPI::toJsonValue(pull));
    }
	if(m__class_isSet){
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
    return obj;
}

bool
OAIGithubRepositorypermissions::isAdmin() const {
    return admin;
}
void
OAIGithubRepositorypermissions::setAdmin(const bool &admin) {
    this->admin = admin;
    this->m_admin_isSet = true;
}

bool
OAIGithubRepositorypermissions::isPush() const {
    return push;
}
void
OAIGithubRepositorypermissions::setPush(const bool &push) {
    this->push = push;
    this->m_push_isSet = true;
}

bool
OAIGithubRepositorypermissions::isPull() const {
    return pull;
}
void
OAIGithubRepositorypermissions::setPull(const bool &pull) {
    this->pull = pull;
    this->m_pull_isSet = true;
}

QString
OAIGithubRepositorypermissions::getClass() const {
    return _class;
}
void
OAIGithubRepositorypermissions::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}


bool
OAIGithubRepositorypermissions::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_admin_isSet){ isObjectUpdated = true; break;}
    
        if(m_push_isSet){ isObjectUpdated = true; break;}
    
        if(m_pull_isSet){ isObjectUpdated = true; break;}
    
        if(m__class_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

