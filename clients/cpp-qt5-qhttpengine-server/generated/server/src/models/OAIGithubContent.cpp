/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 1.1.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGithubContent.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGithubContent::OAIGithubContent(QString json) {
    this->fromJson(json);
}

OAIGithubContent::OAIGithubContent() {
    this->init();
}

OAIGithubContent::~OAIGithubContent() {
    
}

void
OAIGithubContent::init() {
    m_name_isSet = false;
    m_sha_isSet = false;
    m__class_isSet = false;
    m_repo_isSet = false;
    m_size_isSet = false;
    m_owner_isSet = false;
    m_path_isSet = false;
    m_base64_data_isSet = false;
}

void
OAIGithubContent::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIGithubContent::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(sha, json[QString("sha")]);
    
    ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    
    ::OpenAPI::fromJsonValue(repo, json[QString("repo")]);
    
    ::OpenAPI::fromJsonValue(size, json[QString("size")]);
    
    ::OpenAPI::fromJsonValue(owner, json[QString("owner")]);
    
    ::OpenAPI::fromJsonValue(path, json[QString("path")]);
    
    ::OpenAPI::fromJsonValue(base64_data, json[QString("base64Data")]);
    
}

QString
OAIGithubContent::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGithubContent::asJsonObject() const {
    QJsonObject obj;
	if(m_name_isSet){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(m_sha_isSet){
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(sha));
    }
	if(m__class_isSet){
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
	if(m_repo_isSet){
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(repo));
    }
	if(m_size_isSet){
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(size));
    }
	if(m_owner_isSet){
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(owner));
    }
	if(m_path_isSet){
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(path));
    }
	if(m_base64_data_isSet){
        obj.insert(QString("base64Data"), ::OpenAPI::toJsonValue(base64_data));
    }
    return obj;
}

QString
OAIGithubContent::getName() const {
    return name;
}
void
OAIGithubContent::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString
OAIGithubContent::getSha() const {
    return sha;
}
void
OAIGithubContent::setSha(const QString &sha) {
    this->sha = sha;
    this->m_sha_isSet = true;
}

QString
OAIGithubContent::getClass() const {
    return _class;
}
void
OAIGithubContent::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

QString
OAIGithubContent::getRepo() const {
    return repo;
}
void
OAIGithubContent::setRepo(const QString &repo) {
    this->repo = repo;
    this->m_repo_isSet = true;
}

qint32
OAIGithubContent::getSize() const {
    return size;
}
void
OAIGithubContent::setSize(const qint32 &size) {
    this->size = size;
    this->m_size_isSet = true;
}

QString
OAIGithubContent::getOwner() const {
    return owner;
}
void
OAIGithubContent::setOwner(const QString &owner) {
    this->owner = owner;
    this->m_owner_isSet = true;
}

QString
OAIGithubContent::getPath() const {
    return path;
}
void
OAIGithubContent::setPath(const QString &path) {
    this->path = path;
    this->m_path_isSet = true;
}

QString
OAIGithubContent::getBase64Data() const {
    return base64_data;
}
void
OAIGithubContent::setBase64Data(const QString &base64_data) {
    this->base64_data = base64_data;
    this->m_base64_data_isSet = true;
}


bool
OAIGithubContent::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_name_isSet){ isObjectUpdated = true; break;}
    
        if(m_sha_isSet){ isObjectUpdated = true; break;}
    
        if(m__class_isSet){ isObjectUpdated = true; break;}
    
        if(m_repo_isSet){ isObjectUpdated = true; break;}
    
        if(m_size_isSet){ isObjectUpdated = true; break;}
    
        if(m_owner_isSet){ isObjectUpdated = true; break;}
    
        if(m_path_isSet){ isObjectUpdated = true; break;}
    
        if(m_base64_data_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

